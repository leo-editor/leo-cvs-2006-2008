#@+leo-ver=4-thin
#@+node:ekr.20070627083814.1:@thin unitTests.txt
#@+all
#@+node:ekr.20070627082507:Not used
#@+node:ekr.20070627112721:Annoying
#@+node:ekr.20070627082044.909:Tests of script buttons
#@+node:ekr.20070627082044.910:@@button test-at-button-node
# Do not delete this button.  It is needed for unit tests.

# Careful: the command gets truncated as well as the button text.
#@-node:ekr.20070627082044.910:@@button test-at-button-node
#@+node:ekr.20070627082044.911:@@test script buttons create commands
# Only the button text gets truncated.

assert c.commandsDict.get('test-at-button-node'), 'no test-at-button-node command'
assert c.commandsDict.get('delete-test-at-button-node-button'), 'no delete-test-at-button-node-button command'

# print c.commandsDict.get('test-at-button')
#@-node:ekr.20070627082044.911:@@test script buttons create commands
#@-node:ekr.20070627082044.909:Tests of script buttons
#@+node:ekr.20070627082044.146:@@command unit-test-command1
g.es_print('Test of @command')
g.app.unitTestDict ['unit-test-command1'] = True
#@nonl
#@-node:ekr.20070627082044.146:@@command unit-test-command1
#@+node:ekr.20070627082044.905:@xx test checkAllPythonCode
result = c.checkAllPythonCode(unittest=True,ignoreAtIgnore=True)

assert result=="ok", "checkPythonCode returns: %s" % result
#@nonl
#@-node:ekr.20070627082044.905:@xx test checkAllPythonCode
#@-node:ekr.20070627112721:Annoying
#@+node:ekr.20070627103358:Fail
#@+node:ekr.20070627084952.1:Does not work when copied
#@clone 2
#@+node:ekr.20070627082044.677:@@test markClones
marks = [p.v for p in c.allNodes_iter() if p.isMarked()]
try:
    ok = True
    try:
        c.markClones()
    except Exception:
        ok = False
finally:
    for p in c.allNodes_iter():
        if p.v in marks:
            if not p.isMarked():
                c.setMarked(p)
        else:
            if p.isMarked():
                c.clearMarked(p)

if not ok: raise
#@nonl
#@-node:ekr.20070627082044.677:@@test markClones
#@-node:ekr.20070627084952.1:Does not work when copied
#@+node:ekr.20070627084952:Contains @thin nodes
#@+node:ekr.20070627082044.126:@@test read from string
@color
@language python
@tabwidth -4

import sys
if sys.platform.startswith('win'):

    input = p.firstChild()
    assert input, 'no Input node'
    result = input.next()
    assert result,'no Result node'
    expected = result.next()
    assert expected,'no Expected node'
    s = input.bodyString()

    c.atFileCommands.read(result,thinFile=True,fromString=s)

    try:
        p1 = result.firstChild()
        p2 = expected.firstChild()
        for p in p1.self_and_subtree_iter():
            assert p.headString() == p2.headString(),p.headString()
            assert p.bodyString() == p2.bodyString(),'body failed'
            p2.moveToThreadNext()
        c.selectVnode(result.firstChild(),updateBeadList=False)
        c.deleteOutline()
    except AssertionError:
        c.selectVnode(result.firstChild(),updateBeadList=False)
        raise
#@nonl
#@+node:ekr.20070627082044.127:Input
#@verbatim
#@+leo-ver=4-thin
#@verbatim
#@+node:ekr.20041001111106:@thin c:\prog\test\at-file-thin-test2.txt
# root line 1

#@verbatim
#@+others
#@verbatim
#@+node:ekr.20041001111106.1:node 1
# node 1 line 1

#@verbatim
#@<< node 1 ref >>
#@verbatim
#@+node:ekr.20041001111106.2:<< node 1 ref >>
# node 1 ref line 1

#@verbatim
#@+others
#@verbatim
#@+node:ekr.20041001111106.3:child node 1
#@verbatim
#@-node:ekr.20041001111106.3:child node 1
#@verbatim
#@+node:ekr.20041001111106.4:child node 2
#@verbatim
#@-node:ekr.20041001111106.4:child node 2
#@verbatim
#@-others
#@verbatim
#@nonl
#@verbatim
#@-node:ekr.20041001111106.2:<< node 1 ref >>
#@verbatim
#@nl

# node 1 last line
#@verbatim
#@nonl
#@verbatim
#@-node:ekr.20041001111106.1:node 1
#@verbatim
#@-others

# root after at-others

#@verbatim
#@<< ref >>
#@verbatim
#@+node:ekr.20041001111106.5:<< ref >>
# ref line 1

#@verbatim
#@+others
#@verbatim
#@+node:ekr.20041001111106.6:organizer node
# text of organizer node
#@verbatim
#@nonl
#@verbatim
#@+node:ekr.20041001111106.7:ref child 1
#@verbatim
#@-node:ekr.20041001111106.7:ref child 1
#@verbatim
#@+node:ekr.20041001111106.8:ref child 2
#@verbatim
#@-node:ekr.20041001111106.8:ref child 2
#@verbatim
#@-node:ekr.20041001111106.6:organizer node
#@verbatim
#@-others
#@verbatim
#@nonl
#@verbatim
#@-node:ekr.20041001111106.5:<< ref >>
#@verbatim
#@nl
#@verbatim
#@-node:ekr.20041001111106:@thin c:\prog\test\at-file-thin-test2.txt
#@verbatim
#@-leo
#@-node:ekr.20070627082044.127:Input
#@+node:ekr.20070627082044.128:Result
#@-node:ekr.20070627082044.128:Result
#@+node:ekr.20070627082044.129:Expected
#@+node:ekr.20070627082044.130:@@@thin c:\prog\test\at-file-thin-test2.txt
# root line 1

@others

# root after at-others

<< ref >>
#@+node:ekr.20070627082044.131:node 1
# node 1 line 1

<< node 1 ref >>

# node 1 last line
#@nonl
#@+node:ekr.20070627082044.132:<< node 1 ref >>
# node 1 ref line 1

@others
#@nonl
#@+node:ekr.20070627082044.133:child node 1
#@-node:ekr.20070627082044.133:child node 1
#@+node:ekr.20070627082044.134:child node 2
#@-node:ekr.20070627082044.134:child node 2
#@-node:ekr.20070627082044.132:<< node 1 ref >>
#@-node:ekr.20070627082044.131:node 1
#@+node:ekr.20070627082044.135:<< ref >>
# ref line 1

@others
#@nonl
#@+node:ekr.20070627082044.136:organizer node
# text of organizer node
#@nonl
#@+node:ekr.20070627082044.137:ref child 1
#@-node:ekr.20070627082044.137:ref child 1
#@+node:ekr.20070627082044.138:ref child 2
#@-node:ekr.20070627082044.138:ref child 2
#@-node:ekr.20070627082044.136:organizer node
#@-node:ekr.20070627082044.135:<< ref >>
#@-node:ekr.20070627082044.130:@@@thin c:\prog\test\at-file-thin-test2.txt
#@-node:ekr.20070627082044.129:Expected
#@-node:ekr.20070627082044.126:@@test read from string
#@+node:ekr.20070627082044.807:@@thin ../test/unittest/errorTest.py
#@+node:ekr.20070627082044.808:@thin ../test/unittest/errorTest.py
# A file that contains functions with errors in them.
# This is used to test error reporting in scripts

@language python
@tabwidth -4

def testIndexError():

    a = []
    b = a[2]
#@nonl
#@-node:ekr.20070627082044.808:@thin ../test/unittest/errorTest.py
#@-node:ekr.20070627082044.807:@@thin ../test/unittest/errorTest.py
#@+node:ekr.20070627082044.809:Batch mode tests...
#@+node:ekr.20070627082044.810:@@thin ../test/unittest/batchTest.py
#@+node:ekr.20070627082044.811:@thin ../test/unittest/batchTest.py
# A file to be executed in batch mode as part of unit testing.

@language python
@tabwidth -4

path = g.os_path_join(g.app.loadDir,"..","test","unittest","createdFile.txt")

if 0:
    print "creating", path

f = None
try:
    try:
        f = open(path,"w")
        f.write("This is a test")
    except IOError:
        g.es("Can not create", path)
finally:
    if f:
        f.close()
#@nonl
#@-node:ekr.20070627082044.811:@thin ../test/unittest/batchTest.py
#@-node:ekr.20070627082044.810:@@thin ../test/unittest/batchTest.py
#@+node:ekr.20070627082044.812:@@test batch mode
import os
import sys

verbose = False

python_interp = sys.executable
test_path = g.os_path_join(g.app.loadDir,"..","test","unittest")
src_path  = g.os_path_join(g.app.loadDir,"..","src")

leo_file   = g.os_path_join(src_path,"leo.py")
batch_file = g.os_path_join(test_path,"batchTest.py")
test_file  = g.os_path_join(test_path,"createdFile.txt")

# Execute this command: python leo.py -script test\unittest\batchTest.py

command = r"%s %s -script %s" % (python_interp,leo_file,batch_file)

@others

removeFile(test_file,verbose)
os.system(command)

try:
    g.redirectStdout()
    removeFile(test_file,verbose)
    os.system(command)
finally:
    g.restoreStdout()

assert(g.os_path_exists(test_file))
#@nonl
#@+node:ekr.20070627082044.813:removeFile
def removeFile(path,verbose):

    if os.path.exists(test_file):
        if verbose:
            print "@test batch mode: deleting",test_file
        os.remove(test_file)
    else:
        if verbose:
            print "@test batch mode: not found:",test_file
#@-node:ekr.20070627082044.813:removeFile
#@-node:ekr.20070627082044.812:@@test batch mode
#@-node:ekr.20070627082044.809:Batch mode tests...
#@+node:ekr.20070627082044.108:@@test @thin
import leoTest

leoTest.runAtFileTest(c,p)
#@nonl
#@+node:ekr.20070627082044.109:#@thin
Line 1

@last last line 1: no newline
#@nonl
#@-node:ekr.20070627082044.109:#@thin
#@+node:ekr.20070627082044.110:Output
#@verbatim
#@+leo-ver=4-thin
#@verbatim
#@+node:ekr.20040707141957.13:#@thin
Line 1

#@verbatim
#@@last
#@verbatim
#@nonl
#@verbatim
#@-node:ekr.20040707141957.13:#@thin
#@verbatim
#@-leo
last line 1: no newline
#@nonl
#@-node:ekr.20070627082044.110:Output
#@-node:ekr.20070627082044.108:@@test @thin
#@-node:ekr.20070627084952:Contains @thin nodes
#@+node:ekr.20070627082044.561:@@test newline-and-indent
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.562:work
#@-node:ekr.20070627082044.562:work
#@+node:ekr.20070627082044.563:before sel=2.6,2.6
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.563:before sel=2.6,2.6
#@+node:ekr.20070627082044.564:after sel=3.1,3.1
first line
line 1

    line a
        line b
line c
last line
#@-node:ekr.20070627082044.564:after sel=3.1,3.1
#@-node:ekr.20070627082044.561:@@test newline-and-indent
#@+node:ekr.20070627082044.934:@@test visback
p1 = p.copy()
a = p.firstChild()
b = a.firstChild()
c2 = b.firstChild()
limit = a.next()
d = limit.firstChild()
e = limit.next()
assert e.headString() == 'e'
for p2,h in ((a,'a'),(b,'b'),(c2,'c2'),(d,'d'),(limit,'limit')):
    p2.expand()
    assert p2.headString()==h,'headString mismatch'

try: # Tests without hoist...
    p1.expand()
    assert not c.hoistStack
    c.selectPosition(limit)
    result = limit.copy().moveToVisBack(c)
    assert result==c2,'visBack != c2: %s' % result
    #
    result = limit.copy().moveToVisNext(c)
    assert result==d,'visNext != d: %s' % result
finally:
    p1.contract()

try: # Tests with hoist.
    p1.expand()
    c.selectPosition(limit)
    c.hoist()
    result = limit.copy().moveToVisBack(c)
    assert not result,'limited visBack: %s' % result
    #
    result = limit.copy().moveToVisNext(c)
    assert result==d,'limited visNext !=d: %s' % result
finally:
    c.dehoist()
    c.selectPosition(p1)
    p1.contract()
    c.redraw_now()
#@+node:ekr.20070627082044.935:a
#@+node:ekr.20070627082044.936:b
#@+node:ekr.20070627082044.937:c2
#@-node:ekr.20070627082044.937:c2
#@-node:ekr.20070627082044.936:b
#@-node:ekr.20070627082044.935:a
#@+node:ekr.20070627082044.938:limit
#@+node:ekr.20070627082044.939:d
#@-node:ekr.20070627082044.939:d
#@-node:ekr.20070627082044.938:limit
#@+node:ekr.20070627082044.940:e
#@-node:ekr.20070627082044.940:e
#@-node:ekr.20070627082044.934:@@test visback
#@+node:ekr.20070627082044.841:@@test bogus tnodeList doesn't corrupt @thin nodes
import leoTest

u = leoTest.testUtils(c)
h = "@thin leoTest.py"
p = u.findNodeAnywhere(h)
assert p,'node not found: %s' % h

p.v.t.tnodeList = ["bogus tnodeList"]

if 0: # This causes p to be written, thereby clearing the tnodeList.
    p.setDirty()

if 0: # This actually saves this file, so it is a bit dangerous.
    g.app.unitTestDict = {}
    # c.save()
    ok = g.app.unitTestDict.get("warning")
    assert ok, "putVnode failed to give warning"
#@nonl
#@-node:ekr.20070627082044.841:@@test bogus tnodeList doesn't corrupt @thin nodes
#@-node:ekr.20070627103358:Fail
#@+node:ekr.20070627082044.922:@@test zz restore the screen
# This is **not** a real unit test.
# It simply restores the screen to a more convenient state.
import leoTest
u = leoTest.testUtils(c)

c.beginUpdate()
try:
    c.contractParent()
    c.selectPosition(p.parent())
    g.app.unitTestDict['restoreSelectedNode']=False
finally:
    c.endUpdate()

print ; print 'End of general unit tests'
#@nonl
#@-node:ekr.20070627082044.922:@@test zz restore the screen
#@-node:ekr.20070627082507:Not used
#@+node:ekr.20070628123649:@test that all @test nodes in derived files start with if g.unitTesting
# print '-' * 30
ok = True
p = c.rootPosition()
while p:
    if p.isAnyAtFileNode():
        h = p.headString()
        if h.endswith('.py'):
            # print 'checking',p.headString()
            # Check all the descendant nodes.
            for p2 in p.subtree_iter():
                h = p2.headString()
                for tag in ('@test','@suite'):
                    if h.startswith(tag):
                        s = p2.bodyString()
                        lines = g.splitLines(s)
                        for line in lines:
                            # print 'line',line
                            if not line.strip() or line.startswith('#'):
                                continue
                            elif line.startswith('if g.unitTesting:'):
                                break
                            else:
                                print 'in',p.headString()
                                print 'missing "if g.unitTesting:"',h
                                ok = False ; break
        p.moveToNodeAfterTree()
    else:
        p.moveToThreadNext()
assert ok
#@nonl
#@-node:ekr.20070628123649:@test that all @test nodes in derived files start with if g.unitTesting
#@+node:ekr.20070628110656:@unit-tests Can not be in derived files
#@+node:ekr.20070629065730:Contain clones
#@+node:ekr.20070627082044.861:inner @test: Test consistency between parents iter and v.parents
# The actual test is in a child node.
#@nonl
#@clone 2
#@+node:ekr.20070627082044.862:parent
#@+node:ekr.20070627082044.863:@test consistency between parents iter and v.parents
if g.unitTesting:
    try:
        for p in c.allNodes_iter():
            if 0: # Check all ancestors.  This is tricky and doesn't work yet.
                parents1 = [parent.v for parent in p.parents_iter()]
                parents2 = []
                parent2 = p.v.directParents()
                while parent2:
                    v = parent2[0]
                    parents2.append(v)
                    parent2 = v.directParents()
            else:
                if p.v._parent: parents1 = p.v._parent.t.vnodeList
                else:           parents1 = []
                parents2 = p.v.directParents()

            assert len(parents1) == len(parents2), "length mismatch: %s, %s" % (p,p.v._parent)
            for parent in parents1:
                assert parent in parents2, "%s not in %s" % (parent,parent1)
            for parent in parents2:
                assert parent in parents1, "%s not in %s" % (parent,parent2)

    except AssertionError:
        print "parents1"
        for parent in parents1: print parent
        print "parents2"
        for parent in parents2: print parent
        raise
#@-node:ekr.20070627082044.863:@test consistency between parents iter and v.parents
#@-node:ekr.20070627082044.862:parent
#@-node:ekr.20070627082044.861:inner @test: Test consistency between parents iter and v.parents
#@-node:ekr.20070629065730:Contain clones
#@+node:ekr.20070629065730.1:Contain non-python code
#@+node:ekr.20070630070931:leoNodes (2 fail)
#@+node:ekr.20070630070045.6:@test p.iters and v.iters
import leoNodes

current = c.currentPosition()
child = current.firstChild()

allList = [p.v for p in c.all_positions_iter()]
vList1 = [v for v in current.vnodes_iter()]
vList2 = [v for v in current.unique_vnodes_iter()]

if 0:
    for v in vList1: print v
    for v in vList2: print v

if 0:
    print len(allList),len(vList1),len(vList2)

if 0: # v.iters no longer exist.
    << tests of consistency of p and v iters >>
<< tests that node iterators return no duplicate nodes >>
<< print nodes returned by iterators >>
#@nonl
#@+node:ekr.20070630070045.7:child1
#@clone 2
#@+node:ekr.20070630070045.8:a
#@+node:ekr.20070630070045.9:b
#@-node:ekr.20070630070045.9:b
#@-node:ekr.20070630070045.8:a
#@+node:ekr.20070630070045.10:c
#@-node:ekr.20070630070045.10:c
#@+node:ekr.20070630070045.11:d
#@+node:ekr.20070630070045.12:e
#@-node:ekr.20070630070045.12:e
#@-node:ekr.20070630070045.11:d
#@-node:ekr.20070630070045.7:child1
#@+node:ekr.20070630070045.13:child2
#@-node:ekr.20070630070045.13:child2
#@+node:ekr.20070630070045.14:<< tests of consistency of p and v iters >>
try:
    tag = "test1"
    list1 = [v for v in current.vnodes_iter()]
    list2 = [v for v in current.v.self_and_subtree_iter()]
    assert(list1==list2)

    tag = "test2"
    list1 = [p.v for p in c.all_positions_iter()]
    list2 = [v   for v in c.all_vnodes_iter()]
    assert(list1==list2)

    # print "consistency tests pass"

except AssertionError:
    print tag
    print "list1"
    for v in list1: print v
    print "list2"
    for v in list2: print v
    raise
#@-node:ekr.20070630070045.14:<< tests of consistency of p and v iters >>
#@+node:ekr.20070630070045.15:<< tests that node iterators return no duplicate nodes >>
nodes = []
for v in current.unique_vnodes_iter():
    assert v not in nodes
    nodes.append(v)

nodes = []
for t in current.unique_tnodes_iter():
    assert t not in nodes
    nodes.append(t)

# print "duplicate tests pass"
#@-node:ekr.20070630070045.15:<< tests that node iterators return no duplicate nodes >>
#@+node:ekr.20070630070045.16:<< print nodes returned by iterators >>
if 0:
    for v in current.vnodes_iter(): print v
    for v in current.unique_vnodes_iter(): print v

if 0: # subtree of root node:
    root = c.rootPosition()
    for v in root.vnodes_iter(): print v
    for t in root.tnodes_iter(): print t

if 0: # child1's tree.  child2 should not be included.
    for v in child.vnodes_iter(): print v
    for t in child.tnodes_iter(): print t
#@nonl
#@-node:ekr.20070630070045.16:<< print nodes returned by iterators >>
#@-node:ekr.20070630070045.6:@test p.iters and v.iters
#@+node:ekr.20070630070045.4:@test p.setBodyStringOrPane
# Tests that c.setBodyString works immediately.
h = p.headString()

try:
    child = p.firstChild()
    before = child.bodyString()
    after = "after"
    c.setBodyString(child,"after")
    c.selectPosition(child)
    t = c.frame.body.bodyCtrl
    s = t.get("1.0","end")
    assert s.rstrip() == after.rstrip(), \
        "c.setBodyString failed: %s, %s" % (repr(s),repr(after))
finally:
    c.setBodyString(child,before)
    c.selectPosition(p)
#@nonl
#@+node:ekr.20070630070045.5:child
after
#@nonl
#@-node:ekr.20070630070045.5:child
#@-node:ekr.20070630070045.4:@test p.setBodyStringOrPane
#@-node:ekr.20070630070931:leoNodes (2 fail)
#@+node:ekr.20070630070931.1:commands (8 fail)
#@+node:ekr.20070627082044.684:@suite Edit body tests
# Create unit tests in g.app.scriptDict["suite"]

import leoTest

g.app.enableUnitTest = True

suite = leoTest.makeEditBodySuite(c)

g.app.scriptDict['suite'] = suite
#@nonl
#@+node:ekr.20070627082044.685:editBodyTests
@language plain

The names of child nodes are the names of commander methods to be called to do the test.

Each child node will in turn have two or more children:

- a "before" node
- an "after" node
- an optional selection node containing two lines giving the selection range in Tk coordinates.
- An optional insert node containing one line giving the insert point in Tk coordinates.
#@nonl
#@+node:ekr.20070627082044.686:tempNode
#@-node:ekr.20070627082044.686:tempNode
#@+node:ekr.20070627082044.687:addComments
#@+node:ekr.20070627082044.688:before
@language python

def addCommentTest():

    if 1:
        a = 2
        b = 3

    pass
#@nonl
#@-node:ekr.20070627082044.688:before
#@+node:ekr.20070627082044.689:after
@language python

def addCommentTest():

    # if 1:
        # a = 2
        # b = 3

    pass
#@nonl
#@-node:ekr.20070627082044.689:after
#@+node:ekr.20070627082044.690:selection
5.0
7.8
#@nonl
#@-node:ekr.20070627082044.690:selection
#@-node:ekr.20070627082044.687:addComments
#@+node:ekr.20070627082044.691:convertAllBlanks
#@+node:ekr.20070627082044.692:before
@tabwidth -4

line 1
    line 2
      line 3
line4
#@nonl
#@-node:ekr.20070627082044.692:before
#@+node:ekr.20070627082044.693:after
@tabwidth -4

line 1
	line 2
	  line 3
line4
#@nonl
#@-node:ekr.20070627082044.693:after
#@+node:ekr.20070627082044.694:selection
1.0
6.5
#@nonl
#@-node:ekr.20070627082044.694:selection
#@-node:ekr.20070627082044.691:convertAllBlanks
#@+node:ekr.20070627082044.695:convertAllTabs
#@+node:ekr.20070627082044.696:before
@tabwidth -4

line 1
	line 2
	  line 3
line4
#@nonl
#@-node:ekr.20070627082044.696:before
#@+node:ekr.20070627082044.697:after
@tabwidth -4

line 1
    line 2
      line 3
line4
#@nonl
#@-node:ekr.20070627082044.697:after
#@+node:ekr.20070627082044.698:selection
1.0
6.5
#@nonl
#@-node:ekr.20070627082044.698:selection
#@-node:ekr.20070627082044.695:convertAllTabs
#@+node:ekr.20070627082044.699:convertBlanks
#@+node:ekr.20070627082044.700:before
@tabwidth -4

line 1
    line 2
      line 3
line4
#@nonl
#@-node:ekr.20070627082044.700:before
#@+node:ekr.20070627082044.701:after
@tabwidth -4

line 1
	line 2
	  line 3
line4
#@nonl
#@-node:ekr.20070627082044.701:after
#@+node:ekr.20070627082044.702:selection
1.0
6.5
#@nonl
#@-node:ekr.20070627082044.702:selection
#@-node:ekr.20070627082044.699:convertBlanks
#@+node:ekr.20070627082044.703:convertTabs
#@+node:ekr.20070627082044.704:before
@tabwidth -4

line 1
	line 2
	  line 3
line4
#@nonl
#@-node:ekr.20070627082044.704:before
#@+node:ekr.20070627082044.705:after
@tabwidth -4

line 1
    line 2
      line 3
line4
#@nonl
#@-node:ekr.20070627082044.705:after
#@+node:ekr.20070627082044.706:selection
1.0
6.5
#@nonl
#@-node:ekr.20070627082044.706:selection
#@-node:ekr.20070627082044.703:convertTabs
#@+node:ekr.20070627082044.707:dedentBody
#@+node:ekr.20070627082044.708:before
line 1
    line 2
    line 3
line 4
#@nonl
#@-node:ekr.20070627082044.708:before
#@+node:ekr.20070627082044.709:after
line 1
line 2
line 3
line 4
#@nonl
#@-node:ekr.20070627082044.709:after
#@+node:ekr.20070627082044.710:selection
2.0
3.5
#@nonl
#@-node:ekr.20070627082044.710:selection
#@-node:ekr.20070627082044.707:dedentBody
#@+node:ekr.20070627082044.711:deleteComments
#@+node:ekr.20070627082044.712:before
@language python

def deleteCommentTest():

    # if 1:
        # a = 2
        # b = 3

    pass
#@nonl
#@-node:ekr.20070627082044.712:before
#@+node:ekr.20070627082044.713:after
@language python

def deleteCommentTest():

    if 1:
        a = 2
        b = 3

    pass
#@nonl
#@-node:ekr.20070627082044.713:after
#@+node:ekr.20070627082044.714:selection
5.0
7.8
#@nonl
#@-node:ekr.20070627082044.714:selection
#@-node:ekr.20070627082044.711:deleteComments
#@+node:ekr.20070627082044.715:extract test1
#@+node:ekr.20070627082044.716:before
before
    << section >>
    sec line 1
        sec line 2 indented
sec line 3
after
#@nonl
#@-node:ekr.20070627082044.716:before
#@+node:ekr.20070627082044.717:after
before
after
#@nonl
#@+node:ekr.20070627082044.718:<< section >>
sec line 1
    sec line 2 indented
sec line 3
#@nonl
#@-node:ekr.20070627082044.718:<< section >>
#@-node:ekr.20070627082044.717:after
#@+node:ekr.20070627082044.719:selection
2.0
5.10
#@nonl
#@-node:ekr.20070627082044.719:selection
#@-node:ekr.20070627082044.715:extract test1
#@+node:ekr.20070627082044.720:extract test2
#@+node:ekr.20070627082044.721:before
before
    << section >>
    sec line 1
        sec line 2 indented
sec line 3
after
#@nonl
#@-node:ekr.20070627082044.721:before
#@+node:ekr.20070627082044.722:after
before
    << section >>
    sec line 1
        sec line 2 indented
sec line 3
after
#@nonl
#@-node:ekr.20070627082044.722:after
#@+node:ekr.20070627082044.723:selection
2.0
2.16
#@nonl
#@-node:ekr.20070627082044.723:selection
#@-node:ekr.20070627082044.720:extract test2
#@+node:ekr.20070627082044.724:extractSection test1
#@+node:ekr.20070627082044.725:before
before
    << section >>
    sec line 1
        sec line 2 indented
sec line 3
after
#@nonl
#@-node:ekr.20070627082044.725:before
#@+node:ekr.20070627082044.726:after
before
    << section >>
after
#@nonl
#@+node:ekr.20070627082044.727:<< section >>
sec line 1
    sec line 2 indented
sec line 3
#@nonl
#@-node:ekr.20070627082044.727:<< section >>
#@-node:ekr.20070627082044.726:after
#@+node:ekr.20070627082044.728:selection
2.0
5.10
#@nonl
#@-node:ekr.20070627082044.728:selection
#@-node:ekr.20070627082044.724:extractSection test1
#@+node:ekr.20070627082044.729:extractSection test2
#@+node:ekr.20070627082044.730:before
before
    << section >>
    sec line 1
        sec line 2 indented
sec line 3
after
#@nonl
#@-node:ekr.20070627082044.730:before
#@+node:ekr.20070627082044.731:after
before
    << section >>
    sec line 1
        sec line 2 indented
sec line 3
after
#@nonl
#@-node:ekr.20070627082044.731:after
#@+node:ekr.20070627082044.732:selection
2.0
2.16
#@nonl
#@-node:ekr.20070627082044.732:selection
#@-node:ekr.20070627082044.729:extractSection test2
#@-node:ekr.20070627082044.685:editBodyTests
#@-node:ekr.20070627082044.684:@suite Edit body tests
#@+node:ekr.20070627082044.671:@test changing headline marks descendent @thin nodes dirty
if g.unitTesting:
    # Make sure that changing this headline marks descendant @thin nodes dirty.
    h = p.headString()

    c.beginUpdate()
    try:
        child = p.firstChild()
        child.initHeadString("@thin bogus")
        assert child.headString() == "@thin bogus", "setting headline failed"
        child.clearDirty()
        assert not child.isDirty(), "clearing dirty failed"
        c.setHeadString(p,"changed")
        assert child.isDirty(), "setting descendant @thin nodes dirty failed."
    finally:
        try:
            c.setHeadString(p,h)
            c.setHeadString(child,"bogus")
            p.clearDirty()
            child.clearDirty()
        finally: pass
        c.endUpdate()
#@+node:ekr.20070627082044.672:bogus
test
#@nonl
#@-node:ekr.20070627082044.672:bogus
#@-node:ekr.20070627082044.671:@test changing headline marks descendent @thin nodes dirty
#@+node:ekr.20070627082044.83:@test reads/write using @comment
at = c.atFileCommands
child = p.firstChild()
child2 = child.next()
result = str(child2.bodyString())
at.write(child,nosentinels=False,thinFile=False,scriptWrite=False,toString=True)
s = str(at.stringOutput)
assert s == result
# if s != result:
    # print '-' * 30
    # print repr(s)
    # print
    # print repr(result)
    # assert False
#@+node:ekr.20070627082044.84:root
@language c
#ifdef COMMENT
@comment /* */ 
#endif
@tabwidth 4
@lineending crlf

@others

<< Get LRR Task >>
<< Start LRR >>
#@nonl
#@+node:ekr.20070627082044.85:<< Get LRR Task >>
#@-node:ekr.20070627082044.85:<< Get LRR Task >>
#@+node:ekr.20070627082044.86:<< Start LRR >>
#@-node:ekr.20070627082044.86:<< Start LRR >>
#@-node:ekr.20070627082044.84:root
#@+node:ekr.20070627082044.87:Result
/*@+leo-ver=4*/
/*@+node:root*/
/*@@language c*/
#ifdef COMMENT
/*@@comment /* */ */
#endif
/*@@tabwidth 4*/
/*@@lineending crlf*/

/*@+others*/
/*@-others*/

/*@<< Get LRR Task >>*/
/*@+node:<< Get LRR Task >>*/
/*@-node:<< Get LRR Task >>*/
/*@nl*/
/*@<< Start LRR >>*/
/*@+node:<< Start LRR >>*/
/*@-node:<< Start LRR >>*/
/*@nl*/
/*@nonl*/
/*@-node:root*/
/*@-leo*/
#@-node:ekr.20070627082044.87:Result
#@-node:ekr.20070627082044.83:@test reads/write using @comment
#@+node:ekr.20070627082044.266:@unit-tests Edit commands
#@+node:ekr.20070627082044.279:A-E
#@+node:ekr.20070627082044.280:@test add-space-to-lines
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.281:work
first line
 line 1
     line a
 line b
last line
#@nonl
#@-node:ekr.20070627082044.281:work
#@+node:ekr.20070627082044.282:before sel=2.0,4.6
first line
line 1
    line a
line b
last line
#@nonl
#@-node:ekr.20070627082044.282:before sel=2.0,4.6
#@+node:ekr.20070627082044.283:after sel=2.0,4.7
first line
 line 1
     line a
 line b
last line
#@nonl
#@-node:ekr.20070627082044.283:after sel=2.0,4.7
#@-node:ekr.20070627082044.280:@test add-space-to-lines
#@+node:ekr.20070627082044.284:@test add-tab-to-lines
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.285:work
first line
    line 1
        line a
            line b
    line c
last line
#@nonl
#@-node:ekr.20070627082044.285:work
#@+node:ekr.20070627082044.286:before sel=2.0,5.6
first line
line 1
    line a
        line b
line c
last line
#@nonl
#@-node:ekr.20070627082044.286:before sel=2.0,5.6
#@+node:ekr.20070627082044.287:after sel=2.0,5.10
first line
    line 1
        line a
            line b
    line c
last line
#@nonl
#@-node:ekr.20070627082044.287:after sel=2.0,5.10
#@-node:ekr.20070627082044.284:@test add-tab-to-lines
#@+node:ekr.20070627082044.288:@test back-char
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.289:work
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.289:work
#@+node:ekr.20070627082044.290:before sel=3.8,3.8
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.290:before sel=3.8,3.8
#@+node:ekr.20070627082044.291:after sel=3.7,3.7
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.291:after sel=3.7,3.7
#@-node:ekr.20070627082044.288:@test back-char
#@+node:ekr.20070627082044.292:@test back-char-extend-selection
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.293:work
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.293:work
#@+node:ekr.20070627082044.294:before sel=4.12,4.12
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.294:before sel=4.12,4.12
#@+node:ekr.20070627082044.295:after sel=4.11,4.12
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.295:after sel=4.11,4.12
#@-node:ekr.20070627082044.292:@test back-char-extend-selection
#@+node:ekr.20070627082044.296:@test back-paragraph
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.297:work
Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
#@nonl
#@-node:ekr.20070627082044.297:work
#@+node:ekr.20070627082044.298:before sel=9.0,9.0
Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
#@nonl
#@-node:ekr.20070627082044.298:before sel=9.0,9.0
#@+node:ekr.20070627082044.299:after sel=6.7,6.7
Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
#@nonl
#@-node:ekr.20070627082044.299:after sel=6.7,6.7
#@-node:ekr.20070627082044.296:@test back-paragraph
#@+node:ekr.20070627082044.300:@test back-paragraph-extend-selection
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.301:work
Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
#@nonl
#@-node:ekr.20070627082044.301:work
#@+node:ekr.20070627082044.302:before sel=9.0,9.5
Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
#@nonl
#@-node:ekr.20070627082044.302:before sel=9.0,9.5
#@+node:ekr.20070627082044.303:after sel=6.7,9.5
Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
#@nonl
#@-node:ekr.20070627082044.303:after sel=6.7,9.5
#@-node:ekr.20070627082044.300:@test back-paragraph-extend-selection
#@+node:ekr.20070627082044.304:@test back-sentence
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.305:work
Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
#@nonl
#@-node:ekr.20070627082044.305:work
#@+node:ekr.20070627082044.306:before sel=3.169,3.169
Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
#@nonl
#@-node:ekr.20070627082044.306:before sel=3.169,3.169
#@+node:ekr.20070627082044.307:after sel=3.0,3.0
Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
#@nonl
#@-node:ekr.20070627082044.307:after sel=3.0,3.0
#@-node:ekr.20070627082044.304:@test back-sentence
#@+node:ekr.20070627082044.308:@test back-sentence-extend-selection
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.309:work
Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
#@nonl
#@-node:ekr.20070627082044.309:work
#@+node:ekr.20070627082044.310:before sel=3.208,3.208
Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
#@nonl
#@-node:ekr.20070627082044.310:before sel=3.208,3.208
#@+node:ekr.20070627082044.311:after sel=3.0,3.208
Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
#@nonl
#@-node:ekr.20070627082044.311:after sel=3.0,3.208
#@-node:ekr.20070627082044.308:@test back-sentence-extend-selection
#@+node:ekr.20070627082044.312:@test back-to-indentation
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.313:work
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.313:work
#@+node:ekr.20070627082044.314:before sel=4.13,4.13
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.314:before sel=4.13,4.13
#@+node:ekr.20070627082044.315:after sel=4.8,4.8
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.315:after sel=4.8,4.8
#@-node:ekr.20070627082044.312:@test back-to-indentation
#@+node:ekr.20070627082044.316:@test back-word
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.317:work
Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
#@nonl
#@-node:ekr.20070627082044.317:work
#@+node:ekr.20070627082044.318:before sel=1.183,1.183
Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
#@nonl
#@-node:ekr.20070627082044.318:before sel=1.183,1.183
#@+node:ekr.20070627082044.319:after sel=1.178,1.178
Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
#@nonl
#@-node:ekr.20070627082044.319:after sel=1.178,1.178
#@-node:ekr.20070627082044.316:@test back-word
#@+node:ekr.20070627082044.320:@test back-word-extend-selection
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.321:work
Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
#@nonl
#@-node:ekr.20070627082044.321:work
#@+node:ekr.20070627082044.322:before sel=3.342,3.342
Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
#@nonl
#@-node:ekr.20070627082044.322:before sel=3.342,3.342
#@+node:ekr.20070627082044.323:after sel=3.332,3.342
Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
#@nonl
#@-node:ekr.20070627082044.323:after sel=3.332,3.342
#@-node:ekr.20070627082044.320:@test back-word-extend-selection
#@+node:ekr.20070627082044.324:@test backward-delete-char
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.325:work
first lie
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.325:work
#@+node:ekr.20070627082044.326:before sel=1.9,1.9
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.326:before sel=1.9,1.9
#@+node:ekr.20070627082044.327:after sel=1.8,1.8
first lie
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.327:after sel=1.8,1.8
#@-node:ekr.20070627082044.324:@test backward-delete-char
#@+node:ekr.20070627082044.328:@test backward-kill-paragraph
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.329:work
Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
#@nonl
#@-node:ekr.20070627082044.329:work
#@+node:ekr.20070627082044.330:before sel=9.0,9.0
Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
#@nonl
#@-node:ekr.20070627082044.330:before sel=9.0,9.0
#@+node:ekr.20070627082044.331:after sel=7.0,7.0
Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
#@nonl
#@-node:ekr.20070627082044.331:after sel=7.0,7.0
#@-node:ekr.20070627082044.328:@test backward-kill-paragraph
#@+node:ekr.20070627082044.332:@test backward-kill-sentence
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.333:work
This is the first sentence.  This
is the second sentence.
#@-node:ekr.20070627082044.333:work
#@+node:ekr.20070627082044.334:before sel=3.2,3.2
This is the first sentence.  This
is the second sentence.  And
this is the last sentence.
#@-node:ekr.20070627082044.334:before sel=3.2,3.2
#@+node:ekr.20070627082044.335:after sel=2.23,2.23
This is the first sentence.  This
is the second sentence.
#@-node:ekr.20070627082044.335:after sel=2.23,2.23
#@-node:ekr.20070627082044.332:@test backward-kill-sentence
#@+node:ekr.20070627082044.336:@test beginning-of-buffer
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.337:work
Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
#@nonl
#@-node:ekr.20070627082044.337:work
#@+node:ekr.20070627082044.338:before sel=5.56,5.56
Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
#@nonl
#@-node:ekr.20070627082044.338:before sel=5.56,5.56
#@+node:ekr.20070627082044.339:after sel=1.0,1.0
Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
#@nonl
#@-node:ekr.20070627082044.339:after sel=1.0,1.0
#@-node:ekr.20070627082044.336:@test beginning-of-buffer
#@+node:ekr.20070627082044.340:@test beginning-of-buffer-extend-selection
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.341:work
Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
#@nonl
#@-node:ekr.20070627082044.341:work
#@+node:ekr.20070627082044.342:before sel=3.423,3.423
Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
#@nonl
#@-node:ekr.20070627082044.342:before sel=3.423,3.423
#@+node:ekr.20070627082044.343:after sel=1.0,3.423
Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
#@nonl
#@-node:ekr.20070627082044.343:after sel=1.0,3.423
#@-node:ekr.20070627082044.340:@test beginning-of-buffer-extend-selection
#@+node:ekr.20070627082044.344:@test beginning-of-line
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.345:work
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.345:work
#@+node:ekr.20070627082044.346:before sel=3.10,3.10
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.346:before sel=3.10,3.10
#@+node:ekr.20070627082044.347:after sel=3.0,3.0
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.347:after sel=3.0,3.0
#@-node:ekr.20070627082044.344:@test beginning-of-line
#@+node:ekr.20070627082044.348:@test beginning-of-line-extend-selection
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.349:work
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.349:work
#@+node:ekr.20070627082044.350:before sel=4.10,4.10
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.350:before sel=4.10,4.10
#@+node:ekr.20070627082044.351:after sel=4.0,4.10
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.351:after sel=4.0,4.10
#@-node:ekr.20070627082044.348:@test beginning-of-line-extend-selection
#@+node:ekr.20070627082044.352:@test capitalize-word
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.353:work
first line
line 1
    Line a
        line b
line c
last line
#@-node:ekr.20070627082044.353:work
#@+node:ekr.20070627082044.354:before sel=3.6,3.6
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.354:before sel=3.6,3.6
#@+node:ekr.20070627082044.355:after sel=3.6,3.6
first line
line 1
    Line a
        line b
line c
last line
#@-node:ekr.20070627082044.355:after sel=3.6,3.6
#@-node:ekr.20070627082044.352:@test capitalize-word
#@+node:ekr.20070627082044.356:@test center-line
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.357:work
Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related,
leading to around 500 deaths per year and nearly $14 billion in damage.
StormReady, a program started in 1999 in Tulsa, OK,
helps arm America's communities with the communication and safety
skills needed to save lives and property– before and during the event.
StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
#@-node:ekr.20070627082044.357:work
#@+node:ekr.20070627082044.358:before sel=3.0,9.0
Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related,
leading to around 500 deaths per year and nearly $14 billion in damage.
StormReady, a program started in 1999 in Tulsa, OK,
helps arm America's communities with the communication and safety
skills needed to save lives and property– before and during the event.
StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
#@-node:ekr.20070627082044.358:before sel=3.0,9.0
#@+node:ekr.20070627082044.359:after sel=3.0,9.0
Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related,
leading to around 500 deaths per year and nearly $14 billion in damage.
StormReady, a program started in 1999 in Tulsa, OK,
helps arm America's communities with the communication and safety
skills needed to save lives and property– before and during the event.
StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
#@-node:ekr.20070627082044.359:after sel=3.0,9.0
#@-node:ekr.20070627082044.356:@test center-line
#@+node:ekr.20070627082044.360:@test center-region
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.361:work
Some 90% of all presidentially declared disasters are weather related,
leading to around 500 deaths per year and nearly $14 billion in damage.
         StormReady, a program started in 1999 in Tulsa, OK,
  helps arm America's communities with the communication and safety
skills needed to save lives and property– before and during the event.
StormReady helps community leaders and emergency managers strengthen local safety programs.
#@-node:ekr.20070627082044.361:work
#@+node:ekr.20070627082044.362:before sel=1.0,7.0
Some 90% of all presidentially declared disasters are weather related,
leading to around 500 deaths per year and nearly $14 billion in damage.
StormReady, a program started in 1999 in Tulsa, OK,
helps arm America's communities with the communication and safety
skills needed to save lives and property– before and during the event.
StormReady helps community leaders and emergency managers strengthen local safety programs.
#@-node:ekr.20070627082044.362:before sel=1.0,7.0
#@+node:ekr.20070627082044.363:after sel=1.0,7.0
Some 90% of all presidentially declared disasters are weather related,
leading to around 500 deaths per year and nearly $14 billion in damage.
         StormReady, a program started in 1999 in Tulsa, OK,
  helps arm America's communities with the communication and safety
skills needed to save lives and property– before and during the event.
StormReady helps community leaders and emergency managers strengthen local safety programs.
#@-node:ekr.20070627082044.363:after sel=1.0,7.0
#@-node:ekr.20070627082044.360:@test center-region
#@+node:ekr.20070627082044.364:@test clear-rectangle
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.365:work
before
aaa   bbb
aaa   bbb
aaa   bbb
aaa   bbb
after
#@nonl
#@-node:ekr.20070627082044.365:work
#@+node:ekr.20070627082044.366:before sel=2.3,5.6
before
aaaxxxbbb
aaaxxxbbb
aaaxxxbbb
aaaxxxbbb
after
#@nonl
#@-node:ekr.20070627082044.366:before sel=2.3,5.6
#@+node:ekr.20070627082044.367:after sel=2.3,5.6
before
aaa   bbb
aaa   bbb
aaa   bbb
aaa   bbb
after
#@nonl
#@-node:ekr.20070627082044.367:after sel=2.3,5.6
#@-node:ekr.20070627082044.364:@test clear-rectangle
#@+node:ekr.20070627082044.368:@test clear-selected-text
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.369:work
first line
line    line b
line c
last line
#@-node:ekr.20070627082044.369:work
#@+node:ekr.20070627082044.370:before sel=2.4,4.4
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.370:before sel=2.4,4.4
#@+node:ekr.20070627082044.371:after sel=2.4,2.4
first line
line    line b
line c
last line
#@-node:ekr.20070627082044.371:after sel=2.4,2.4
#@-node:ekr.20070627082044.368:@test clear-selected-text
#@+node:ekr.20070627082044.372:@test close-rectangle
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.373:work
before
aaabbb
aaabbb
aaabbb
aaabbb
after
#@nonl
#@-node:ekr.20070627082044.373:work
#@+node:ekr.20070627082044.374:before sel=2.3,5.6
before
aaa   bbb
aaa   bbb
aaa   bbb
aaa   bbb
after
#@nonl
#@-node:ekr.20070627082044.374:before sel=2.3,5.6
#@+node:ekr.20070627082044.375:after sel=2.3,5.3
before
aaabbb
aaabbb
aaabbb
aaabbb
after
#@nonl
#@-node:ekr.20070627082044.375:after sel=2.3,5.3
#@-node:ekr.20070627082044.372:@test close-rectangle
#@+node:ekr.20070627082044.376:@test count-region
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.377:work
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.377:work
#@+node:ekr.20070627082044.378:before sel=2.4,4.8
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.378:before sel=2.4,4.8
#@+node:ekr.20070627082044.379:after sel=2.4,4.8
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.379:after sel=2.4,4.8
#@-node:ekr.20070627082044.376:@test count-region
#@+node:ekr.20070627082044.380:@test delete-char
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.381:work
firstline
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.381:work
#@+node:ekr.20070627082044.382:before sel=1.5,1.5
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.382:before sel=1.5,1.5
#@+node:ekr.20070627082044.383:after sel=1.5,1.5
firstline
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.383:after sel=1.5,1.5
#@-node:ekr.20070627082044.380:@test delete-char
#@+node:ekr.20070627082044.384:@test delete-rectangle
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.385:work
before
aaabbb
aaabbb
aaabbb
aaabbb
after
#@nonl
#@-node:ekr.20070627082044.385:work
#@+node:ekr.20070627082044.386:before sel=2.3,5.6
before
aaaxxxbbb
aaaxxxbbb
aaaxxxbbb
aaaxxxbbb
after
#@nonl
#@-node:ekr.20070627082044.386:before sel=2.3,5.6
#@+node:ekr.20070627082044.387:after sel=2.3,5.3
before
aaabbb
aaabbb
aaabbb
aaabbb
after
#@nonl
#@-node:ekr.20070627082044.387:after sel=2.3,5.3
#@-node:ekr.20070627082044.384:@test delete-rectangle
#@+node:ekr.20070627082044.388:@test delete-spaces
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.389:work
first line
line 1
line a
        line b
line c
last line
#@-node:ekr.20070627082044.389:work
#@+node:ekr.20070627082044.390:before sel=3.2,3.2
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.390:before sel=3.2,3.2
#@+node:ekr.20070627082044.391:after sel=3.0,3.0
first line
line 1
line a
        line b
line c
last line
#@-node:ekr.20070627082044.391:after sel=3.0,3.0
#@-node:ekr.20070627082044.388:@test delete-spaces
#@+node:ekr.20070627082044.392:@test do-nothing
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.393:work
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.393:work
#@+node:ekr.20070627082044.394:before sel=1.0,1.0
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.394:before sel=1.0,1.0
#@+node:ekr.20070627082044.395:after sel=1.0,1.0
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.395:after sel=1.0,1.0
#@-node:ekr.20070627082044.392:@test do-nothing
#@+node:ekr.20070627082044.396:@test downcase-region
import leoTest
leoTest.runEditCommandTest(c,p)
assert g.app.unitTestDict.get('colorized')
#@+node:ekr.20070627082044.397:work
Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. stormready, a program started in 1999 in tulsa, ok, helps arm america's communities with the communication and safety skills needed to save lives and property– before and during the event. stormready helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
#@-node:ekr.20070627082044.397:work
#@+node:ekr.20070627082044.398:before sel=3.0,4.0
Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
#@-node:ekr.20070627082044.398:before sel=3.0,4.0
#@+node:ekr.20070627082044.399:after sel=3.0,4.0
Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. stormready, a program started in 1999 in tulsa, ok, helps arm america's communities with the communication and safety skills needed to save lives and property– before and during the event. stormready helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
#@-node:ekr.20070627082044.399:after sel=3.0,4.0
#@-node:ekr.20070627082044.396:@test downcase-region
#@+node:ekr.20070627082044.400:@test downcase-word
import leoTest
leoTest.runEditCommandTest(c,p)
assert g.app.unitTestDict.get('colorized')
#@nonl
#@+node:ekr.20070627082044.401:work
xyzzy line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.401:work
#@+node:ekr.20070627082044.402:before sel=1.4,1.4
XYZZY line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.402:before sel=1.4,1.4
#@+node:ekr.20070627082044.403:after sel=1.4,1.4
xyzzy line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.403:after sel=1.4,1.4
#@-node:ekr.20070627082044.400:@test downcase-word
#@+node:ekr.20070627082044.404:@test end-of-buffer
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.405:work
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.405:work
#@+node:ekr.20070627082044.406:before sel=1.3,1.3
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.406:before sel=1.3,1.3
#@+node:ekr.20070627082044.407:after sel=7.0,7.0
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.407:after sel=7.0,7.0
#@-node:ekr.20070627082044.404:@test end-of-buffer
#@+node:ekr.20070627082044.408:@test end-of-buffer-extend-selection
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.409:work
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.409:work
#@+node:ekr.20070627082044.410:before sel=1.0,1.0
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.410:before sel=1.0,1.0
#@+node:ekr.20070627082044.411:after sel=1.0,7.0
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.411:after sel=1.0,7.0
#@-node:ekr.20070627082044.408:@test end-of-buffer-extend-selection
#@+node:ekr.20070627082044.412:@test end-of-line
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.413:work
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.413:work
#@+node:ekr.20070627082044.414:before sel=1.0,1.0
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.414:before sel=1.0,1.0
#@+node:ekr.20070627082044.415:after sel=1.10,1.10
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.415:after sel=1.10,1.10
#@-node:ekr.20070627082044.412:@test end-of-line
#@+node:ekr.20070627082044.416:@test end-of-line 2
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.417:work
first line
line 1
    line a
        line b
line c
last line
#@nonl
#@-node:ekr.20070627082044.417:work
#@+node:ekr.20070627082044.418:before sel=6.0,6.0
first line
line 1
    line a
        line b
line c
last line
#@nonl
#@-node:ekr.20070627082044.418:before sel=6.0,6.0
#@+node:ekr.20070627082044.419:after sel=6.9,6.9
first line
line 1
    line a
        line b
line c
last line
#@nonl
#@-node:ekr.20070627082044.419:after sel=6.9,6.9
#@-node:ekr.20070627082044.416:@test end-of-line 2
#@+node:ekr.20070627082044.420:@test end-of-line-extend-selection
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.421:work
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.421:work
#@+node:ekr.20070627082044.422:before sel=3.0,3.0
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.422:before sel=3.0,3.0
#@+node:ekr.20070627082044.423:after sel=3.0,3.10
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.423:after sel=3.0,3.10
#@-node:ekr.20070627082044.420:@test end-of-line-extend-selection
#@+node:ekr.20070627082044.424:@test exchange-point-mark
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.425:work
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.425:work
#@+node:ekr.20070627082044.426:before sel=1.0,1.10
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.426:before sel=1.0,1.10
#@+node:ekr.20070627082044.427:after sel=1.0,1.10
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.427:after sel=1.0,1.10
#@-node:ekr.20070627082044.424:@test exchange-point-mark
#@+node:ekr.20070627082044.428:@test extend-to-line
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.429:work
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.429:work
#@+node:ekr.20070627082044.430:before sel=3.3,3.3
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.430:before sel=3.3,3.3
#@+node:ekr.20070627082044.431:after sel=3.0,3.10
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.431:after sel=3.0,3.10
#@-node:ekr.20070627082044.428:@test extend-to-line
#@+node:ekr.20070627082044.432:@test extend-to-paragraph
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.433:work
Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
#@-node:ekr.20070627082044.433:work
#@+node:ekr.20070627082044.434:before sel=9.0,9.0
Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
#@-node:ekr.20070627082044.434:before sel=9.0,9.0
#@+node:ekr.20070627082044.435:after sel=8.0,13.33
Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
#@-node:ekr.20070627082044.435:after sel=8.0,13.33
#@-node:ekr.20070627082044.432:@test extend-to-paragraph
#@+node:ekr.20070627082044.436:@test extend-to-sentence
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.437:work
Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
#@-node:ekr.20070627082044.437:work
#@+node:ekr.20070627082044.438:before sel=3.5,3.5
Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
#@-node:ekr.20070627082044.438:before sel=3.5,3.5
#@+node:ekr.20070627082044.439:after sel=1.395,3.142
Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
#@-node:ekr.20070627082044.439:after sel=1.395,3.142
#@-node:ekr.20070627082044.436:@test extend-to-sentence
#@+node:ekr.20070627082044.440:@test extend-to-word
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.441:work
first line
line 1
    line_24a a
        line b
line c
last line
#@-node:ekr.20070627082044.441:work
#@+node:ekr.20070627082044.442:before sel=3.10,3.10
first line
line 1
    line_24a a
        line b
line c
last line
#@-node:ekr.20070627082044.442:before sel=3.10,3.10
#@+node:ekr.20070627082044.443:after sel=3.4,3.12
first line
line 1
    line_24a a
        line b
line c
last line
#@-node:ekr.20070627082044.443:after sel=3.4,3.12
#@-node:ekr.20070627082044.440:@test extend-to-word
#@-node:ekr.20070627082044.279:A-E
#@+node:ekr.20070627082044.444:F-L
#@+node:ekr.20070627082044.445:@test fill-paragraph
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.446:work
Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
#@-node:ekr.20070627082044.446:work
#@+node:ekr.20070627082044.447:before sel=3.0,3.7
Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage.
StormReady, a program started in 1999 in Tulsa, OK,
helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event.
StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
#@-node:ekr.20070627082044.447:before sel=3.0,3.7
#@+node:ekr.20070627082044.448:after sel=10.0,10.0
Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
#@-node:ekr.20070627082044.448:after sel=10.0,10.0
#@-node:ekr.20070627082044.445:@test fill-paragraph
#@+node:ekr.20070627082044.449:@test forward-char
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.450:work
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.450:work
#@+node:ekr.20070627082044.451:before sel=1.2,1.2
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.451:before sel=1.2,1.2
#@+node:ekr.20070627082044.452:after sel=1.3,1.3
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.452:after sel=1.3,1.3
#@-node:ekr.20070627082044.449:@test forward-char
#@+node:ekr.20070627082044.453:@test forward-char-extend-selection
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.454:work
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.454:work
#@+node:ekr.20070627082044.455:before sel=1.1,1.1
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.455:before sel=1.1,1.1
#@+node:ekr.20070627082044.456:after sel=1.1,1.2
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.456:after sel=1.1,1.2
#@-node:ekr.20070627082044.453:@test forward-char-extend-selection
#@+node:ekr.20070627082044.457:@test forward-end-word (end of line)
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.458:work
Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
#@nonl
#@-node:ekr.20070627082044.458:work
#@+node:ekr.20070627082044.459:before sel=1.395,1.395
Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
#@nonl
#@-node:ekr.20070627082044.459:before sel=1.395,1.395
#@+node:ekr.20070627082044.460:after sel=3.4,3.4
Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
#@nonl
#@-node:ekr.20070627082044.460:after sel=3.4,3.4
#@-node:ekr.20070627082044.457:@test forward-end-word (end of line)
#@+node:ekr.20070627082044.461:@test forward-end-word (start of word)
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.462:work
Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
#@nonl
#@-node:ekr.20070627082044.462:work
#@+node:ekr.20070627082044.463:before sel=1.310,1.310
Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
#@nonl
#@-node:ekr.20070627082044.463:before sel=1.310,1.310
#@+node:ekr.20070627082044.464:after sel=1.317,1.317
Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
#@nonl
#@-node:ekr.20070627082044.464:after sel=1.317,1.317
#@-node:ekr.20070627082044.461:@test forward-end-word (start of word)
#@+node:ekr.20070627082044.465:@test forward-end-word-extend-selection
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.466:work
Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
#@nonl
#@-node:ekr.20070627082044.466:work
#@+node:ekr.20070627082044.467:before sel=3.20,3.20
Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
#@nonl
#@-node:ekr.20070627082044.467:before sel=3.20,3.20
#@+node:ekr.20070627082044.468:after sel=3.20,3.30
Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
#@nonl
#@-node:ekr.20070627082044.468:after sel=3.20,3.30
#@-node:ekr.20070627082044.465:@test forward-end-word-extend-selection
#@+node:ekr.20070627082044.469:@test forward-paragraph
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.470:work
Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
#@nonl
#@-node:ekr.20070627082044.470:work
#@+node:ekr.20070627082044.471:before sel=9.0,9.0
Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
#@nonl
#@-node:ekr.20070627082044.471:before sel=9.0,9.0
#@+node:ekr.20070627082044.472:after sel=15.0,15.0
Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
#@nonl
#@-node:ekr.20070627082044.472:after sel=15.0,15.0
#@-node:ekr.20070627082044.469:@test forward-paragraph
#@+node:ekr.20070627082044.473:@test forward-paragraph-extend-selection
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.474:work
Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
#@nonl
#@-node:ekr.20070627082044.474:work
#@+node:ekr.20070627082044.475:before sel=10.0,10.0
Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
#@nonl
#@-node:ekr.20070627082044.475:before sel=10.0,10.0
#@+node:ekr.20070627082044.476:after sel=10.0,15.0
Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
#@nonl
#@-node:ekr.20070627082044.476:after sel=10.0,15.0
#@-node:ekr.20070627082044.473:@test forward-paragraph-extend-selection
#@+node:ekr.20070627082044.477:@test forward-sentence
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.478:work
Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
#@nonl
#@-node:ekr.20070627082044.478:work
#@+node:ekr.20070627082044.479:before sel=3.17,3.17
Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
#@nonl
#@-node:ekr.20070627082044.479:before sel=3.17,3.17
#@+node:ekr.20070627082044.480:after sel=3.142,3.142
Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
#@nonl
#@-node:ekr.20070627082044.480:after sel=3.142,3.142
#@-node:ekr.20070627082044.477:@test forward-sentence
#@+node:ekr.20070627082044.481:@test forward-sentence-extend-selection
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.482:work
Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
#@nonl
#@-node:ekr.20070627082044.482:work
#@+node:ekr.20070627082044.483:before sel=1.264,1.264
Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
#@nonl
#@-node:ekr.20070627082044.483:before sel=1.264,1.264
#@+node:ekr.20070627082044.484:after sel=1.264,1.395
Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
#@nonl
#@-node:ekr.20070627082044.484:after sel=1.264,1.395
#@-node:ekr.20070627082044.481:@test forward-sentence-extend-selection
#@+node:ekr.20070627082044.485:@test forward-word
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.486:work
Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
#@nonl
#@-node:ekr.20070627082044.486:work
#@+node:ekr.20070627082044.487:before sel=1.261,1.261
Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
#@nonl
#@-node:ekr.20070627082044.487:before sel=1.261,1.261
#@+node:ekr.20070627082044.488:after sel=1.273,1.273
Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
#@nonl
#@-node:ekr.20070627082044.488:after sel=1.273,1.273
#@-node:ekr.20070627082044.485:@test forward-word
#@+node:ekr.20070627082044.489:@test forward-word-extend-selection
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.490:work
Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
#@nonl
#@-node:ekr.20070627082044.490:work
#@+node:ekr.20070627082044.491:before sel=1.395,1.395
Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
#@nonl
#@-node:ekr.20070627082044.491:before sel=1.395,1.395
#@+node:ekr.20070627082044.492:after sel=1.395,3.0
Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
#@nonl
#@-node:ekr.20070627082044.492:after sel=1.395,3.0
#@-node:ekr.20070627082044.489:@test forward-word-extend-selection
#@+node:ekr.20070627082044.493:@test goNext/PrevVisitedNode
p = c.currentPosition().copy()
c.selectPosition(p.threadBack())
p1 = c.currentPosition()
# print p1
c.goPrevVisitedNode()
p2 = c.currentPosition()
# print p2
c.goNextVisitedNode()
p3 = c.currentPosition()
# print p3
# assert p == p3
#@-node:ekr.20070627082044.493:@test goNext/PrevVisitedNode
#@+node:ekr.20070627082044.494:@test indent-relative
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.495:work
first line
line 1
    line a
        line b
        line c
last line
#@-node:ekr.20070627082044.495:work
#@+node:ekr.20070627082044.496:before sel=5.0,5.0
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.496:before sel=5.0,5.0
#@+node:ekr.20070627082044.497:after sel=5.8,5.8
first line
line 1
    line a
        line b
        line c
last line
#@-node:ekr.20070627082044.497:after sel=5.8,5.8
#@-node:ekr.20070627082044.494:@test indent-relative
#@+node:ekr.20070627082044.498:@test indent-rigidly
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.499:work
first line
	line 1
	    line a
	        line b
	line c
last line
#@-node:ekr.20070627082044.499:work
#@+node:ekr.20070627082044.500:before sel=2.0,5.0
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.500:before sel=2.0,5.0
#@+node:ekr.20070627082044.501:after sel=2.0,5.1
first line
	line 1
	    line a
	        line b
	line c
last line
#@-node:ekr.20070627082044.501:after sel=2.0,5.1
#@-node:ekr.20070627082044.498:@test indent-rigidly
#@+node:ekr.20070627082044.502:@test insert-newline
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.503:work
first li
ne
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.503:work
#@+node:ekr.20070627082044.504:before sel=1.8,1.8
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.504:before sel=1.8,1.8
#@+node:ekr.20070627082044.505:after sel=2.0,2.0
first li
ne
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.505:after sel=2.0,2.0
#@-node:ekr.20070627082044.502:@test insert-newline
#@+node:ekr.20070627082044.506:@test insert-parentheses
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.507:work
first() line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.507:work
#@+node:ekr.20070627082044.508:before sel=1.5,1.5
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.508:before sel=1.5,1.5
#@+node:ekr.20070627082044.509:after sel=1.6,1.6
first() line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.509:after sel=1.6,1.6
#@-node:ekr.20070627082044.506:@test insert-parentheses
#@+node:ekr.20070627082044.510:@test kill-line end-1
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.511:work
line 1
line 2
#@-node:ekr.20070627082044.511:work
#@+node:ekr.20070627082044.512:before sel=3.0,3.0
line 1
line 2
line 3
#@nonl
#@-node:ekr.20070627082044.512:before sel=3.0,3.0
#@+node:ekr.20070627082044.513:after sel=3.0,3.0
line 1
line 2
#@-node:ekr.20070627082044.513:after sel=3.0,3.0
#@-node:ekr.20070627082044.510:@test kill-line end-1
#@+node:ekr.20070627082044.514:@test kill-line end-2
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.515:work
line 1
line 2
#@nonl
#@-node:ekr.20070627082044.515:work
#@+node:ekr.20070627082044.516:before sel=3.0,3.0
line 1
line 2
#@-node:ekr.20070627082044.516:before sel=3.0,3.0
#@+node:ekr.20070627082044.517:after sel=2.6,2.6
line 1
line 2
#@nonl
#@-node:ekr.20070627082044.517:after sel=2.6,2.6
#@-node:ekr.20070627082044.514:@test kill-line end-2
#@+node:ekr.20070627082044.518:@test kill-line middle-1
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.519:work
line 1
line 2

line 4
#@nonl
#@-node:ekr.20070627082044.519:work
#@+node:ekr.20070627082044.520:before sel=3.0,3.0
line 1
line 2
line 3
line 4
#@nonl
#@-node:ekr.20070627082044.520:before sel=3.0,3.0
#@+node:ekr.20070627082044.521:after sel=3.0,3.0
line 1
line 2

line 4
#@nonl
#@-node:ekr.20070627082044.521:after sel=3.0,3.0
#@-node:ekr.20070627082044.518:@test kill-line middle-1
#@+node:ekr.20070627082044.522:@test kill-line middle-2
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.523:work
line 1
line 2
line 4
#@nonl
#@-node:ekr.20070627082044.523:work
#@+node:ekr.20070627082044.524:before sel=3.0,3.0
line 1
line 2

line 4
#@nonl
#@-node:ekr.20070627082044.524:before sel=3.0,3.0
#@+node:ekr.20070627082044.525:after sel=3.0,3.0
line 1
line 2
line 4
#@nonl
#@-node:ekr.20070627082044.525:after sel=3.0,3.0
#@-node:ekr.20070627082044.522:@test kill-line middle-2
#@+node:ekr.20070627082044.526:@test kill-paragraph
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.527:work
Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.



StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
#@-node:ekr.20070627082044.527:work
#@+node:ekr.20070627082044.528:before sel=9.0,9.0
Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
#@-node:ekr.20070627082044.528:before sel=9.0,9.0
#@+node:ekr.20070627082044.529:after sel=8.0,8.0
Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.



StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
#@-node:ekr.20070627082044.529:after sel=8.0,8.0
#@-node:ekr.20070627082044.526:@test kill-paragraph
#@+node:ekr.20070627082044.530:@test kill-rectangle
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.531:work
before
aaabbb
aaabbb
aaabbb
aaabbb
after
#@nonl
#@-node:ekr.20070627082044.531:work
#@+node:ekr.20070627082044.532:before sel=2.3,5.6
before
aaaxxxbbb
aaaxxxbbb
aaaxxxbbb
aaaxxxbbb
after
#@nonl
#@-node:ekr.20070627082044.532:before sel=2.3,5.6
#@+node:ekr.20070627082044.533:after sel=5.3,5.3
before
aaabbb
aaabbb
aaabbb
aaabbb
after
#@nonl
#@-node:ekr.20070627082044.533:after sel=5.3,5.3
#@-node:ekr.20070627082044.530:@test kill-rectangle
#@+node:ekr.20070627082044.534:@test kill-sentence
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.535:work
This is the first sentence.  And
this is the last sentence.
#@-node:ekr.20070627082044.535:work
#@+node:ekr.20070627082044.536:before sel=2.2,2.2
This is the first sentence.  This
is the second sentence.  And
this is the last sentence.
#@-node:ekr.20070627082044.536:before sel=2.2,2.2
#@+node:ekr.20070627082044.537:after sel=1.27,1.27
This is the first sentence.  And
this is the last sentence.
#@-node:ekr.20070627082044.537:after sel=1.27,1.27
#@-node:ekr.20070627082044.534:@test kill-sentence
#@-node:ekr.20070627082044.444:F-L
#@+node:ekr.20070627082044.538:M-Z
#@+node:ekr.20070627082044.539:@@test zap-to-chararacter
#@+node:ekr.20070627082044.540:work
first line
line 1
    line a
        line b
line c
last line
#@nonl
#@-node:ekr.20070627082044.540:work
#@-node:ekr.20070627082044.539:@@test zap-to-chararacter
#@+node:ekr.20070627082044.541:@test move-lines-down
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.542:work
first line
line 1
line c
    line a
        line b
last line
#@-node:ekr.20070627082044.542:work
#@+node:ekr.20070627082044.543:before sel=3.3,4.3
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.543:before sel=3.3,4.3
#@+node:ekr.20070627082044.544:after sel=4.0,5.0
first line
line 1
line c
    line a
        line b
last line
#@-node:ekr.20070627082044.544:after sel=4.0,5.0
#@-node:ekr.20070627082044.541:@test move-lines-down
#@+node:ekr.20070627082044.545:@test move-lines-up
import leoTest
leoTest.runEditCommandTest(c,p)
#@+node:ekr.20070627082044.546:work
line 1
first line
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.546:work
#@+node:ekr.20070627082044.547:before sel=2.2,2.2
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.547:before sel=2.2,2.2
#@+node:ekr.20070627082044.548:after sel=1.0,1.0
line 1
first line
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.548:after sel=1.0,1.0
#@-node:ekr.20070627082044.545:@test move-lines-up
#@+node:ekr.20070627082044.549:@test move-past-close
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.550:work
first (line)
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.550:work
#@+node:ekr.20070627082044.551:before sel=1.10,1.10
first (line)
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.551:before sel=1.10,1.10
#@+node:ekr.20070627082044.552:after sel=1.12,1.12
first (line)
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.552:after sel=1.12,1.12
#@-node:ekr.20070627082044.549:@test move-past-close
#@+node:ekr.20070627082044.553:@test move-past-close-extend-selection
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.554:work
first line
line 1
    (line )a
        line b
line c
last line
#@-node:ekr.20070627082044.554:work
#@+node:ekr.20070627082044.555:before sel=3.7,3.7
first line
line 1
    (line )a
        line b
line c
last line
#@-node:ekr.20070627082044.555:before sel=3.7,3.7
#@+node:ekr.20070627082044.556:after sel=3.7,3.11
first line
line 1
    (line )a
        line b
line c
last line
#@-node:ekr.20070627082044.556:after sel=3.7,3.11
#@-node:ekr.20070627082044.553:@test move-past-close-extend-selection
#@+node:ekr.20070627082044.557:@test next-line
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.558:work
a

b
#@nonl
#@-node:ekr.20070627082044.558:work
#@+node:ekr.20070627082044.559:before sel=1.1,1.1
a

b
#@nonl
#@-node:ekr.20070627082044.559:before sel=1.1,1.1
#@+node:ekr.20070627082044.560:after sel=2.0,2.0
a

b
#@nonl
#@-node:ekr.20070627082044.560:after sel=2.0,2.0
#@-node:ekr.20070627082044.557:@test next-line
#@+node:ekr.20070627082044.565:@test open-rectangle
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.566:work
before
aaa   xxxbbb
aaa   xxxbbb
aaa   xxxbbb
aaa   xxxbbb
after
#@nonl
#@-node:ekr.20070627082044.566:work
#@+node:ekr.20070627082044.567:before sel=2.3,5.6
before
aaaxxxbbb
aaaxxxbbb
aaaxxxbbb
aaaxxxbbb
after
#@nonl
#@-node:ekr.20070627082044.567:before sel=2.3,5.6
#@+node:ekr.20070627082044.568:after sel=2.3,5.6
before
aaa   xxxbbb
aaa   xxxbbb
aaa   xxxbbb
aaa   xxxbbb
after
#@nonl
#@-node:ekr.20070627082044.568:after sel=2.3,5.6
#@-node:ekr.20070627082044.565:@test open-rectangle
#@+node:ekr.20070627082044.569:@test previous-line
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.570:work
a

b
#@nonl
#@-node:ekr.20070627082044.570:work
#@+node:ekr.20070627082044.571:before sel=3.0,3.0
a

b
#@nonl
#@-node:ekr.20070627082044.571:before sel=3.0,3.0
#@+node:ekr.20070627082044.572:after sel=2.0,2.0
a

b
#@nonl
#@-node:ekr.20070627082044.572:after sel=2.0,2.0
#@-node:ekr.20070627082044.569:@test previous-line
#@+node:ekr.20070627082044.573:@test remove-blank-lines
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.574:work
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.574:work
#@+node:ekr.20070627082044.575:before sel=1.0,9.0
first line

line 1
    line a
        line b

line c
last line
#@-node:ekr.20070627082044.575:before sel=1.0,9.0
#@+node:ekr.20070627082044.576:after sel=1.0,6.9
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.576:after sel=1.0,6.9
#@-node:ekr.20070627082044.573:@test remove-blank-lines
#@+node:ekr.20070627082044.577:@test remove-space-from-lines
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.578:work
first line

line 1
   line a
       line b

line c
last line
#@-node:ekr.20070627082044.578:work
#@+node:ekr.20070627082044.579:before sel=1.0,9.0
first line

line 1
    line a
        line b

line c
last line
#@-node:ekr.20070627082044.579:before sel=1.0,9.0
#@+node:ekr.20070627082044.580:after sel=1.0,9.0
first line

line 1
   line a
       line b

line c
last line
#@-node:ekr.20070627082044.580:after sel=1.0,9.0
#@-node:ekr.20070627082044.577:@test remove-space-from-lines
#@+node:ekr.20070627082044.581:@test remove-tab-from-lines
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.582:work
first line
line 1
line a
    line b
line c
last line
#@-node:ekr.20070627082044.582:work
#@+node:ekr.20070627082044.583:before sel=1.0,7.0
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.583:before sel=1.0,7.0
#@+node:ekr.20070627082044.584:after sel=1.0,7.0
first line
line 1
line a
    line b
line c
last line
#@-node:ekr.20070627082044.584:after sel=1.0,7.0
#@-node:ekr.20070627082044.581:@test remove-tab-from-lines
#@+node:ekr.20070627082044.585:@test reverse-region
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.586:work

last line
line c
        line b
    line a
line 1
first line
#@-node:ekr.20070627082044.586:work
#@+node:ekr.20070627082044.587:before sel=1.0,7.0
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.587:before sel=1.0,7.0
#@+node:ekr.20070627082044.588:after sel=7.10,7.10

last line
line c
        line b
    line a
line 1
first line
#@-node:ekr.20070627082044.588:after sel=7.10,7.10
#@-node:ekr.20070627082044.585:@test reverse-region
#@+node:ekr.20070627082044.589:@test sort-columns
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.590:work
        line b
    line a
first line
last line
line 1
line c
#@-node:ekr.20070627082044.590:work
#@+node:ekr.20070627082044.591:before sel=1.0,6.2
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.591:before sel=1.0,6.2
#@+node:ekr.20070627082044.592:after sel=1.0,7.0
        line b
    line a
first line
last line
line 1
line c
#@-node:ekr.20070627082044.592:after sel=1.0,7.0
#@-node:ekr.20070627082044.589:@test sort-columns
#@+node:ekr.20070627082044.593:@test sort-lines
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.594:work
first line
        line b
    line a
line 1
line c
last line
#@-node:ekr.20070627082044.594:work
#@+node:ekr.20070627082044.595:before sel=2.0,5.6
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.595:before sel=2.0,5.6
#@+node:ekr.20070627082044.596:after sel=2.0,5.6
first line
        line b
    line a
line 1
line c
last line
#@-node:ekr.20070627082044.596:after sel=2.0,5.6
#@-node:ekr.20070627082044.593:@test sort-lines
#@+node:ekr.20070627082044.597:@test split-line
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.598:work
first
 line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.598:work
#@+node:ekr.20070627082044.599:before sel=1.5,1.5
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.599:before sel=1.5,1.5
#@+node:ekr.20070627082044.600:after sel=2.0,2.0
first
 line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.600:after sel=2.0,2.0
#@-node:ekr.20070627082044.597:@test split-line
#@+node:ekr.20070627082044.601:@test string-rectangle
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.602:work
before
aaas...sbbb
aaas...sbbb
aaas...sbbb
aaas...sbbb
after
#@nonl
#@-node:ekr.20070627082044.602:work
#@+node:ekr.20070627082044.603:before sel=2.3,5.6
before
aaaxxxbbb
aaaxxxbbb
aaaxxxbbb
aaaxxxbbb
after
#@nonl
#@-node:ekr.20070627082044.603:before sel=2.3,5.6
#@+node:ekr.20070627082044.604:after sel=2.3,5.8
before
aaas...sbbb
aaas...sbbb
aaas...sbbb
aaas...sbbb
after
#@nonl
#@-node:ekr.20070627082044.604:after sel=2.3,5.8
#@-node:ekr.20070627082044.601:@test string-rectangle
#@+node:ekr.20070627082044.605:@test tabify
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.606:work
first line
line 1
	line a
		line b
line c
last line
#@-node:ekr.20070627082044.606:work
#@+node:ekr.20070627082044.607:before sel=1.0,7.0
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.607:before sel=1.0,7.0
#@+node:ekr.20070627082044.608:after sel=7.0,7.0
first line
line 1
	line a
		line b
line c
last line
#@-node:ekr.20070627082044.608:after sel=7.0,7.0
#@-node:ekr.20070627082044.605:@test tabify
#@+node:ekr.20070627082044.609:@test transpose-chars
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.610:work
frist line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.610:work
#@+node:ekr.20070627082044.611:before sel=1.2,1.2
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.611:before sel=1.2,1.2
#@+node:ekr.20070627082044.612:after sel=1.2,1.2
frist line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.612:after sel=1.2,1.2
#@-node:ekr.20070627082044.609:@test transpose-chars
#@+node:ekr.20070627082044.613:@test transpose-lines
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.614:work
line 1
first line
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.614:work
#@+node:ekr.20070627082044.615:before sel=2.2,2.2
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.615:before sel=2.2,2.2
#@+node:ekr.20070627082044.616:after sel=2.10,2.10
line 1
first line
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.616:after sel=2.10,2.10
#@-node:ekr.20070627082044.613:@test transpose-lines
#@+node:ekr.20070627082044.617:@test untabify
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.618:work
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.618:work
#@+node:ekr.20070627082044.619:before sel=1.0,7.0
first line
line 1
	line a
		line b
line c
last line
#@-node:ekr.20070627082044.619:before sel=1.0,7.0
#@+node:ekr.20070627082044.620:after sel=7.0,7.0
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.620:after sel=7.0,7.0
#@-node:ekr.20070627082044.617:@test untabify
#@+node:ekr.20070627082044.621:@test upcase-region
import leoTest
leoTest.runEditCommandTest(c,p)
assert g.app.unitTestDict.get('colorized')
#@nonl
#@+node:ekr.20070627082044.622:work
Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

SOME 90% OF ALL PRESIDENTIALLY DECLARED DISASTERS ARE WEATHER RELATED, LEADING TO AROUND 500 DEATHS PER YEAR AND NEARLY $14 BILLION IN DAMAGE. STORMREADY, A PROGRAM STARTED IN 1999 IN TULSA, OK, HELPS ARM AMERICA'S COMMUNITIES WITH THE COMMUNICATION AND SAFETY SKILLS NEEDED TO SAVE LIVES AND PROPERTY– BEFORE AND DURING THE EVENT. STORMREADY HELPS COMMUNITY LEADERS AND EMERGENCY MANAGERS STRENGTHEN LOCAL SAFETY PROGRAMS.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
#@-node:ekr.20070627082044.622:work
#@+node:ekr.20070627082044.623:before sel=3.0,4.0
Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
#@-node:ekr.20070627082044.623:before sel=3.0,4.0
#@+node:ekr.20070627082044.624:after sel=3.0,4.0
Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

SOME 90% OF ALL PRESIDENTIALLY DECLARED DISASTERS ARE WEATHER RELATED, LEADING TO AROUND 500 DEATHS PER YEAR AND NEARLY $14 BILLION IN DAMAGE. STORMREADY, A PROGRAM STARTED IN 1999 IN TULSA, OK, HELPS ARM AMERICA'S COMMUNITIES WITH THE COMMUNICATION AND SAFETY SKILLS NEEDED TO SAVE LIVES AND PROPERTY– BEFORE AND DURING THE EVENT. STORMREADY HELPS COMMUNITY LEADERS AND EMERGENCY MANAGERS STRENGTHEN LOCAL SAFETY PROGRAMS.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
#@-node:ekr.20070627082044.624:after sel=3.0,4.0
#@-node:ekr.20070627082044.621:@test upcase-region
#@+node:ekr.20070627082044.625:@test upcase-word
import leoTest
leoTest.runEditCommandTest(c,p)
assert g.app.unitTestDict.get('colorized')
#@nonl
#@+node:ekr.20070627082044.626:work
first line
line 1
    LINE a
        line b
line c
last line
#@-node:ekr.20070627082044.626:work
#@+node:ekr.20070627082044.627:before sel=3.7,3.7
first line
line 1
    line a
        line b
line c
last line
#@-node:ekr.20070627082044.627:before sel=3.7,3.7
#@+node:ekr.20070627082044.628:after sel=3.7,3.7
first line
line 1
    LINE a
        line b
line c
last line
#@-node:ekr.20070627082044.628:after sel=3.7,3.7
#@-node:ekr.20070627082044.625:@test upcase-word
#@+node:ekr.20070627082044.629:@test yank-rectangle
import leoTest
leoTest.runEditCommandTest(c,p)
#@nonl
#@+node:ekr.20070627082044.630:work
before
aaaY1Ybbb
aaaY2Ybbb
aaaY3Ybbb
aaaY4Ybbb
after
#@nonl
#@-node:ekr.20070627082044.630:work
#@+node:ekr.20070627082044.631:before sel=2.3,5.6
before
aaaxxxbbb
aaaxxxbbb
aaaxxxbbb
aaaxxxbbb
after
#@nonl
#@-node:ekr.20070627082044.631:before sel=2.3,5.6
#@+node:ekr.20070627082044.632:after sel=2.3,5.6
before
aaaY1Ybbb
aaaY2Ybbb
aaaY3Ybbb
aaaY4Ybbb
after
#@nonl
#@-node:ekr.20070627082044.632:after sel=2.3,5.6
#@-node:ekr.20070627082044.629:@test yank-rectangle
#@-node:ekr.20070627082044.538:M-Z
#@-node:ekr.20070627082044.266:@unit-tests Edit commands
#@+node:ekr.20070627082044.639:@unit-tests Import/Export tests...
#@+node:ekr.20070627082044.640:@suite Import tests
# Create unit tests in g.app.scriptDict["suite"]

import unittest
import leoTest

@others

suite = leoTest.makeImportExportSuite(c,"importTests",doImport=True)

g.app.scriptDict['suite'] = suite
#@nonl
#@-node:ekr.20070627082044.640:@suite Import tests
#@+node:ekr.20070627082044.641:@suite Export tests
# Create unit tests in g.app.scriptDict["suite"]

import unittest
import leoTest

@others

suite = leoTest.makeImportExportSuite(c,"exportTests",doImport=False)

g.app.scriptDict['suite'] = suite
#@nonl
#@-node:ekr.20070627082044.641:@suite Export tests
#@+node:ekr.20070627082044.642:importTests
@language plain
#@nonl
#@+node:ekr.20070627082044.643:tempNode
#@-node:ekr.20070627082044.643:tempNode
#@+node:ekr.20070627082044.644:importAtRoot
#@+node:ekr.20070627082044.645:dialog
openFileDialog
test\\unittest\\perfectImport\\formatter.py
#@nonl
#@-node:ekr.20070627082044.645:dialog
#@-node:ekr.20070627082044.644:importAtRoot
#@+node:ekr.20070627082044.646:importDerivedFile
#@+node:ekr.20070627082044.647:dialog
openFileDialog
src\\leo.py
#@nonl
#@-node:ekr.20070627082044.647:dialog
#@-node:ekr.20070627082044.646:importDerivedFile
#@+node:ekr.20070627082044.648:importNowebFiles
#@+node:ekr.20070627082044.649:dialog
openFileDialog
test\\unittest\\input\\noweave.nw.txt
#@nonl
#@-node:ekr.20070627082044.649:dialog
#@-node:ekr.20070627082044.648:importNowebFiles
#@+node:ekr.20070627082044.650:importFlattenedOutline
#@+node:ekr.20070627082044.651:dialog
openFileDialog
test\\unittest\\input\\flat.txt
#@nonl
#@-node:ekr.20070627082044.651:dialog
#@-node:ekr.20070627082044.650:importFlattenedOutline
#@+node:ekr.20070627082044.652:importCWEBFiles
#@+node:ekr.20070627082044.653:dialog
openFileDialog
test\\unittest\\input\\cweave.w
#@nonl
#@-node:ekr.20070627082044.653:dialog
#@-node:ekr.20070627082044.652:importCWEBFiles
#@+node:ekr.20070627082044.654:removeSentinels
#@+node:ekr.20070627082044.655:dialog
openFileDialog
test\\unittest\\input\\testLeoAtFile.py
#@nonl
#@-node:ekr.20070627082044.655:dialog
#@-node:ekr.20070627082044.654:removeSentinels
#@+node:ekr.20070627082044.656:importAtFile
#@+node:ekr.20070627082044.657:dialog
openFileDialog
test\\unittest\\perfectImport\\formatter.py
#@nonl
#@-node:ekr.20070627082044.657:dialog
#@-node:ekr.20070627082044.656:importAtFile
#@-node:ekr.20070627082044.642:importTests
#@+node:ekr.20070627082044.658:exportTests
@language plain
#@nonl
#@+node:ekr.20070627082044.659:tempNode
#@-node:ekr.20070627082044.659:tempNode
#@+node:ekr.20070627082044.660:exportHeadlines
#@+node:ekr.20070627082044.661:dialog
saveFileDialog
test\\unittest\\output\\exportHeadlines.txt
#@nonl
#@-node:ekr.20070627082044.661:dialog
#@-node:ekr.20070627082044.660:exportHeadlines
#@+node:ekr.20070627082044.662:flattenOutline
#@+node:ekr.20070627082044.663:dialog
saveFileDialog
test\\unittest\\output\\flattenOutline.txt
#@nonl
#@-node:ekr.20070627082044.663:dialog
#@-node:ekr.20070627082044.662:flattenOutline
#@+node:ekr.20070627082044.664:weave
#@+node:ekr.20070627082044.665:dialog
saveFileDialog
test\\unittest\\output\\weave.txt
#@nonl
#@-node:ekr.20070627082044.665:dialog
#@-node:ekr.20070627082044.664:weave
#@+node:ekr.20070627082044.666:outlineToNoweb
#@+node:ekr.20070627082044.667:dialog
saveFileDialog
test\\unittest\\output\\outlineToNoweb.txt
#@nonl
#@-node:ekr.20070627082044.667:dialog
#@-node:ekr.20070627082044.666:outlineToNoweb
#@+node:ekr.20070627082044.668:outlineToCWEB
#@+node:ekr.20070627082044.669:dialog
saveFileDialog
test\\unittest\\output\\outlineToCweb.txt
#@nonl
#@-node:ekr.20070627082044.669:dialog
#@-node:ekr.20070627082044.668:outlineToCWEB
#@-node:ekr.20070627082044.658:exportTests
#@-node:ekr.20070627082044.639:@unit-tests Import/Export tests...
#@+node:ekr.20070627082044.144:@unit-tests typing...
# These are mysteriously fragile tests, so they go first
#@+node:ekr.20070627082044.145:@test make sure the window is visible (Make this the first test)
c.frame.bringToFront()
c.frame.body.bodyCtrl.update()
#@nonl
#@-node:ekr.20070627082044.145:@test make sure the window is visible (Make this the first test)
#@+node:ekr.20070627082044.147:Test headline abc
#@-node:ekr.20070627082044.147:Test headline abc
#@+node:ekr.20070627082044.148:Typing and undo tests
#@+node:ekr.20070627082044.149:@test return ends editing of headline
import leoTest ; u = leoTest.testUtils(c)

h = '@test return ends editing of headline'
p = u.findNodeAnywhere(h)
assert p,'node not found: %s' % h
c.selectPosition(p)
c.redraw_now() # To make node visible
c.frame.tree.editLabel(p)
w = c.edit_widget(p)
guiName = g.app.gui.guiName()
wName = g.app.gui.widget_name(w)
assert wName.startswith('head'),'w.name:%s' % wName
# if guiName == 'tkinter':
    # c.frame.top.update_idletasks()
    # w2 = c.get_focus()
    # assert w == w2, 'oops1 %s != %s' % (w,w2)
# elif guiName == 'wxPython':
    # assert repr(w).startswith('headlineWidget')
w.event_generate('<Return>')
assert w != c.get_focus(),'oops2: focus in headline'
#@nonl
#@-node:ekr.20070627082044.149:@test return ends editing of headline
#@+node:ekr.20070627082044.150:@test editLabel selects entire headline
import leoTest ; u = leoTest.testUtils(c)

k = c.keyHandler
frame = c.frame ; tree = frame.tree ; canvas = tree.canvas
h = '@test editLabel selects entire headline'
p = u.findNodeAnywhere(h)
assert p,'node not found: %s' % h
c.selectPosition(p)
c.redraw_now() # To make node visible
tree.editLabel(p)
w = c.edit_widget(p)
assert w
s = w.getAllText()
selectAll = c.config.getBool('select_all_text_when_editing_headlines')
# g.trace('editLabel selects entire headline',selectAll)
i,j = w.getSelectionRange()
if selectAll:
    assert i == 0 and j == len(s),'oops1: i: %d, j: %d' % (i,j)
else:
    assert i == len(s) and j == len(s),'oops2: i: %d, j: %d' % (i,j)
#@-node:ekr.20070627082044.150:@test editLabel selects entire headline
#@+node:ekr.20070627082044.151:@test paste at end of headline
import leoTest ; u = leoTest.testUtils(c)
k = c.keyHandler
frame = c.frame ; tree = frame.tree ; canvas = tree.canvas
h = 'Test headline abc'
p = u.findNodeAnywhere(h)
assert p,'node not found: %s' % h
c.selectPosition(p)
c.redraw_now() # To make node visible
tree.editLabel(p)
w = c.edit_widget(p)
try:
    assert w
    paste = 'ABC'
    g.app.gui.replaceClipboardWith(paste)
    w.setSelectionRange('end','end')
    k.manufactureKeyPressForCommandName(w,'paste-text')
    w.event_generate('<Return>')
    assert p.headString() == h + paste,'Expected: %s, got %s' % (h + paste,p.headString())
finally:
    if 1:
        p.initHeadString(h)
        c.frame.tree.setHeadline(p,h)
        c.redraw_now()
#@nonl
#@-node:ekr.20070627082044.151:@test paste at end of headline
#@+node:ekr.20070627082044.152:@test typing and undo in headline - at end
import leoTest ; u = leoTest.testUtils(c)
k = c.keyHandler
frame = c.frame ; tree = frame.tree ; canvas = tree.canvas
h = 'Test headline abc'
p = u.findNodeAnywhere(h)
assert p,'node not found: %s' % h
c.selectPosition(p)
c.redraw_now() # To make node visible
c.editPosition(p)
w = c.edit_widget(p)
# print 'guiName',g.app.gui.guiName()
try:
    assert w, 'oops1'
    wName = g.app.gui.widget_name(w)
    assert wName.startswith('head'),'w.name:%s' % wName
    w.setSelectionRange('end','end')
    w.event_generate('X')
    w.event_generate('Y')
    w.event_generate('Z')
    w.event_generate('<Return>')
    assert p.headString() == h + 'XYZ','oops2: got: %s' % p.headString()
    if g.app.gui.guiName() != 'nullGui':
        assert c.undoer.undoMenuLabel == 'Undo Typing','oops3'
    k.manufactureKeyPressForCommandName(w,'undo')
    if g.app.gui.guiName() != 'nullGui':
        assert c.undoer.redoMenuLabel == 'Redo Typing','oops4'
    assert p.headString() == h,'oops5 got: %s' % p.headString()
finally:
    if 1:
        p.initHeadString(h)
        c.frame.tree.setHeadline(p,h)
        c.redraw_now()
#@nonl
#@-node:ekr.20070627082044.152:@test typing and undo in headline - at end
#@+node:ekr.20070627082044.153:@test paste and undo in headline - at end
import leoTest ; u = leoTest.testUtils(c)
k = c.keyHandler
frame = c.frame ; tree = frame.tree ; canvas = tree.canvas
h = 'Test headline abc'
p = u.findNodeAnywhere(h)
assert p,'node not found: %s' % h
c.selectPosition(p)
c.redraw_now() # To make node visible
tree.editLabel(p)
w = c.edit_widget(p)
try:
    assert w,'oops1'
    w.setSelectionRange('end','end')
    paste = 'ABC'
    g.app.gui.replaceClipboardWith(paste)
    w.setSelectionRange('end','end')
    k.manufactureKeyPressForCommandName(w,'paste-text')
    w.event_generate('<Return>')
    assert p.headString() == h + paste,'oops2 got: %s' % p.headString()
    k.manufactureKeyPressForCommandName(w,'undo')
    assert p.headString() == h,'oops3 got: %s' % p.headString()
finally:
    if 1:
        p.initHeadString(h)
        c.frame.tree.setHeadline(p,h)
        c.redraw_now()
#@nonl
#@-node:ekr.20070627082044.153:@test paste and undo in headline - at end
#@+node:ekr.20070627082044.154:@test paste and undo in headline - with selection
import leoTest ; u = leoTest.testUtils(c)
k = c.keyHandler
frame = c.frame ; tree = frame.tree ; canvas = tree.canvas
h = 'Test headline abc'
p = u.findNodeAnywhere(h)
assert p,'node not found: %s' % h
c.selectPosition(p)
c.redraw_now() # To make node visible
tree.editLabel(p)
w = c.edit_widget(p)
try:
    assert w, 'Null w'
    paste = 'ABC'
    g.app.gui.replaceClipboardWith(paste)
    w.setSelectionRange('1.1','1.2')
    k.manufactureKeyPressForCommandName(w,'paste-text')
    w.event_generate('<Return>')
    assert p.headString() == h[0] + paste + h[2:]
    k.manufactureKeyPressForCommandName(w,'undo')
    assert p.headString() == h, 'head mismatch'
finally:
    if 1:
        p.initHeadString(h)
        c.frame.tree.setHeadline(p,h)
        c.redraw_now()
#@nonl
#@-node:ekr.20070627082044.154:@test paste and undo in headline - with selection
#@+node:ekr.20070627082044.155:@test selecting new node retains typing in headline
import leoTest ; u = leoTest.testUtils(c)
k = c.keyHandler
frame = c.frame ; tree = frame.tree ; canvas = tree.canvas
h = 'Test headline abc'
p = u.findNodeAnywhere(h)
assert p,'node not found: %s' % h
c.selectPosition(p)
c.redraw_now() # To make node visible
tree.editLabel(p)
w = c.edit_widget(p)
try:
    assert w
    w.setSelectionRange('end','end')
    w.event_generate('X')
    w.event_generate('Y')
    w.event_generate('Z')
    w.event_generate('<Return>')
    assert p.headString() == h + 'XYZ'
    k.manufactureKeyPressForCommandName(w,'undo')
    assert p.headString() == h
finally:
    if 1:
        p.initHeadString(h)
        c.frame.tree.setHeadline(p,h)
        c.redraw_now()
#@nonl
#@-node:ekr.20070627082044.155:@test selecting new node retains typing in headline
#@+node:ekr.20070627082044.156:@test paste from menu into body sticks
import leoTest ; u = leoTest.testUtils(c)
h = 'Test headline abc'
p = u.findNodeAnywhere(h)
assert p,'node not found: %s' % h
c.selectPosition(p)
c.bodyWantsFocusNow()
paste = 'ABC'
g.app.gui.replaceClipboardWith(paste)
if 1: # New code calls pasteText directly.
    event = g.Bunch(widget=c.frame.body.bodyCtrl)
    c.frame.pasteText(event)
else: # old code uses menu.invoke.
    # Post by hand.
    menu = c.frame.menu.getMenu('Edit')
    i = menu.index('Paste')
    menu.invoke(i)
# Move around and and make sure it doesn't change.
try:
    assert p.bodyString() == paste, 'paste1 failed'
    c.selectPosition(p.threadBack())
    assert p.bodyString() == paste, 'stick failed'
    c.selectPosition(p)
    assert p.bodyString() == paste, 'revisit failed'
finally:
    if 1:
        c.setBodyString(p,'')
        c.redraw_now()
#@-node:ekr.20070627082044.156:@test paste from menu into body sticks
#@+node:ekr.20070627082044.157:@test paste from menu into headline sticks
import leoTest ; u = leoTest.testUtils(c)
h = 'Test headline abc'
p = u.findNodeAnywhere(h)
assert p,'node not found: %s' % h
c.selectPosition(p)
c.frame.tree.editLabel(p)
w = c.edit_widget(p)
w.setSelectionRange('end','end',insert='end')
paste = 'ABC'
g.app.gui.replaceClipboardWith(paste)
if 1: # New code calls pasteText directly.
    event = g.Bunch(widget=w)
    c.frame.pasteText(event)
else:
    menu = c.frame.menu.getMenu('Edit')
    i = menu.index('Paste')
    menu.invoke(i)
# Move around and and make sure it doesn't change.
try:
    # g.trace('before select',w,w.getAllText())
    c.selectPosition(p.threadBack())
    assert p.headString() == h + paste,'oops1: expected: %s, got %s' % (h + paste,p.headString())
    c.selectPosition(p)
    assert p.headString() == h + paste,'oops2: expected: %s, got %s' % (h + paste,p.headString())
finally:
    if 1:
        c.setHeadString(p,h)
        c.frame.tree.setHeadline(p,h)
        c.redraw_now()
#@nonl
#@-node:ekr.20070627082044.157:@test paste from menu into headline sticks
#@+node:ekr.20070627082044.158:@test paste from menu to body recolors the body
# Should be a comment# Should be a comment# Should be a comment# Should be a comment
import leoTest ; u = leoTest.testUtils(c)
h = 'Test headline abc'
p = u.findNodeAnywhere(h)
assert p,'node not found: %s' % h
c.selectPosition(p)
c.bodyWantsFocusNow()
paste = '# Should be a comment'
g.app.gui.replaceClipboardWith(paste)
n = c.frame.body.colorizer.count
if 1:
    event = g.Bunch(widget=c.frame.body.bodyCtrl)
    c.frame.pasteText(event)
else:
    menu = c.frame.menu.getMenu('Edit')
    i = menu.index('Paste')
    menu.invoke(i)
# Move around and and make sure it doesn't change.
try:
    # There is no colorizer to test for wx.
    if g.app.gui.guiName() == 'tkinter':
        assert c.frame.body.colorizer.count > n, 'did not recolor text'
finally:
    if 1:
        c.setBodyString(p,'')
        c.redraw_now()
#@nonl
#@-node:ekr.20070627082044.158:@test paste from menu to body recolors the body
#@+node:ekr.20070627082044.159:@test typing in headline recomputes width
import leoTest ; u = leoTest.testUtils(c)
k = c.keyHandler
h = 'Test headline abc'
p = u.findNodeAnywhere(h)
assert p,'node not found: %s' % h
c.selectPosition(p)
c.redraw_now() # To make node visible
c.frame.tree.editLabel(p)
w = c.edit_widget(p)
try:
    assert w
    w.setSelectionRange('end','end')
    n = w.getWidth()
    w.event_generate('X')
    w.event_generate('Y')
    w.event_generate('Z')
    n2 = w.getWidth()
    if g.app.gui.guiName() == 'tkinter':
        assert n2 > n, '%s %s' % (n2,n)
    # g.trace(n,n2)
finally:
    if 1:
        p.initHeadString(h)
        c.frame.tree.setHeadline(p,h)
        c.redraw_now()
#@nonl
#@-node:ekr.20070627082044.159:@test typing in headline recomputes width
#@+node:ekr.20070627082044.160:@test selecting new node retains paste in headline
import leoTest ; u = leoTest.testUtils(c)
k = c.keyHandler
frame = c.frame ; tree = frame.tree ; canvas = tree.canvas
h = 'Test headline abc'
p = u.findNodeAnywhere(h)
assert p,'node not found: %s' % h
c.selectPosition(p)
c.redraw_now() # To make node visible
tree.editLabel(p)
w = c.edit_widget(p)
try:
    assert w
    w.setSelectionRange('end','end')
    paste = 'ABC'
    g.app.gui.replaceClipboardWith(paste)
    w.setSelectionRange('end','end')
    k.manufactureKeyPressForCommandName(w,'paste-text')
    c.selectPosition(p.visBack(c))
    assert p.headString() == h + paste
    k.manufactureKeyPressForCommandName(w,'undo')
    assert p.headString() == h
finally:
    if 1:
        p.initHeadString(h)
        c.frame.tree.setHeadline(p,h)
        c.redraw_now()
#@nonl
#@-node:ekr.20070627082044.160:@test selecting new node retains paste in headline
#@+node:ekr.20070627082044.161:@test typing in empty body text redraws the screen (and icon)
import leoTest ; u = leoTest.testUtils(c)

h = 'Test headline abc'
p = u.findNodeAnywhere(h)
assert p,'node not found: %s' % h
c.selectPosition(p)
c.redraw_now() # To make node visible
n = c.frame.tree.redrawCount
c.bodyWantsFocusNow()
assert not p.bodyString(), 'oops1'
try:
    # print 'before insert a',c.currentPosition()
    assert p == c.currentPosition(),'position has changed!'
    c.frame.body.bodyCtrl.event_generate('a')
    # print 'after insert a'
    assert p.bodyString() == 'a', 'expected "a", got: %s' % repr(p.bodyString())
    if g.app.gui.guiName() != 'nullGui':
        n2 = c.frame.tree.redrawCount
        assert n2 == n + 1,'too many or too few redraws: expected 1: got: %d' % (n2-n)
finally:
    if 1:
        c.setBodyString(p,'')
        c.redraw_now()
#@nonl
#@-node:ekr.20070627082044.161:@test typing in empty body text redraws the screen (and icon)
#@+node:ekr.20070627082044.162:@test typing in non-empty body text does not redraw the screen
import leoTest ; u = leoTest.testUtils(c)

h = 'Test headline abc'
p = u.findNodeAnywhere(h)
assert p,'node not found: %s' % h
c.selectPosition(p)
c.setBodyString(p,'a')
c.redraw_now() # To make node visible
n = c.frame.tree.redrawCount
c.bodyWantsFocusNow()
try:
    c.frame.body.bodyCtrl.event_generate('a')
    n2 = c.frame.tree.redrawCount
    assert n2 == n,'too many redraws: %d' % (n2-n)
finally:
    if 1:
        c.setBodyString(p,'')
        c.redraw_now()
#@nonl
#@-node:ekr.20070627082044.162:@test typing in non-empty body text does not redraw the screen
#@+node:ekr.20070627082044.163:@test inserting a new node can be undone and redone
c.insertHeadline()
assert c.undoer.undoMenuLabel == 'Undo Insert Node'
c.undoer.undo()
assert c.undoer.redoMenuLabel == 'Redo Insert Node'
#@nonl
#@-node:ekr.20070627082044.163:@test inserting a new node can be undone and redone
#@+node:ekr.20070627082044.164:@test inserting a new node draws the screen exactly once
n = c.frame.tree.redrawCount
c.insertHeadline()
try:
    n2 = c.frame.tree.redrawCount
    assert n2 == n + 1,'redraws: %d' % (n2 - n)
finally:
    c.undoer.undo()
#@nonl
#@-node:ekr.20070627082044.164:@test inserting a new node draws the screen exactly once
#@+node:ekr.20070627082044.165:@test undoing insert node restores previous node's body text
import leoTest ; u = leoTest.testUtils(c)
h = 'Test headline abc'
p = u.findNodeAnywhere(h)
assert p,'node not found: %s' % h
c.selectPosition(p)
body = 'This is a test'
c.setBodyString(p,body)

try:
    assert p.bodyString() == body
    c.insertHeadline()
    c.undoer.undo()
    assert p.bodyString() == body
finally:
    c.setBodyString(p,'')
#@nonl
#@-node:ekr.20070627082044.165:@test undoing insert node restores previous node's body text
#@+node:ekr.20070627082044.166:@test <Delete> key sticks in body
import leoTest ; u = leoTest.testUtils(c)
h = 'Test headline abc'
p = u.findNodeAnywhere(h)
assert p,'node not found: %s' % h
c.selectPosition(p)
s = 'ABC'
c.setBodyString(p,s)
try:
    c.bodyWantsFocusNow()
    w = c.frame.body.bodyCtrl
    w.setInsertPoint(2)
    w.event_generate('<Delete>')
    assert p.bodyString() == s[:-1],'oops1: expected "AB", got %s' % p.bodyString()
    c.selectPosition(p.threadBack())
    c.selectPosition(p)
    assert p.bodyString() == s[:-1],'oops2: expected "AB", got %s' % p.bodyString()
finally:
    if 1:
        c.setBodyString(p,'')
        c.redraw_now()

#@-node:ekr.20070627082044.166:@test <Delete> key sticks in body
#@+node:ekr.20070627082044.167:@test <Delete> key sticks in headline
import leoTest ; u = leoTest.testUtils(c)
h = 'Test headline abc'
p = u.findNodeAnywhere(h)
assert p,'node not found: %s' % h
c.selectPosition(p)
c.redraw_now() # To make node visible
c.frame.tree.editLabel(p)
w = c.edit_widget(p)
try:
    assert w
    w.setSelectionRange('end','end')
    # w.event_generate('X')
finally:
    if 1:
        p.initHeadString(h)
        c.frame.tree.setHeadline(p,h)
        c.redraw_now()
#@nonl
#@-node:ekr.20070627082044.167:@test <Delete> key sticks in headline
#@+node:ekr.20070627082044.168:print end of typing and undo tests
print ; print 'End of typing and undo tests'
#@nonl
#@-node:ekr.20070627082044.168:print end of typing and undo tests
#@-node:ekr.20070627082044.148:Typing and undo tests
#@+node:ekr.20070627082044.169:Not ready yet
#@+node:ekr.20070627082044.170:@@test typing and undo in headline - with selection
# Totally weird.

import leoTest ; u = leoTest.testUtils(c)
k = c.keyHandler
frame = c.frame ; tree = frame.tree ; canvas = tree.canvas
h = 'Test headline abc'
p = u.findNodeAnywhere(h)
assert p,'node not found: %s' % h
c.selectPosition(p)
c.redraw_now() # To make node visible
tree.editLabel(p) # Sets focus.
w = c.edit_widget(p)
try:
    assert w
    w.update()
    w.setSelectionRange('1.1','1.2',insert='1.1')
    w.event_generate('X')
    w.event_generate('Y')
    w.event_generate('Z')
    w.event_generate('<Return>')
    print 'after',repr(w.get('1.0','end'))
    print 'end edit'
    expected = h[0] + 'XYZ' + h[2:]
    assert p.headString() == expected,'fail 1: expected "%s" got "%s"' % (
        expected,repr(p.headString()))
    k.manufactureKeyPressForCommandName(w,'undo')
    assert p.headString() == h,'fail 2'
finally:
    if 1:
        p.initHeadString(h)
        c.redraw_now()
#@-node:ekr.20070627082044.170:@@test typing and undo in headline - with selection
#@+node:ekr.20070627082044.171:@@test plugins manager stays in front
# Not so easy to do.
import plugin_manager
n = g.app.dialogs
pm = plugin_manager.ManagerDialog()
try:
    assert g.app.dialogs == n
finally:
    if 1:
        pass
#@nonl
#@-node:ekr.20070627082044.171:@@test plugins manager stays in front
#@+node:ekr.20070627082044.172:@@test deleting the last body character text redraws the screen (and icon)
# Not ready yet: generating a backspace seems impossible!

import leoTest ; u = leoTest.testUtils(c)

h = 'Test headline abc'
p = u.findNodeAnywhere(h)
assert p,'node not found: %s' % h
c.selectPosition(p)
c.setBodyString(p,'a')
c.redraw_now() # To make node visible and to set the icon.
try:
    c.bodyWantsFocusNow()
    n = c.frame.tree.redrawCount
    w = c.frame.body.bodyCtrl
    w.setInsertPoint('end')
    w.event_generate('<BackSpace>')
    n2 = c.frame.tree.redrawCount
    assert n2 == n + 1,'too many or too few redraws: %d' % (n2-n)
finally:
    if 1:
        c.setBodyString(p,'')
        c.redraw_now()
#@nonl
#@-node:ekr.20070627082044.172:@@test deleting the last body character text redraws the screen (and icon)
#@+node:ekr.20070627082044.173:@test return in minibuffer after tab
#@-node:ekr.20070627082044.173:@test return in minibuffer after tab
#@+node:ekr.20070627082044.174:@test scrolling at bottom of window
#@-node:ekr.20070627082044.174:@test scrolling at bottom of window
#@+node:ekr.20070627082044.175:@test head changes stick after click in icon box
#@-node:ekr.20070627082044.175:@test head changes stick after click in icon box
#@+node:ekr.20070627082044.176:@test paste into body sticks
#@-node:ekr.20070627082044.176:@test paste into body sticks
#@+node:ekr.20070627082044.177:@test edit headline, then insert node
#@-node:ekr.20070627082044.177:@test edit headline, then insert node
#@+node:ekr.20070627082044.178:@test <Delete> key
#@-node:ekr.20070627082044.178:@test <Delete> key
#@+node:ekr.20070627082044.179:@test arrow keys
#@-node:ekr.20070627082044.179:@test arrow keys
#@+node:ekr.20070627082044.180:@@test paste in headline recomputes width
import leoTest ; u = leoTest.testUtils(c)
k = c.keyHandler
h = 'Test headline abc'
p = u.findNodeAnywhere(h)
assert p,'node not found: %s' % h
c.selectPosition(p)
c.redraw_now() # To make node visible
c.frame.tree.editLabel(p)
w = c.edit_widget(p)
paste = 'ABC'
g.app.gui.replaceClipboardWith(paste)
try:
    assert w, 'no w'
    w.setSelectionRange('end','end')
    g.app.unitTestDict = {}
    k.manufactureKeyPressForCommandName(w,'paste-text')
    assert g.app.unitTestDict.get('headWidth') == True
finally:
    if 1:
        p.initHeadString(h)
        c.redraw_now()
#@nonl
#@-node:ekr.20070627082044.180:@@test paste in headline recomputes width
#@-node:ekr.20070627082044.169:Not ready yet
#@+node:ekr.20070627082044.181:@test zz restore the screen
# This is **not** a real unit test.
# It simply restores the screen to a more convenient state.
import leoTest
u = leoTest.testUtils(c)

c.beginUpdate()
try:
    c.contractParent()
    c.selectPosition(p.parent())
    g.app.unitTestDict['restoreSelectedNode']=False
finally:
    c.endUpdate()

print ; print 'End of unit tests for typing'
#@nonl
#@-node:ekr.20070627082044.181:@test zz restore the screen
#@-node:ekr.20070627082044.144:@unit-tests typing...
#@+node:ekr.20070627082044.733:Reformat Paragraph tests
@ Rewritten by EKR.  April 17, 2005.

Each data node must have three children:

- a "before" node
- an "after" node
- a "tempNode" node

A parent to before and after nodes will contain pagewidth and language formatting directives.
#@+node:ekr.20070627082044.734:@test noTrailingNewline (pass)
# Wrap a long line, no trailing newline.

import leoTest

leoTest.singleParagraphTest(c,p,2,24)
#@nonl
#@+node:ekr.20070627082044.735:data
@language plain
@pagewidth 40
@tabwidth 8

#@+node:ekr.20070627082044.736:tempNode
#@-node:ekr.20070627082044.736:tempNode
#@+node:ekr.20070627082044.737:before
This line is over forty characters long, at least it seems to be.
#@nonl
#@-node:ekr.20070627082044.737:before
#@+node:ekr.20070627082044.738:after
This line is over forty characters long,
at least it seems to be.
#@nonl
#@-node:ekr.20070627082044.738:after
#@-node:ekr.20070627082044.735:data
#@-node:ekr.20070627082044.734:@test noTrailingNewline (pass)
#@+node:ekr.20070627082044.739:@test trailingNewline (pass)
# Wrap a long line, with trailing newline.

import leoTest

# Wrap a long line, no trailing newline.
leoTest.singleParagraphTest(c,p,3,0)
#@nonl
#@+node:ekr.20070627082044.740:data
@language plain
@pagewidth 40
@tabwidth 8
#@nonl
#@+node:ekr.20070627082044.741:tempNode
#@-node:ekr.20070627082044.741:tempNode
#@+node:ekr.20070627082044.742:before
This line is over forty characters long, at least it seems to be.
#@-node:ekr.20070627082044.742:before
#@+node:ekr.20070627082044.743:after
This line is over forty characters long,
at least it seems to be.
#@-node:ekr.20070627082044.743:after
#@-node:ekr.20070627082044.740:data
#@-node:ekr.20070627082044.739:@test trailingNewline (pass)
#@+node:ekr.20070627082044.744:@test mixedLineLengths
# Wrap a long line and some short ones.

import leoTest

leoTest.singleParagraphTest(c,p,4,10)
#@nonl
#@+node:ekr.20070627082044.745:data
@language plain
@pagewidth 40
@tabwidth 8
#@nonl
#@+node:ekr.20070627082044.746:tempNode
#@-node:ekr.20070627082044.746:tempNode
#@+node:ekr.20070627082044.747:before
This line is over forty characters long, at least it seems to be.
This is shorter, 
but should be part of the same
paragraph.
#@nonl
#@-node:ekr.20070627082044.747:before
#@+node:ekr.20070627082044.748:after
This line is over forty characters long,
at least it seems to be. This is
shorter, but should be part of the same
paragraph.
#@nonl
#@-node:ekr.20070627082044.748:after
#@-node:ekr.20070627082044.745:data
#@-node:ekr.20070627082044.744:@test mixedLineLengths
#@+node:ekr.20070627082044.749:@test mixedLinesWithLeadingWS
# Wrap a paragraph with interior lines that have leading white space.

import leoTest

leoTest.singleParagraphTest(c,p,4,12)
#@nonl
#@+node:ekr.20070627082044.750:data
@language plain
@pagewidth 40
@tabwidth 8
#@nonl
#@+node:ekr.20070627082044.751:tempNode
#@-node:ekr.20070627082044.751:tempNode
#@+node:ekr.20070627082044.752:before
This line is over forty characters long, at least it seems to be.
  This indented line should be merged into the same
paragraph.
#@nonl
#@-node:ekr.20070627082044.752:before
#@+node:ekr.20070627082044.753:after
This line is over forty characters long,
  at least it seems to be. This indented
  line should be merged into the same
  paragraph.
#@nonl
#@-node:ekr.20070627082044.753:after
#@-node:ekr.20070627082044.750:data
#@-node:ekr.20070627082044.749:@test mixedLinesWithLeadingWS
#@+node:ekr.20070627082044.754:@test noChangeRequired
# No wrapping required, so don't change a thing.

import leoTest

leoTest.singleParagraphTest(c,p,1,28)
#@+node:ekr.20070627082044.755:data
@language plain
@pagewidth 40
@tabwidth 8
#@nonl
#@+node:ekr.20070627082044.756:tempNode
#@-node:ekr.20070627082044.756:tempNode
#@+node:ekr.20070627082044.757:before
This line is under 40 chars.
#@nonl
#@-node:ekr.20070627082044.757:before
#@+node:ekr.20070627082044.758:after
This line is under 40 chars.
#@nonl
#@-node:ekr.20070627082044.758:after
#@-node:ekr.20070627082044.755:data
#@-node:ekr.20070627082044.754:@test noChangeRequired
#@+node:ekr.20070627082044.759:@test honorLeadingWS
# Honor the first line's leading whitespace.

import leoTest

leoTest.singleParagraphTest(c,p,5,16)
#@+node:ekr.20070627082044.760:data
@language plain
@pagewidth 40
@tabwidth 8
#@nonl
#@+node:ekr.20070627082044.761:tempNode
#@-node:ekr.20070627082044.761:tempNode
#@+node:ekr.20070627082044.762:before
   This line is over forty characters long, at least it seems to be.
   This is shorter, 
but should be part of the same
paragraph.  And this is indented 3 characters.
#@nonl
#@-node:ekr.20070627082044.762:before
#@+node:ekr.20070627082044.763:after
   This line is over forty characters
   long, at least it seems to be. This
   is shorter, but should be part of the
   same paragraph. And this is indented
   3 characters.
#@nonl
#@-node:ekr.20070627082044.763:after
#@-node:ekr.20070627082044.760:data
#@-node:ekr.20070627082044.759:@test honorLeadingWS
#@+node:ekr.20070627082044.764:@test honorLeadingWSVar1
# Honor the first and second line's leading whitespace.

import leoTest

leoTest.singleParagraphTest(c,p,5,16)
#@+node:ekr.20070627082044.765:data
@language plain
@pagewidth 40
@tabwidth 8
#@nonl
#@+node:ekr.20070627082044.766:tempNode
#@-node:ekr.20070627082044.766:tempNode
#@+node:ekr.20070627082044.767:before
   This line is over forty characters long, at least it seems to be.
   This is shorter, 
     but should be part of the same
     paragraph.  And this is indented 3 characters.
#@nonl
#@-node:ekr.20070627082044.767:before
#@+node:ekr.20070627082044.768:after
   This line is over forty characters
   long, at least it seems to be. This
   is shorter, but should be part of the
   same paragraph. And this is indented
   3 characters.
#@nonl
#@-node:ekr.20070627082044.768:after
#@-node:ekr.20070627082044.765:data
#@-node:ekr.20070627082044.764:@test honorLeadingWSVar1
#@+node:ekr.20070627082044.769:@test simpleHangingIndent
# Single paragraph, hanging indentation.

import leoTest

leoTest.singleParagraphTest(c,p,5,8)
#@+node:ekr.20070627082044.770:data
@language plain
@pagewidth 40
@tabwidth 8
#@nonl
#@+node:ekr.20070627082044.771:tempNode
#@-node:ekr.20070627082044.771:tempNode
#@+node:ekr.20070627082044.772:before
Honor this line that has a hanging indentation, please.  Hanging
  indentation is valuable for lists of all kinds.  But it is tricky to get right.
#@nonl
#@-node:ekr.20070627082044.772:before
#@+node:ekr.20070627082044.773:after
Honor this line that has a hanging
  indentation, please. Hanging
  indentation is valuable for lists of
  all kinds. But it is tricky to get
  right.
#@nonl
#@-node:ekr.20070627082044.773:after
#@-node:ekr.20070627082044.770:data
#@-node:ekr.20070627082044.769:@test simpleHangingIndent
#@+node:ekr.20070627082044.774:@test testSimpleHangingIndentVar1
# Single paragraph, hanging indentation with other indentation beyond line 2.

import leoTest

leoTest.singleParagraphTest(c,p,5,8)
#@nonl
#@+node:ekr.20070627082044.775:data
@language plain
@pagewidth 40
@tabwidth 8
#@nonl
#@+node:ekr.20070627082044.776:tempNode
#@-node:ekr.20070627082044.776:tempNode
#@+node:ekr.20070627082044.777:before
Honor this line that has
  a hanging indentation, please.  Hanging
    indentation is valuable for lists of all kinds.  But it is tricky to get right.
#@nonl
#@-node:ekr.20070627082044.777:before
#@+node:ekr.20070627082044.778:after
Honor this line that has a hanging
  indentation, please. Hanging
  indentation is valuable for lists of
  all kinds. But it is tricky to get
  right.
#@nonl
#@-node:ekr.20070627082044.778:after
#@-node:ekr.20070627082044.775:data
#@-node:ekr.20070627082044.774:@test testSimpleHangingIndentVar1
#@+node:ekr.20070627082044.779:@test simpleHangingIndentVar2
# Single paragraph, hanging indentation, short lines, extraneous indentation, and last line uses a tab for whitespace.

import leoTest

leoTest.singleParagraphTest(c,p,5,8)
#@nonl
#@+node:ekr.20070627082044.780:data
@language plain
@pagewidth 40
@tabwidth 8
#@nonl
#@+node:ekr.20070627082044.781:tempNode
#@-node:ekr.20070627082044.781:tempNode
#@+node:ekr.20070627082044.782:before
Honor this line that 
  has a hanging indentation, 
  please.  Hanging
   indentation is valuable
    for lists of all kinds.  But 
    it is tricky to get right.
#@nonl
#@-node:ekr.20070627082044.782:before
#@+node:ekr.20070627082044.783:after
Honor this line that has a hanging
  indentation, please. Hanging
  indentation is valuable for lists of
  all kinds. But it is tricky to get
  right.
#@nonl
#@-node:ekr.20070627082044.783:after
#@-node:ekr.20070627082044.780:data
#@-node:ekr.20070627082044.779:@test simpleHangingIndentVar2
#@+node:ekr.20070627082044.784:@test multiParagraphTest
# Multiple long lined paragraphs.  Cursor should move to next paragraph after formatting a paragraph.

import leoTest

leoTest.multiParagraphTest(c,p)
#@nonl
#@+node:ekr.20070627082044.785:data
@language plain
@pagewidth 40
@tabwidth 8
#@nonl
#@+node:ekr.20070627082044.786:tempNode
#@-node:ekr.20070627082044.786:tempNode
#@+node:ekr.20070627082044.787:before
Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
#@nonl
#@-node:ekr.20070627082044.787:before
#@+node:ekr.20070627082044.788:after
Americans live in the most severe
weather-prone country on Earth. Each
year, Americans cope with an average of
10,000 thunderstorms, 2,500 floods,
1,000 tornadoes, as well as an average
of 6 deadly hurricanes. Potentially
deadly weather impacts every American.
Communities can now rely on the National
Weather Service’s StormReady program to
help them guard against the ravages of
Mother Nature.

Some 90% of all presidentially declared
disasters are weather related, leading
to around 500 deaths per year and nearly
$14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK,
helps arm America's communities with the
communication and safety skills needed
to save lives and property– before and
during the event. StormReady helps
community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better
prepared to save lives from the
onslaught of severe weather through
better planning, education, and
awareness. No community is storm proof,
but StormReady can help communities save
lives. Does StormReady make a
difference?
#@nonl
#@-node:ekr.20070627082044.788:after
#@-node:ekr.20070627082044.785:data
#@-node:ekr.20070627082044.784:@test multiParagraphTest
#@+node:ekr.20070627082044.789:@test multiParagraphWithListTest
# A regular paragraph, plus a numbered list of several items, plus a final regular paragraph.
# Cursor should move to next paragraph after formatting a paragraph.

import leoTest

leoTest.multiParagraphWithListTest(c,p)
#@nonl
#@+node:ekr.20070627082044.790:data
@language plain
@pagewidth 40
@tabwidth 8

# DTHEIN 2004.01.11: Added test case data

#@+node:ekr.20070627082044.791:tempNode
#@-node:ekr.20070627082044.791:tempNode
#@+node:ekr.20070627082044.792:before
This paragraph leads of this test.  It is the "lead"
paragraph.

  1. This is item 
     number 1.  It is the first item in the list.

  2. This is item 
     number 2.  It is the second item in the list.

  3. This is item 
     number 3.  It is the third item in the list.

This paragraph ends the test.  It is the "final"
paragraph.
#@nonl
#@-node:ekr.20070627082044.792:before
#@+node:ekr.20070627082044.793:after
This paragraph leads of this test. It is
the "lead" paragraph.

  1. This is item number 1. It is the
     first item in the list.

  2. This is item number 2. It is the
     second item in the list.

  3. This is item number 3. It is the
     third item in the list.

This paragraph ends the test. It is the
"final" paragraph.
#@nonl
#@-node:ekr.20070627082044.793:after
#@-node:ekr.20070627082044.790:data
#@-node:ekr.20070627082044.789:@test multiParagraphWithListTest
#@+node:ekr.20070627082044.794:@test leadingWSOnEmptyLinesTest
@
Ran into a problem with the wrapping eating blank lines that delimit paragraphs
if those blank lines have any leading whitespace. This test is to make sure that
still works.

If you "show invisibles" you'll see the leading whitespace in the blank lines --
which is different from the "testMultiParagraphWithList" test.
@c

import leoTest

leoTest.leadingWSOnEmptyLinesTest(c,p)
#@nonl
#@+node:ekr.20070627082044.795:data
@language plain
@pagewidth 40
@tabwidth 8

#@+node:ekr.20070627082044.796:tempNode
#@-node:ekr.20070627082044.796:tempNode
#@+node:ekr.20070627082044.797:before
This paragraph leads of this test.  It is the "lead"
paragraph.

  1. This is item 
     number 1.  It is the first item in the list.

  2. This is item 
     number 2.  It is the second item in the list.

  3. This is item 
     number 3.  It is the third item in the list.

This paragraph ends the test.  It is the "final"
paragraph.
#@nonl
#@-node:ekr.20070627082044.797:before
#@+node:ekr.20070627082044.798:after
This paragraph leads of this test. It is
the "lead" paragraph.

  1. This is item number 1. It is the
     first item in the list.

  2. This is item number 2. It is the
     second item in the list.

  3. This is item number 3. It is the
     third item in the list.

This paragraph ends the test. It is the
"final" paragraph.
#@nonl
#@-node:ekr.20070627082044.798:after
#@-node:ekr.20070627082044.795:data
#@-node:ekr.20070627082044.794:@test leadingWSOnEmptyLinesTest
#@+node:ekr.20070627082044.799:@test directiveBreaksParagraphTest
import leoTest

leoTest.directiveBreaksParagraphTest(c,p)
#@nonl
#@+node:ekr.20070627082044.800:data
@language plain
@pagewidth 40
@tabwidth 8

# DTHEIN 2004.01.11: Added test case data

Test to make sure that reformatting treats directives as a new paragraph and doesn't wrap directive lines.
#@+node:ekr.20070627082044.801:tempNode
#@-node:ekr.20070627082044.801:tempNode
#@+node:ekr.20070627082044.802:before
Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.
@unknownDirective
Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.
@unknownDirective
StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
#@nonl
#@-node:ekr.20070627082044.802:before
#@+node:ekr.20070627082044.803:after
Americans live in the most severe
weather-prone country on Earth. Each
year, Americans cope with an average of
10,000 thunderstorms, 2,500 floods,
1,000 tornadoes, as well as an average
of 6 deadly hurricanes. Potentially
deadly weather impacts every American.
Communities can now rely on the National
Weather Service’s StormReady program to
help them guard against the ravages of
Mother Nature.
@unknownDirective
Some 90% of all presidentially declared
disasters are weather related, leading
to around 500 deaths per year and nearly
$14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK,
helps arm America's communities with the
communication and safety skills needed
to save lives and property– before and
during the event. StormReady helps
community leaders and emergency managers
strengthen local safety programs.
@unknownDirective
StormReady communities are better
prepared to save lives from the
onslaught of severe weather through
better planning, education, and
awareness. No community is storm proof,
but StormReady can help communities save
lives. Does StormReady make a
difference?
#@nonl
#@-node:ekr.20070627082044.803:after
#@-node:ekr.20070627082044.800:data
#@-node:ekr.20070627082044.799:@test directiveBreaksParagraphTest
#@-node:ekr.20070627082044.733:Reformat Paragraph tests
#@-node:ekr.20070630070931.1:commands (8 fail)
#@+node:ekr.20070627082044.191:Colorizer
#@+node:ekr.20070627082044.195:@test @comment after @language plain
if g.unitTesting:
    p = c.currentPosition().firstChild()

    c.beginUpdate()
    try:
        c.selectVnode(p) # Sets body text.
        val = c.frame.body.colorizer.colorize(p,incremental=False)
        print 'colorizer',c.frame.body.colorizer
        assert val=="ok", "colorizer test failed: %s returns: %s" % (p.headString(),val)
    finally:
        c.endUpdate(False)
#@+node:ekr.20070627082044.196:Test
@language plain
@comment # /* */

This is plain text.

# This is a comment.

More plain text.

/* A block comment
continues */

More plain text.
#@nonl
#@-node:ekr.20070627082044.196:Test
#@-node:ekr.20070627082044.195:@test @comment after @language plain
#@+node:ekr.20070627082044.197:@test colorizer Actionscript
if g.unitTesting:
    p = c.currentPosition().firstChild()

    c.beginUpdate()
    try:
        c.selectVnode(p) # Sets body text.
        val = c.frame.body.colorizer.colorize(p,incremental=False)
        assert val=="ok", "colorizer test failed: %s" % p.headString()
    finally:
        c.endUpdate(False)
#@+node:ekr.20070627082044.198:Actionscript
@language actionscript

break
call, continue
delete, do
else
false, for, function
goto
if, in
new, null
return
true, typeof
undefined
var, void, while, with
#include
catch, constructor
prototype
this, try
_parent, _root, __proto__
// Jeeze hasn't anyone ever heard of namespaces??
ASnative, abs, acos, appendChild, asfunction, asin, atan, atan2, attachMovie, attachSound, attributes
BACKSPACE
CAPSLOCK, CONTROL, ceil, charAt, charCodeAt, childNodes, chr, cloneNode, close, concat, connect, cos, createElement, createTextNode
DELETEKEY, DOWN, docTypeDecl, duplicateMovieClip
END, ENTER, ESCAPE, enterFrame, entry, equal, eval, evaluate, exp
firstChild, floor, fromCharCode, fscommand, getAscii
getBeginIndex, getBounds, getBytesLoaded, getBytesTotal, getCaretIndex, getCode, getDate, getDay, getEndIndex, getFocus, getFullYear, getHours, getMilliseconds, getMinutes, getMonth, getPan, getProperty, getRGB, getSeconds, getTime, getTimer, getTimezoneOffset, getTransform, getURL, getUTCDate, getUTCDay, getUTCFullYear, getUTCHours, getUTCMilliseconds, getUTCMinutes, getUTCMonth, getUTCSeconds, getVersion, getVolume, getYear, globalToLocal, gotoAndPlay, gotoAndStop
HOME, haschildNodes, hide, hitTest
INSERT, Infinity, ifFrameLoaded, ignoreWhite, indexOf, insertBefore, int, isDown, isFinite, isNaN, isToggled
join
keycode, keyDown, keyUp
LEFT, LN10, LN2, LOG10E, LOG2E, lastChild, lastIndexOf, length, load, loaded, loadMovie, loadMovieNum, loadVariables, loadVariablesNum, localToGlobal, log
MAX_VALUE, MIN_VALUE, max, maxscroll, mbchr, mblength, mbord, mbsubstring, min, 
NEGATIVE_INFINITY, NaN, newline, nextFrame, nextScene, nextSibling, nodeName, nodeType, nodeValue
on, onClipEvent, onClose, onConnect, onData, onLoad, onXML, ord
PGDN, PGUP, PI, POSITIVE_INFINITY, parentNode, parseFloat, parseInt, parseXML, play, pop, pow, press, prevFrame, previousSibling, prevScene, print, printAsBitmap, printAsBitmapNum, printNum, push
RIGHT, random, release, removeMovieClip, removeNode, reverse, round
SPACE, SQRT1_2, SQRT2, scroll, send, sendAndLoad, set, setDate, setFocus, setFullYear, setHours, setMilliseconds, setMinutes, setMonth, setPan, setProperty, setRGB, setSeconds, setSelection, setTime, setTransform, setUTCDate, setUTCFullYear, setUTCHours, setUTCMilliseconds, setUTCMinutes, setUTCMonth, setUTCSeconds, setVolume, setYear, shift, show, sin, slice, sort, start, startDrag, status, stop, stopAllSounds, stopDrag, substr, substring, swapDepths, splice, split, sqrt
TAB, tan, targetPath, tellTarget, toggleHighQuality, toLowerCase, toString, toUpperCase, trace
UP, UTC, unescape, unloadMovie, unLoadMovieNum, unshift, updateAfterEvent
valueOf
xmlDecl, _alpha
_currentframe
_droptarget
_focusrect, _framesloaded
_height, _highquality
_name
_quality
_rotation
_soundbuftime
_target, _totalframes
_url
_visible
_width
_x, _xmouse, _xscale
_y, _ymouse, _yscale
and, add, eq, ge, gt, le, lt, ne, not, or, Array, Boolean, Color, Date, Key, Math, MovieClip, Mouse, Number, Object, Selection, Sound, String, XML, XMLSocket
#@nonl
#@-node:ekr.20070627082044.198:Actionscript
#@-node:ekr.20070627082044.197:@test colorizer Actionscript
#@+node:ekr.20070627082044.199:@test colorizer C
if g.unitTesting:
    p = c.currentPosition().firstChild()

    c.beginUpdate()
    try:
        c.selectVnode(p) # Sets body text.
        val = c.frame.body.colorizer.colorize(p,incremental=False)
        assert val=="ok", "colorizer test failed: %s" % p.headString()
    finally:
        c.endUpdate(False)
#@+node:ekr.20070627082044.200:C
@language c
@comment /* */

@
@c

#define WIPEOUT 0 /* 
                   * Causes database card number & flags to be set to zero. 
                   * This is so I don't need an infinite supply of cards!
                   */
// Not colored (because of @language /* */)
#include "equ.h"
#include "cmn.h"
#include "ramdef.h"
#include "eeprom.h"
#include <hpc_ram.h>
#include <rlydef.h>
#@nonl
#@-node:ekr.20070627082044.200:C
#@-node:ekr.20070627082044.199:@test colorizer C
#@+node:ekr.20070627082044.201:@test colorizer C#
if g.unitTesting:
    p = c.currentPosition().firstChild()

    c.beginUpdate()
    try:
        c.selectVnode(p) # Sets body text.
        val = c.frame.body.colorizer.colorize(p,incremental=False)
        assert val=="ok", "colorizer test failed: %s" % p.headString()
    finally:
        c.endUpdate(False)
#@+node:ekr.20070627082044.202:C#
@language csharp
@ comment
@c

/* block
comment */

// test

id // not a keyword

abstract as 
base bool break byte 
case catch char checked class const continue 
decimal default delegate do double 
else enum event explicit extern 
false finally fixed float for foreach 
get goto 
if implicit in int interface internal is 
lock long 
namespace new null 
object operator out override 
params partial private protected public 
readonly ref return 
sbyte sealed set short sizeof stackalloc 
static string struct switch 
this throw true try typeof 
uint ulong unchecked unsafe ushort using 
value virtual void volatile 
where while
yield
#@nonl
#@-node:ekr.20070627082044.202:C#
#@-node:ekr.20070627082044.201:@test colorizer C#
#@+node:ekr.20070627082044.203:@test colorizer css
if g.unitTesting:
    p = c.currentPosition().firstChild()

    c.beginUpdate()
    try:
        c.selectVnode(p) # Sets body text.
        val = c.frame.body.colorizer.colorize(p,incremental=False)
        assert val=="ok", "colorizer test failed: %s" % p.headString()
    finally:
        c.endUpdate(False)
#@+node:ekr.20070627082044.204:css
@language css
/* New in 4.2. */

/*html tags*/
address, applet, area, a, base, basefont,
big, blockquote, body, br, b, caption, center,
cite, code, dd, dfn, dir, div, dl, dt, em, font,
form, h1, h2, h3, h4, h5, h6, head, hr, html, img,
input, isindex, i, kbd, link, li, link, map, menu,
meta, ol, option, param, pre, p, samp,
select, small, span, strike, strong, style, sub, sup,
table, td, textarea, th, title, tr, tt, ul, u, var,
/*units*/
mm, cm, in, pt, pc, em, ex, px,
/*colors*/
aqua, black, blue, fuchsia, gray, green, lime, maroon, navy, olive, purple, red, silver, teal, yellow, white,
/*important directive*/
!important,
/*font rules*/
font, font-family, font-style, font-variant, font-weight, font-size,
/*font values*/
cursive, fantasy, monospace, normal, italic, oblique, small-caps,
bold, bolder, lighter, medium, larger, smaller,
serif, sans-serif,
/*background rules*/
background, background-color, background-image, background-repeat, background-attachment, background-position,
/*background values*/
contained, none, top, center, bottom, left, right, scroll, fixed,
repeat, repeat-x, repeat-y, no-repeat,
/*text rules*/
word-spacing, letter-spacing, text-decoration, vertical-align, text-transform, text-align, text-indent, text-transform, text-shadow, unicode-bidi, line-height,
/*text values*/
normal, none, underline, overline, blink, sub, super, middle, top, text-top, text-bottom,
capitalize, uppercase, lowercase, none, left, right, center, justify,
line-through,
/*box rules*/
margin, margin-top, margin-bottom, margin-left, margin-right,
margin, padding-top, padding-bottom, padding-left, padding-right,
border, border-width, border-style, border-top, border-top-width, border-top-style, border-bottom, border-bottom-width, border-bottom-style, border-left, border-left-width, border-left-style, border-right, border-right-width, border-right-style, border-color,
/*box values*/
width, height, float, clear,
auto, thin, medium, thick, left, right, none, both,
none, dotted, dashed, solid, double, groove, ridge, inset, outset,
/*display rules*/
display, white-space, 
min-width, max-width, min-height, max-height,
outline-color, outline-style, outline-width,
/*display values*/
run-in, inline-block, list-item, block, inline, none, normal, pre, nowrap, table-cell, table-row, table-row-group, table-header-group, inline-table, table-column, table-column-group, table-cell, table-caption
/*list rules*/
list-style, list-style-type, list-style-image, list-style-position,
/*list values*/
disc, circle, square, decimal, decimal-leading-zero, none,
lower-roman, upper-roman, lower-alpha, upper-alpha, lower-latin, upper-latin,
/*table rules*/
border-collapse, caption-side,
/*table-values*/
empty-cells, table-layout,
/*misc values/rules*/
counter-increment, counter-reset,
marker-offset, z-index,
cursor, direction, marks, quotes,
clip, content, orphans, overflow, visibility,
/*aural rules*/
pitch, range, pitch-during, cue-after, pause-after, cue-before, pause-before, speak-header, speak-numeral, speak-punctuation, speed-rate, play-during, voice-family,
/*aural values*/
stress, azimuth, elevation, pitch, richness, volume,
page-break, page-after, page-inside
#@nonl
#@-node:ekr.20070627082044.204:css
#@-node:ekr.20070627082044.203:@test colorizer css
#@+node:ekr.20070627082044.205:@test colorizer CWEB
if g.unitTesting:
    p = c.currentPosition().firstChild()

    c.beginUpdate()
    try:
        c.selectVnode(p) # Sets body text.
        val = c.frame.body.colorizer.colorize(p,incremental=False)
        assert val=="ok", "colorizer test failed: %s" % p.headString()
    finally:
        c.endUpdate(False)
#@+node:ekr.20070627082044.206:CWEB
@language cweb

% This is limbo in cweb mode... It should be in \LaTeX mode, not \c mode.
% The following should not be colorized: class,if,else.

@* this is a _cweb_ comment.  Code is written in \c.
"strings" should not be colorized.
It should be colored in \LaTeX mode.
The following are not keywords in latex mode: if, else, etc.
Noweb section references are _valid_ in cweb comments!
<< section ref >>
<< missing ref >>
@c

and this is C code. // It is colored in \LaTeX mode by default.
/* This is a C block comment.  It may also be colored in restricted \LaTeX mode. */

// Section refs are valid in code too, of course.
<< section ref >>
<< missing ref >>

\LaTeX and \c should not be colored.
if else, while, do // C keywords.
#@nonl
#@+node:ekr.20070627082044.207:<< section ref >>
<< section def >>=

    my \c code goes here // This is \LaTeX text
    /* This is also \LaTeX text */
#@nonl
#@-node:ekr.20070627082044.207:<< section ref >>
#@-node:ekr.20070627082044.206:CWEB
#@-node:ekr.20070627082044.205:@test colorizer CWEB
#@+node:ekr.20070627082044.208:@test colorizer elisp
if g.unitTesting:
    p = c.currentPosition().firstChild()

    c.beginUpdate()
    try:
        c.selectVnode(p) # Sets body text.
        val = c.frame.body.colorizer.colorize(p,incremental=False)
        assert val=="ok", "colorizer test failed: %s" % p.headString()
    finally:
        c.endUpdate(False)
#@+node:ekr.20070627082044.209:elisp
@language elisp

; Maybe...
error princ 

; More typical of other lisps...
and apply
car cdr cons cond
defconst defun defvar 
eq equal eval
gt ge
if 
let le lt
mapcar 
ne nil 
or not 
prog progn 
set setq 
t type-of 
unless 
when while
#@nonl
#@-node:ekr.20070627082044.209:elisp
#@-node:ekr.20070627082044.208:@test colorizer elisp
#@+node:ekr.20070627082044.210:@test colorizer erlang
if g.unitTesting:
    p = c.currentPosition().firstChild()

    c.beginUpdate()
    try:
        c.selectVnode(p) # Sets body text.
        val = c.frame.body.colorizer.colorize(p,incremental=False)
        assert val=="ok", "colorizer test failed: %s" % p.headString()
    finally:
        c.endUpdate(False)
#@+node:ekr.20070627082044.211:erlang
@language erlang

halt()

-module()
#@nonl
#@-node:ekr.20070627082044.211:erlang
#@-node:ekr.20070627082044.210:@test colorizer erlang
#@+node:ekr.20070627082044.212:@test colorizer forth
if g.unitTesting:
    p = c.currentPosition().firstChild()

    c.beginUpdate()
    try:
        c.selectVnode(p) # Sets body text.
        val = c.frame.body.colorizer.colorize(p,incremental=False)
        assert val=="ok", "colorizer test failed: %s" % p.headString()
    finally:
        c.endUpdate(False)
#@+node:ekr.20070627082044.213:forth
@language forth

\ tiny demo of Leo forth syntax colouring
\ 
\ If you've correctly installed the hacked LeoPy.leo, the below you should see:
\  - the ':' 's' and ';' in blue
\  - the paren-comment in red
\  - the string 'some string' in green

: some-forth-word ( x1 x2 -- x3 )
   s" some string" type cr
;
#@nonl
#@-node:ekr.20070627082044.213:forth
#@-node:ekr.20070627082044.212:@test colorizer forth
#@+node:ekr.20070627082044.216:@test colorizer HTML string bug
if g.unitTesting:
    p = c.currentPosition().firstChild()

    c.beginUpdate()
    try:
        c.selectVnode(p) # Sets body text.
        val = c.frame.body.colorizer.colorize(p,incremental=False)
        assert val=="ok", "colorizer test failed: %s" % p.headString()
    finally:
        c.endUpdate(False)
#@+node:ekr.20070627082044.217:String bug in html
@language html

b = "cd"
d
#@-node:ekr.20070627082044.217:String bug in html
#@-node:ekr.20070627082044.216:@test colorizer HTML string bug
#@+node:ekr.20070627082044.218:@test colorizer HTML1
if g.unitTesting:
    p = c.currentPosition().firstChild()

    c.beginUpdate()
    try:
        c.selectVnode(p) # Sets body text.
        val = c.frame.body.colorizer.colorize(p,incremental=False)
        assert val=="ok", "colorizer test failed: %s" % p.headString()
    finally:
        c.endUpdate(False)
#@+node:ekr.20070627082044.219:HTML1
@language html

<HTML>
<!-- Author: Edward K. Ream, edream@tds.net -->
<HEAD>
  <META NAME="GENERATOR" CONTENT="Microsoft FrontPage 4.0">
  <TITLE> Leo's Home Page </TITLE>
  <META NAME="description" CONTENT="This page describes Leo.
Leo adds powerful outlines to the noweb and CWEB literate programming languages.">
  <META NAME="keywords" CONTENT="LEO, LITERATE PROGRAMMING, OUTLINES, CWEB,
NOWEB, OUTLINES, EDWARD K. REAM, DONALD E. KNUTH, SILVIO LEVY, OPEN SOFTWARE">
</HEAD>
<!-- Last Modified: May 12, 2002 -->
<BODY BGCOLOR="#fffbdc">

<H1 ALIGN=CENTER><a NAME="top"></a><IMG SRC="Blank.gif" width=
"32" height="32" ALIGN="BOTTOM" NATURALSIZEFLAG="3"><IMG SRC="leo.gif" 
WIDTH="32" HEIGHT="32" ALIGN="BOTTOM" NATURALSIZEFLAG="3"><a href="leo_TOC.html#top"><IMG SRC=
"arrow_rt.gif" WIDTH="32" HEIGHT="32" ALIGN="BOTTOM" NATURALSIZEFLAG="3"></a> &nbsp;</H1>

<H1 ALIGN=CENTER> Leo's Home Page</H1>

<p align="center"><a href="http://www.python.org/"><img border="0" src="PythonPowered.gif" width="110" height="44"> </a> <A HREF="http://sourceforge.net/"><IMG SRC="http://sourceforge.net/sflogo.php?group_id=3458&type=1" NATURALSIZEFLAG="0" ALT="SourceForge Logo"></A>&nbsp;&nbsp;&nbsp;
<A HREF="http://sourceforge.net/project/?group_id=3458">Leo at SourceForge</A>&nbsp;&nbsp;
<a href="icons.html"><img border="0" src="LeoCodeGray.gif" width="77" height="42"></a>&nbsp;&nbsp;
<a href="icons.html"><img border="0" src="LeoProse.gif" width="81" height="42"></a>&nbsp;&nbsp;&nbsp;&nbsp;

<H3><A NAME="anchor127554"></A>Summary</H3>

<UL>
  <LI>Leo is a <i> programmer's editor</i>  and a flexible <i>browser</i> for
    projects, programs, classes or data. Leo clarifies design, coding, debugging, testing
  and maintenance.
  <LI>Leo is an <i>outlining editor</i>. Outlines clarify the big picture while
    providing unlimited space for details.
  <LI>Leo
    is a <a HREF="http://www.literateprogramming.com/"><i>literate
    programming</i></a> tool, compatible with <A HREF="http://www.eecs.harvard.edu/~nr/noweb/">noweb</A>
    and <a HREF="http://www-cs-faculty.stanford.edu/~knuth/cweb.html">CWEB</a>.
    Leo enhances any text-based
programming language, from assembly language and C to Java, Python and XML.
  <LI>Leo is also a <i>data organizer</i>. A single Leo outline can generate complex
    data spanning many different files.&nbsp; Leo has been used to manage web sites.
  <LI>Leo is a <i> project manager</i>. Leo provides multiple views
of a project within a single outline. Leo naturally represents tasks that remain
    up-to-date.
  <LI>Leo is fully <i> scriptable</i> using <A HREF="http://www.python.org/">Python</A>
  and saves its files in <A HREF="http://www.w3.org/XML/">XML</A> format.
  <LI>Leo is <i>portable</i>.&nbsp; Leo.py is 100% pure Python and will run on
    any platform supporting <A HREF="http://www.python.org/">Python</A>
    and <a href="http://tcl.activestate.com/">Tk/tcl</a>, including Windows,
    Linux and MacOS X.&nbsp; Leo.exe runs on any Windows platform.
  <LI>Leo is <a href="http://www.opensource.org/"> <i> Open Software</i></a>, distributed under
    the <a href="http://www.python.org/doc/Copyright.html"> Python License</a>.
</UL>

<H3>More Information and downloads</H3>

<ul>
  <LI>An excellent <a href="http://www.3dtree.com/ev/e/sbooks/leo/sbframetoc_ie.htm">online
    tutorial</a> and <A HREF="http://www.jserv.com/jk_orr/xml/leo.htm">Leo resource
  page</A>, both written by <a href="http://www.jserv.com/jk_orr">Joe Orr</a>.
  <LI>My brother's <a href="SpeedReam.html">slashdot
    article about Leo</a>, the best description about why Leo is special.
  <LI><A HREF="testimonials.html#anchor104391">What people are saying about Leo</A>
  <LI><A HREF="leo_TOC.html#anchor964914">Complete users guide</A>
    and
    <A HREF="intro.html#anchor887874">tutorial introduction</A>  with
  screen shots.
  <li><a href="FAQ.html">FAQ</a> and <a href="http://sourceforge.net/forum/?group_id=3458">help and discussion
    forums</a>, preferable to <A HREF="mailto:edream@tds.net">email</A> so others may join
    in.</li>
  <li><a href="icons.html">Icons</a> for bragging about Leo.</li>
</ul>

<a href="http://sourceforge.net/project/showfiles.php?group_id=3458">Download
    Leo</a> from <A HREF="http://sourceforge.net/project/?group_id=3458">Leo's SourceForge
site</A>.

<P ALIGN=left>Leo's author is <A HREF="http://personalpages.tds.net/~edream/index.html">Edward
  K. Ream</A> email: <A HREF="mailto:edream@tds.net">edream@tds.net</A> voice: (608) 231-0766

<HR ALIGN=LEFT>

<p align="center">

<IMG SRC="Blank.gif" ALIGN="left" NATURALSIZEFLAG=
"3" width="34" height="34"><IMG SRC="leo.gif" ALIGN="left" NATURALSIZEFLAG=
"3" width="32" height="32"><a HREF="leo_TOC.html"><IMG SRC="arrow_rt.gif" WIDTH="32"
HEIGHT="32" ALIGN="left" NATURALSIZEFLAG="3">

</BODY>
</HTML>
#@nonl
#@-node:ekr.20070627082044.219:HTML1
#@-node:ekr.20070627082044.218:@test colorizer HTML1
#@+node:ekr.20070627082044.220:@test colorizer HTML2
if g.unitTesting:
    p = c.currentPosition().firstChild()

    c.beginUpdate()
    try:
        c.selectVnode(p) # Sets body text.
        val = c.frame.body.colorizer.colorize(p,incremental=False)
        assert val=="ok", "colorizer test failed: %s" % p.headString()
    finally:
        c.endUpdate(False)
#@+node:ekr.20070627082044.221:HTML2
@language html

<? xml version="1.0">
<!-- test -->
<project name="Converter" default="dist">
</project>"""
#@nonl
#@-node:ekr.20070627082044.221:HTML2
#@-node:ekr.20070627082044.220:@test colorizer HTML2
#@+node:ekr.20070627082044.214:@test colorizer Java
if g.unitTesting:
    p = c.currentPosition().firstChild()

    c.beginUpdate()
    try:
        c.selectVnode(p) # Sets body text.
        val = c.frame.body.colorizer.colorize(p,incremental=False)
        assert val=="ok", "colorizer test failed: %s" % p.headString()
    finally:
        c.endUpdate(False)
#@+node:ekr.20070627082044.215:Java
@ doc part
@c

@language java /* Colored by match_leo_keyword: tag = leoKeyword. */

@whatever /* Colored by java match_following rule: tag = keyword4. */

/** A javadoc: tag = comment3 */

/** <!-- comment --> tag = comment1. */

/** @see tag = label */
#@nonl
#@-node:ekr.20070627082044.215:Java
#@-node:ekr.20070627082044.214:@test colorizer Java
#@+node:ekr.20070627082044.222:@test colorizer LaTex
if g.unitTesting:
    p = c.currentPosition().firstChild()

    c.beginUpdate()
    try:
        c.selectVnode(p) # Sets body text.
        val = c.frame.body.colorizer.colorize(p,incremental=False)
        assert val=="ok", "colorizer test failed: %s" % p.headString()
    finally:
        c.endUpdate(False)
#@+node:ekr.20070627082044.223:LaTex
@language latex

% This is a \LaTeX mode comment.

This is a test of \LaTeX mode.

@ blah blah blah
@c

\c and \LaTeX are latex keywords.

This is a keyword \% not the start of a comment.

More keywords: \@ and \( and \) and \{ and \}

The following should be colored:

\documentclass{report}

The following 2-letter words should be colored, regardless of what follows:

\(\)\{\}\@
\(abc\)abc\{abc\}abc\@abc
#@nonl
#@-node:ekr.20070627082044.223:LaTex
#@-node:ekr.20070627082044.222:@test colorizer LaTex
#@+node:ekr.20070627082044.224:@test colorizer PHP
if g.unitTesting:
    p = c.currentPosition().firstChild()

    c.beginUpdate()
    try:
        c.selectVnode(p) # Sets body text.
        val = c.frame.body.colorizer.colorize(p,incremental=False)
        assert val=="ok", "colorizer test failed: %s" % p.headString()
    finally:
        c.endUpdate(False)
#@+node:ekr.20070627082044.225:PHP
@language php
@ doc
This is a doc part.
@c

and or
array
array()
/* Multi-line comment
*/
this is a test.
__CLASS__
<?php and or array() ?>
<?PHP and or array() ?>
#@nonl
#@-node:ekr.20070627082044.225:PHP
#@-node:ekr.20070627082044.224:@test colorizer PHP
#@+node:ekr.20070627082044.226:@test colorizer plsql
if g.unitTesting:
    p = c.currentPosition().firstChild()

    c.beginUpdate()
    try:
        c.selectVnode(p) # Sets body text.
        val = c.frame.body.colorizer.colorize(p,incremental=False)
        assert val=="ok", "colorizer test failed: %s" % p.headString()
    finally:
        c.endUpdate(False)
#@+node:ekr.20070627082044.227:plsql
@language plsql

"a string"
-- reserved keywords
ABORT,
abort,
ACceSS,
access,
add,
all,
allocate,
alter,
analyze,
and,
any,
archive,
archivelog,
array,
arraylen,
as,
asc,
assert,
assign,
at,
audit,
authorization,
avg,
backup,
base_table,
become,
before,
begin,
between,
binary_integer,
block,
body,
boolean,
by,
cache,
cancel,
cascade,
case,
change,
char,
char_base,
character,
check,
checkpoint,
close,
cluster,
clusters,
cobol,
colauth,
column,
columns,
comment,
commit,
compile,
compress,
connect,
constant,
constraint,
constraints,
contents,
continue,
controlfile,
count,
crash,
create,
current,
currval,
cursor,
cycle,
data_base,
database,
datafile,
date,
dba,
debugoff,
debugon,
dec,
decimal,
declare,
default,
definition,
delay,
delete,
delta,
desc,
digits,
disable,
dismount,
dispose,
distinct,
distinct,
do,
double,
drop,
drop,
dump,
each,
else,
else,
elsif,
enable,
end,
end,
entry,
escape,
events,
except,
exception,
exception_init,
exceptions,
exclusive,
exec,
execute,
exists,
exists,
exit,
explain,
extent,
externally,
false,
fetch,
fetch,
file,
float,
float,
flush,
for,
for,
force,
foreign,
form,
fortran,
found,
freelist,
freelists,
from,
from,
function,
generic,
go,
goto,
grant,
group,
groups,
having,
identified,
if,
immediate,
in,
including,
increment,
index,
indexes,
indicator,
initial,
initrans,
insert,
instance,
int,
integer,
intersect,
into,
is,
key,
language,
layer,
level,
like,
limited,
link,
lists,
lock,
logfile,
long,
loop,
manage,
manual,
max,
maxdatafiles,
maxextents,
maxinstances,
maxlogfiles,
maxloghistory,
maxlogmembers,
maxtrans,
maxvalue,
min,
minextents,
minus,
minvalue,
mlslabel,
mod,
mode,
modify,
module,
mount,
natural,
new,
new,
next,
nextval,
noarchivelog,
noaudit,
nocache,
nocompress,
nocycle,
nomaxvalue,
nominvalue,
none,
noorder,
noresetlogs,
normal,
nosort,
not,
notfound,
nowait,
null,
number,
number_base,
numeric,
of,
off,
offline,
old,
on,
online,
only,
open,
open,
optimal,
option,
or,
order,
others,
out,
own,
package,
package,
parallel,
partition,
pctfree,
pctincrease,
pctused,
plan,
pli,
positive,
pragma,
precision,
primary,
prior,
private,
private,
privileges,
procedure,
procedure,
profile,
public,
quota,
raise,
range,
raw,
read,
real,
record,
recover,
references,
referencing,
release,
remr,
rename,
resetlogs,
resource,
restricted,
return,
reuse,
reverse,
revoke,
role,
roles,
rollback,
row,
rowid,
rowlabel,
rownum,
rows,
rowtype,
run,
savepoint,
schema,
scn,
section,
segment,
select,
select,
separate,
sequence,
session,
set,
set,
share,
shared,
size,
size,
smallint,
smallint,
snapshot,
some,
sort,
space,
sql,
sqlbuf,
sqlcode,
sqlerrm,
sqlerror,
sqlstate,
start,
start,
statement,
statement_id,
statistics,
stddev,
stop,
storage,
subtype,
successful,
sum,
sum,
switch,
synonym,
sysdate,
system,
tabauth,
table,
tables,
tables,
tablespace,
task,
temporary,
terminate,
then,
thread,
time,
to,
tracing,
transaction,
trigger,
triggers,
true,
truncate,
type,
uid,
under,
union,
unique,
unlimited,
until,
update,
use,
user,
using,
validate,
values,
varchar,
varchar2,
variance,
view,
views,
when,
whenever,
where,
while,
with,
work,
write,
xor
#@nonl
#@-node:ekr.20070627082044.227:plsql
#@-node:ekr.20070627082044.226:@test colorizer plsql
#@+node:ekr.20070627082044.228:@test colorizer python.xml (jEdit)
if g.unitTesting:
    p = c.currentPosition().firstChild()

    c.beginUpdate()
    try:
        c.selectVnode(p) # Sets body text.
        val = c.frame.body.colorizer.colorize(p,incremental=False)
        assert val=="ok", "colorizer test failed: %s" % p.headString()
    finally:
        c.endUpdate(False)
#@+node:ekr.20070627082044.229:python.xml
@language html

<?xml version="1.0"?>

<!DOCTYPE MODE SYSTEM "xmode.dtd">
<< remarks >>

<MODE>
    <PROPS>
        <PROPERTY NAME="indentPrevLine" VALUE="\s*.{3,}:\s*(#.*)?" />
        <PROPERTY NAME="lineComment" VALUE="#" />
    </PROPS>
    <RULES ESCAPE="\" IGNORE_CASE="FALSE" HIGHLIGHT_DIGITS="TRUE">
        << comments >>
        << literals >>
        << operators >>
        <MARK_PREVIOUS TYPE="FUNCTION" EXCLUDE_MATCH="TRUE">(</MARK_PREVIOUS>
        << keywords >>
    </RULES>
</MODE>
#@nonl
#@+node:ekr.20070627082044.230:<< remarks >>
<!-- Python mode, by Slava Pestov. Based on PythonTokenMarker by -->
<!-- Jonathan Revusky -->

<!-- Modified 19-Jul-00 by Ivan Frohne to: -->
<!--  (a) implement 'indentOnEnter'; -->
<!--  (b) indent next line automatically after control structures followed -->
<!--	  by ':'; -->
<!--  (c) make """ or ''' multiline quotes TYPE LITERAL2; -->
<!--  (d) add TYPE FUNCTION identified by a following '(' -->
<!--  (e) eliminate the '?' SEQ TYPE ('?' has no meaning in Python); -->
<!--  (f) change the TYPE of 'and', 'or', and 'not' to KEYWORD1; and -->
<!--  (g) add all builtin functions, builtin exceptions, -->
<!--	  builtin type methods, File object methods, and special type -->
<!--	  attributes as TYPE KEYWORD3. -->
#@nonl
#@-node:ekr.20070627082044.230:<< remarks >>
#@+node:ekr.20070627082044.231:<< comments >>
<!-- Comment -->
<EOL_SPAN TYPE="COMMENT1">#</EOL_SPAN>

<!-- Triple-quotes -->
<SPAN TYPE="LITERAL2">
    <BEGIN>"""</BEGIN>
    <END>"""</END>
</SPAN>

<SPAN TYPE="LITERAL2">
    <BEGIN>'''</BEGIN>
    <END>'''</END>
</SPAN>
#@nonl
#@-node:ekr.20070627082044.231:<< comments >>
#@+node:ekr.20070627082044.232:<< literals >>
<!-- Standard literals -->
<SPAN TYPE="LITERAL1">
    <BEGIN>"</BEGIN>
    <END>"</END>
</SPAN>

<SPAN TYPE="LITERAL1">
    <BEGIN>'</BEGIN>
    <END>'</END>
</SPAN>
#@-node:ekr.20070627082044.232:<< literals >>
#@+node:ekr.20070627082044.233:<< operators >>
<SEQ TYPE="OPERATOR">=</SEQ>
<SEQ TYPE="OPERATOR">!</SEQ>
<SEQ TYPE="OPERATOR">&gt;=</SEQ>
<SEQ TYPE="OPERATOR">&lt;=</SEQ>
<SEQ TYPE="OPERATOR">+</SEQ>
<SEQ TYPE="OPERATOR">-</SEQ>
<SEQ TYPE="OPERATOR">/</SEQ>
<SEQ TYPE="OPERATOR">*</SEQ>
<SEQ TYPE="OPERATOR">&gt;</SEQ>
<SEQ TYPE="OPERATOR">&lt;</SEQ>
<SEQ TYPE="OPERATOR">%</SEQ>
<SEQ TYPE="OPERATOR">&amp;</SEQ>
<SEQ TYPE="OPERATOR">|</SEQ>
<SEQ TYPE="OPERATOR">^</SEQ>
<SEQ TYPE="OPERATOR">~</SEQ>
#@nonl
#@-node:ekr.20070627082044.233:<< operators >>
#@+node:ekr.20070627082044.234:<< keywords >>
<KEYWORDS>
    << reserved words >>
    << builtins >>
    << exceptions >>
    << types >>
</KEYWORDS>
#@nonl
#@+node:ekr.20070627082044.235:<< reserved words >>
<!--  Reserved Words  -->
<KEYWORD1>and</KEYWORD1>
<KEYWORD1>as</KEYWORD1>
<KEYWORD1>assert</KEYWORD1>
<KEYWORD1>break</KEYWORD1>
<KEYWORD1>class</KEYWORD1>
<KEYWORD1>continue</KEYWORD1>
<KEYWORD1>def</KEYWORD1>
<KEYWORD1>del</KEYWORD1>
<KEYWORD1>elif</KEYWORD1>
<KEYWORD1>else</KEYWORD1>
<KEYWORD1>except</KEYWORD1>
<KEYWORD1>exec</KEYWORD1>
<KEYWORD1>finally</KEYWORD1>
<KEYWORD1>for</KEYWORD1>
<KEYWORD1>from</KEYWORD1>
<KEYWORD1>global</KEYWORD1>
<KEYWORD1>if</KEYWORD1>
<KEYWORD1>import</KEYWORD1>
<KEYWORD1>in</KEYWORD1>
<KEYWORD1>is</KEYWORD1>
<KEYWORD1>lambda</KEYWORD1>
<KEYWORD1>not</KEYWORD1>
<KEYWORD1>or</KEYWORD1>
<KEYWORD1>pass</KEYWORD1>
<KEYWORD1>print</KEYWORD1>
<KEYWORD1>raise</KEYWORD1>
<KEYWORD1>return</KEYWORD1>
<KEYWORD1>try</KEYWORD1>
<KEYWORD1>while</KEYWORD1>
<KEYWORD1>yield</KEYWORD1>
#@nonl
#@-node:ekr.20070627082044.235:<< reserved words >>
#@+node:ekr.20070627082044.236:<< builtins >>
<!-- builtins -->
<KEYWORD2>abs</KEYWORD2>
<KEYWORD2>apply</KEYWORD2>
<KEYWORD2>bool</KEYWORD2>
<KEYWORD2>buffer</KEYWORD2>
<KEYWORD2>callable</KEYWORD2>
<KEYWORD2>chr</KEYWORD2>
<KEYWORD2>classmethod</KEYWORD2>
<KEYWORD2>cmp</KEYWORD2>
<KEYWORD2>coerce</KEYWORD2>
<KEYWORD2>compile</KEYWORD2>
<KEYWORD2>complex</KEYWORD2>
<KEYWORD2>delattr</KEYWORD2>
<KEYWORD2>dict</KEYWORD2>
<KEYWORD2>dir</KEYWORD2>
<KEYWORD2>divmod</KEYWORD2>
<KEYWORD2>eval</KEYWORD2>
<KEYWORD2>execfile</KEYWORD2>
<KEYWORD2>file</KEYWORD2>
<KEYWORD2>filter</KEYWORD2>
<KEYWORD2>float</KEYWORD2>
<KEYWORD2>getattr</KEYWORD2>
<KEYWORD2>globals</KEYWORD2>
<KEYWORD2>hasattr</KEYWORD2>
<KEYWORD2>hash</KEYWORD2>
<KEYWORD2>hex</KEYWORD2>
<KEYWORD2>id</KEYWORD2>
<KEYWORD2>input</KEYWORD2>
<KEYWORD2>int</KEYWORD2>
<KEYWORD2>intern</KEYWORD2>
<KEYWORD2>isinstance</KEYWORD2>
<KEYWORD2>issubclass</KEYWORD2>
<KEYWORD2>iter</KEYWORD2>
<KEYWORD2>len</KEYWORD2>
<KEYWORD2>list</KEYWORD2>
<KEYWORD2>locals</KEYWORD2>
<KEYWORD2>long</KEYWORD2>
<KEYWORD2>map</KEYWORD2>
<KEYWORD2>max</KEYWORD2>
<KEYWORD2>min</KEYWORD2>
<KEYWORD2>object</KEYWORD2>
<KEYWORD2>oct</KEYWORD2>
<KEYWORD2>open</KEYWORD2>
<KEYWORD2>ord</KEYWORD2>
<KEYWORD2>pow</KEYWORD2>
<KEYWORD2>property</KEYWORD2>
<KEYWORD2>range</KEYWORD2>
<KEYWORD2>raw_input</KEYWORD2>
<KEYWORD2>reduce</KEYWORD2>
<KEYWORD2>reload</KEYWORD2>
<KEYWORD2>repr</KEYWORD2>
<KEYWORD2>round</KEYWORD2>
<KEYWORD2>setattr</KEYWORD2>
<KEYWORD2>slice</KEYWORD2>
<KEYWORD2>staticmethod</KEYWORD2>
<KEYWORD2>str</KEYWORD2>
<KEYWORD2>super</KEYWORD2>
<KEYWORD2>tuple</KEYWORD2>
<KEYWORD2>type</KEYWORD2>
<KEYWORD2>unichr</KEYWORD2>
<KEYWORD2>unicode</KEYWORD2>
<KEYWORD2>vars</KEYWORD2>
<KEYWORD2>xrange</KEYWORD2>
<KEYWORD2>zip</KEYWORD2>
#@nonl
#@-node:ekr.20070627082044.236:<< builtins >>
#@+node:ekr.20070627082044.237:<< exceptions >>
<!-- exceptions -->
<KEYWORD3>ArithmeticError</KEYWORD3>
<KEYWORD3>AssertionError</KEYWORD3>
<KEYWORD3>AttributeError</KEYWORD3>
<KEYWORD3>DeprecationWarning</KEYWORD3>
<KEYWORD3>EOFError</KEYWORD3>
<KEYWORD3>EnvironmentError</KEYWORD3>
<KEYWORD3>Exception</KEYWORD3>
<KEYWORD3>FloatingPointError</KEYWORD3>
<KEYWORD3>IOError</KEYWORD3>
<KEYWORD3>ImportError</KEYWORD3>
<KEYWORD3>IndentationError</KEYWORD3>
<KEYWORD3>IndexError</KEYWORD3>
<KEYWORD3>KeyError</KEYWORD3>
<KEYWORD3>KeyboardInterrupt</KEYWORD3>
<KEYWORD3>LookupError</KEYWORD3>
<KEYWORD3>MemoryError</KEYWORD3>
<KEYWORD3>NameError</KEYWORD3>
<KEYWORD3>NotImplemented</KEYWORD3>
<KEYWORD3>NotImplementedError</KEYWORD3>
<KEYWORD3>OSError</KEYWORD3>
<KEYWORD3>OverflowError</KEYWORD3>
<KEYWORD3>OverflowWarning</KEYWORD3>
<KEYWORD3>ReferenceError</KEYWORD3>
<KEYWORD3>RuntimeError</KEYWORD3>
<KEYWORD3>RuntimeWarning</KEYWORD3>
<KEYWORD3>StandardError</KEYWORD3>
<KEYWORD3>StopIteration</KEYWORD3>
<KEYWORD3>SyntaxError</KEYWORD3>
<KEYWORD3>SyntaxWarning</KEYWORD3>
<KEYWORD3>SystemError</KEYWORD3>
<KEYWORD3>SystemExit</KEYWORD3>
<KEYWORD3>TabError</KEYWORD3>
<KEYWORD3>TypeError</KEYWORD3>
<KEYWORD3>UnboundLocalError</KEYWORD3>
<KEYWORD3>UnicodeError</KEYWORD3>
<KEYWORD3>UserWarning</KEYWORD3>
<KEYWORD3>ValueError</KEYWORD3>
<KEYWORD3>Warning</KEYWORD3>
<KEYWORD3>WindowsError</KEYWORD3>
<KEYWORD3>ZeroDivisionError</KEYWORD3>
#@nonl
#@-node:ekr.20070627082044.237:<< exceptions >>
#@+node:ekr.20070627082044.238:<< types >>
<!-- types (from types module) -->
<KEYWORD3>BufferType</KEYWORD3>
<KEYWORD3>BuiltinFunctionType</KEYWORD3>
<KEYWORD3>BuiltinMethodType</KEYWORD3>
<KEYWORD3>ClassType</KEYWORD3>
<KEYWORD3>CodeType</KEYWORD3>
<KEYWORD3>ComplexType</KEYWORD3>
<KEYWORD3>DictProxyType</KEYWORD3>
<KEYWORD3>DictType</KEYWORD3>
<KEYWORD3>DictionaryType</KEYWORD3>
<KEYWORD3>EllipsisType</KEYWORD3>
<KEYWORD3>FileType</KEYWORD3>
<KEYWORD3>FloatType</KEYWORD3>
<KEYWORD3>FrameType</KEYWORD3>
<KEYWORD3>FunctionType</KEYWORD3>
<KEYWORD3>GeneratorType</KEYWORD3>
<KEYWORD3>InstanceType</KEYWORD3>
<KEYWORD3>IntType</KEYWORD3>
<KEYWORD3>LambdaType</KEYWORD3>
<KEYWORD3>ListType</KEYWORD3>
<KEYWORD3>LongType</KEYWORD3>
<KEYWORD3>MethodType</KEYWORD3>
<KEYWORD3>ModuleType</KEYWORD3>
<KEYWORD3>NoneType</KEYWORD3>
<KEYWORD3>ObjectType</KEYWORD3>
<KEYWORD3>SliceType</KEYWORD3>
<KEYWORD3>StringType</KEYWORD3>
<KEYWORD3>StringTypes</KEYWORD3>
<KEYWORD3>TracebackType</KEYWORD3>
<KEYWORD3>TupleType</KEYWORD3>
<KEYWORD3>TypeType</KEYWORD3>
<KEYWORD3>UnboundMethodType</KEYWORD3>
<KEYWORD3>UnicodeType</KEYWORD3>
<KEYWORD3>XRangeType</KEYWORD3>

<KEYWORD3>False</KEYWORD3>
<KEYWORD3>None</KEYWORD3>
<KEYWORD3>True</KEYWORD3>

<KEYWORD3>__abs__</KEYWORD3>
<KEYWORD3>__add__</KEYWORD3>
<KEYWORD3>__all__</KEYWORD3>
<KEYWORD3>__author__</KEYWORD3>
<KEYWORD3>__bases__</KEYWORD3>
<KEYWORD3>__builtins__</KEYWORD3>
<KEYWORD3>__call__</KEYWORD3>
<KEYWORD3>__class__</KEYWORD3>
<KEYWORD3>__cmp__</KEYWORD3>
<KEYWORD3>__coerce__</KEYWORD3>
<KEYWORD3>__contains__</KEYWORD3>
<KEYWORD3>__debug__</KEYWORD3>
<KEYWORD3>__del__</KEYWORD3>
<KEYWORD3>__delattr__</KEYWORD3>
<KEYWORD3>__delitem__</KEYWORD3>
<KEYWORD3>__delslice__</KEYWORD3>
<KEYWORD3>__dict__</KEYWORD3>
<KEYWORD3>__div__</KEYWORD3>
<KEYWORD3>__divmod__</KEYWORD3>
<KEYWORD3>__doc__</KEYWORD3>
<KEYWORD3>__eq__</KEYWORD3>
<KEYWORD3>__file__</KEYWORD3>
<KEYWORD3>__float__</KEYWORD3>
<KEYWORD3>__floordiv__</KEYWORD3>
<KEYWORD3>__future__</KEYWORD3>
<KEYWORD3>__ge__</KEYWORD3>
<KEYWORD3>__getattr__</KEYWORD3>
<KEYWORD3>__getattribute__</KEYWORD3>
<KEYWORD3>__getitem__</KEYWORD3>
<KEYWORD3>__getslice__</KEYWORD3>
<KEYWORD3>__gt__</KEYWORD3>
<KEYWORD3>__hash__</KEYWORD3>
<KEYWORD3>__hex__</KEYWORD3>
<KEYWORD3>__iadd__</KEYWORD3>
<KEYWORD3>__import__</KEYWORD3>
<KEYWORD3>__imul__</KEYWORD3>
<KEYWORD3>__init__</KEYWORD3>
<KEYWORD3>__int__</KEYWORD3>
<KEYWORD3>__invert__</KEYWORD3>
<KEYWORD3>__iter__</KEYWORD3>
<KEYWORD3>__le__</KEYWORD3>
<KEYWORD3>__len__</KEYWORD3>
<KEYWORD3>__long__</KEYWORD3>
<KEYWORD3>__lshift__</KEYWORD3>
<KEYWORD3>__lt__</KEYWORD3>
<KEYWORD3>__members__</KEYWORD3>
<KEYWORD3>__metaclass__</KEYWORD3>
<KEYWORD3>__mod__</KEYWORD3>
<KEYWORD3>__mro__</KEYWORD3>
<KEYWORD3>__mul__</KEYWORD3>
<KEYWORD3>__name__</KEYWORD3>
<KEYWORD3>__ne__</KEYWORD3>
<KEYWORD3>__neg__</KEYWORD3>
<KEYWORD3>__new__</KEYWORD3>
<KEYWORD3>__nonzero__</KEYWORD3>
<KEYWORD3>__oct__</KEYWORD3>
<KEYWORD3>__or__</KEYWORD3>
<KEYWORD3>__path__</KEYWORD3>
<KEYWORD3>__pos__</KEYWORD3>
<KEYWORD3>__pow__</KEYWORD3>
<KEYWORD3>__radd__</KEYWORD3>
<KEYWORD3>__rdiv__</KEYWORD3>
<KEYWORD3>__rdivmod__</KEYWORD3>
<KEYWORD3>__reduce__</KEYWORD3>
<KEYWORD3>__repr__</KEYWORD3>
<KEYWORD3>__rfloordiv__</KEYWORD3>
<KEYWORD3>__rlshift__</KEYWORD3>
<KEYWORD3>__rmod__</KEYWORD3>
<KEYWORD3>__rmul__</KEYWORD3>
<KEYWORD3>__ror__</KEYWORD3>
<KEYWORD3>__rpow__</KEYWORD3>
<KEYWORD3>__rrshift__</KEYWORD3>
<KEYWORD3>__rsub__</KEYWORD3>
<KEYWORD3>__rtruediv__</KEYWORD3>
<KEYWORD3>__rxor__</KEYWORD3>
<KEYWORD3>__setattr__</KEYWORD3>
<KEYWORD3>__setitem__</KEYWORD3>
<KEYWORD3>__setslice__</KEYWORD3>
<KEYWORD3>__self__</KEYWORD3>
<KEYWORD3>__slots__</KEYWORD3>
<KEYWORD3>__str__</KEYWORD3>
<KEYWORD3>__sub__</KEYWORD3>
<KEYWORD3>__truediv__</KEYWORD3>
<KEYWORD3>__version__</KEYWORD3>
<KEYWORD3>__xor__</KEYWORD3>
#@nonl
#@-node:ekr.20070627082044.238:<< types >>
#@-node:ekr.20070627082044.234:<< keywords >>
#@-node:ekr.20070627082044.229:python.xml
#@-node:ekr.20070627082044.228:@test colorizer python.xml (jEdit)
#@+node:ekr.20070627082044.239:@test colorizer Python1
if g.unitTesting:
    p = c.currentPosition().firstChild()

    c.beginUpdate()
    try:
        c.selectVnode(p) # Sets body text.
        val = c.frame.body.colorizer.colorize(p,incremental=False)
        assert val=="ok", "colorizer test failed: %s" % p.headString()
    finally:
        c.endUpdate(False)
#@+node:ekr.20070627082044.240:Python1
@language plsql

"a string"
-- reserved keywords
abort
accept,
access,
add,
admin,
after,
all,
allocate,
alter,
analyze,
and,
any,
archive,
archivelog,
array,
arraylen,
as,
asc,
assert,
assign,
at,
audit,
authorization,
avg,
backup,
base_table,
become,
before,
begin,
between,
binary_integer,
block,
body,
boolean,
by,
cache,
cancel,
cascade,
case,
change,
char,
char_base,
character,
check,
checkpoint,
close,
cluster,
clusters,
cobol,
colauth,
column,
columns,
comment,
commit,
compile,
compress,
connect,
constant,
constraint,
constraints,
contents,
continue,
controlfile,
count,
crash,
create,
current,
currval,
cursor,
cycle,
data_base,
database,
datafile,
date,
dba,
debugoff,
debugon,
dec,
decimal,
declare,
default,
definition,
delay,
delete,
delta,
desc,
digits,
disable,
dismount,
dispose,
distinct,
distinct,
do,
double,
drop,
drop,
dump,
each,
else,
else,
elsif,
enable,
end,
end,
entry,
escape,
events,
except,
exception,
exception_init,
exceptions,
exclusive,
exec,
execute,
exists,
exists,
exit,
explain,
extent,
externally,
false,
fetch,
fetch,
file,
float,
float,
flush,
for,
for,
force,
foreign,
form,
fortran,
found,
freelist,
freelists,
from,
from,
function,
generic,
go,
goto,
grant,
group,
groups,
having,
identified,
if,
immediate,
in,
including,
increment,
index,
indexes,
indicator,
initial,
initrans,
insert,
instance,
int,
integer,
intersect,
into,
is,
key,
language,
layer,
level,
like,
limited,
link,
lists,
lock,
logfile,
long,
loop,
manage,
manual,
max,
maxdatafiles,
maxextents,
maxinstances,
maxlogfiles,
maxloghistory,
maxlogmembers,
maxtrans,
maxvalue,
min,
minextents,
minus,
minvalue,
mlslabel,
mod,
mode,
modify,
module,
mount,
natural,
new,
new,
next,
nextval,
noarchivelog,
noaudit,
nocache,
nocompress,
nocycle,
nomaxvalue,
nominvalue,
none,
noorder,
noresetlogs,
normal,
nosort,
not,
notfound,
nowait,
null,
number,
number_base,
numeric,
of,
off,
offline,
old,
on,
online,
only,
open,
open,
optimal,
option,
or,
order,
others,
out,
own,
package,
package,
parallel,
partition,
pctfree,
pctincrease,
pctused,
plan,
pli,
positive,
pragma,
precision,
primary,
prior,
private,
private,
privileges,
procedure,
procedure,
profile,
public,
quota,
raise,
range,
raw,
read,
real,
record,
recover,
references,
referencing,
release,
remr,
rename,
resetlogs,
resource,
restricted,
return,
reuse,
reverse,
revoke,
role,
roles,
rollback,
row,
rowid,
rowlabel,
rownum,
rows,
rowtype,
run,
savepoint,
schema,
scn,
section,
segment,
select,
select,
separate,
sequence,
session,
set,
set,
share,
shared,
size,
size,
smallint,
smallint,
snapshot,
some,
sort,
space,
sql,
sqlbuf,
sqlcode,
sqlerrm,
sqlerror,
sqlstate,
start,
start,
statement,
statement_id,
statistics,
stddev,
stop,
storage,
subtype,
successful,
sum,
sum,
switch,
synonym,
sysdate,
system,
tabauth,
table,
tables,
tables,
tablespace,
task,
temporary,
terminate,
then,
thread,
time,
to,
tracing,
transaction,
trigger,
triggers,
true,
truncate,
type,
uid,
under,
union,
unique,
unlimited,
until,
update,
use,
user,
using,
validate,
values,
varchar,
varchar2,
variance,
view,
views,
when,
whenever,
where,
while,
with,
work,
write,
xor
#@nonl
#@-node:ekr.20070627082044.240:Python1
#@-node:ekr.20070627082044.239:@test colorizer Python1
#@+node:ekr.20070627082044.241:@test colorizer Python2
if g.unitTesting:
    p = c.currentPosition().firstChild()

    c.beginUpdate()
    try:
        c.selectVnode(p) # Sets body text.
        val = c.frame.body.colorizer.colorize(p,incremental=False)
        assert val=="ok", "colorizer test failed: %s" % p.headString()
    finally:
        c.endUpdate(False)
#@+node:ekr.20070627082044.242:Python2
"""This creates a free-floating copy of v's tree for undo.
The copied trees must use different tnodes than the original."""

def copyTree(self,root):

    c = self
    # Create the root vnode.
    result = v = leoNodes.vnode(c,root.t)
    # Copy the headline and icon values v.copyNode(root,v)
    # Copy the rest of tree.
    v.copyTree(root,v)
    # Replace all tnodes in v by copies.
    assert(v.nodeAfterTree() == None)
    while v:
        v.t = leoNodes.tnode(0, v.t.bodyString)
        v = v.threadNext()
    return result
#@nonl
#@-node:ekr.20070627082044.242:Python2
#@-node:ekr.20070627082044.241:@test colorizer Python2
#@+node:ekr.20070627082044.243:@test colorizer r
if g.unitTesting:
    p = c.currentPosition().firstChild()

    c.beginUpdate()
    try:
        c.selectVnode(p) # Sets body text.
        val = c.frame.body.colorizer.colorize(p,incremental=False)
        assert val=="ok", "colorizer test failed: %s" % p.headString()
    finally:
        c.endUpdate(False)
#@+node:ekr.20070627082044.244:r
@language r

x <- rnorm(10) 

vv <- function(z) return(z) 

def python_funct(uu): 
return uu
#@nonl
#@-node:ekr.20070627082044.244:r
#@-node:ekr.20070627082044.243:@test colorizer r
#@+node:ekr.20070627082044.245:@test colorizer rapidq
if g.unitTesting:
    p = c.currentPosition().firstChild()

    c.beginUpdate()
    try:
        c.selectVnode(p) # Sets body text.
        val = c.frame.body.colorizer.colorize(p,incremental=False)
        assert val=="ok", "colorizer test failed: %s" % p.headString()
    finally:
        c.endUpdate(False)
#@+node:ekr.20070627082044.246:rapidq
' New in 4.2.
@language rapidq
' a comment.

$APPTYPE,$DEFINE,$ELSE,$ENDIF,$ESCAPECHARS,$IFDEF,$IFNDEF,
$INCLUDE,$MACRO,$OPTIMIZE,$OPTION,$RESOURCE,$TYPECHECK,$UNDEF,
ABS,ACOS,ALIAS,AND,AS,ASC,ASIN,ATAN,ATN,BIN$,BIND,BYTE,
CALL,CALLBACK,CALLFUNC,CASE,CEIL,CHDIR,CHDRIVE,CHR$,CINT,
CLNG,CLS,CODEPTR,COMMAND$,COMMANDCOUNT,CONSOLE,CONST,CONSTRUCTOR,
CONVBASE$,COS,CREATE,CSRLIN,CURDIR$,DATA,DATE$,DEC,DECLARE,
DEFBYTE,DEFDBL,DEFDWORD,DEFINT,DEFLNG,DEFSHORT,DEFSNG,DEFSTR,
DEFWORD,DELETE$,DIM,DIR$,DIREXISTS,DO,DOEVENTS,DOUBLE,DWORD,
ELSE,ELSEIF,END,ENVIRON,ENVIRON$,EVENT,EXIT,EXP,EXTENDS,
EXTRACTRESOURCE,FIELD$,FILEEXISTS,FIX,FLOOR,FOR,FORMAT$,FRAC,
FUNCTION,FUNCTIONI,GET$,GOSUB,GOTO,HEX$,IF,INC,INITARRAY,
INKEY$,INP,INPUT,INPUT$,INPUTHANDLE,INSERT$,INSTR,INT,INTEGER,
INV,IS,ISCONSOLE,KILL,KILLMESSAGE,LBOUND,LCASE$,LEFT$,LEN,
LFLUSH,LIB,LIBRARYINST,LOCATE,LOG,LONG,LOOP,LPRINT,LTRIM$,
MEMCMP,MESSAGEBOX,MESSAGEDLG,MID$,MKDIR,MOD,MOUSEX,MOUSEY,
NEXT,NOT,OFF,ON,OR,OUT,OUTPUTHANDLE,PARAMSTR$,PARAMSTRCOUNT,
PARAMVAL,PARAMVALCOUNT,PCOPY,PEEK,PLAYWAV,POKE,POS,POSTMESSAGE,
PRINT,PROPERTY,QUICKSORT,RANDOMIZE,REDIM,RENAME,REPLACE$,
REPLACESUBSTR$,RESOURCE,RESOURCECOUNT,RESTORE,RESULT,RETURN,
REVERSE$,RGB,RIGHT$,RINSTR,RMDIR,RND,ROUND,RTRIM$,RUN,
SCREEN,SELECT,SENDER,SENDMESSAGE,SETCONSOLETITLE,SGN,SHELL,
SHL,SHORT,SHOWMESSAGE,SHR,SIN,SINGLE,SIZEOF,SLEEP,SOUND,
SPACE$,SQR,STACK,STATIC,STEP,STR$,STRF$,STRING,STRING$,
SUB,SUBI,SWAP,TALLY,TAN,THEN,TIME$,TIMER,TO,TYPE,UBOUND,
UCASE$,UNLOADLIBRARY,UNTIL,VAL,VARIANT,VARPTR,VARPTR$,VARTYPE,
WEND,WHILE,WITH,WORD,XOR
#@nonl
#@-node:ekr.20070627082044.246:rapidq
#@-node:ekr.20070627082044.245:@test colorizer rapidq
#@+node:ekr.20070627082044.247:@test colorizer Rebol
if g.unitTesting:
    p = c.currentPosition().firstChild()

    c.beginUpdate()
    try:
        c.selectVnode(p) # Sets body text.
        val = c.frame.body.colorizer.colorize(p,incremental=False)
        assert val=="ok", "colorizer test failed: %s" % p.headString()
    finally:
        c.endUpdate(False)
#@+node:ekr.20070627082044.248:Rebol
@language rebol

; a comment
about abs absolute add alert alias all alter and and~ any append arccosine arcsine arctangent array ask at  
back bind boot-prefs break browse build-port build-tag  
call caret-to-offset catch center-face change change-dir charset checksum choose clean-path clear clear-fields close comment complement compose compress confirm continue-post context copy cosine create-request crypt cvs-date cvs-version  
debase decode-cgi decode-url decompress deflag-face dehex delete demo desktop detab dh-compute-key dh-generate-key dh-make-key difference dirize disarm dispatch divide do do-boot do-events do-face do-face-alt does dsa-generate-key dsa-make-key dsa-make-signature dsa-verify-signature  
echo editor either else emailer enbase entab exclude exit exp extract 
fifth find find-key-face find-window flag-face first flash focus for forall foreach forever form forskip fourth free func function  
get get-modes get-net-info get-style  
halt has head help hide hide-popup  
if import-email in inform input insert insert-event-func intersect 
join 
last launch launch-thru layout license list-dir load load-image load-prefs load-thru log-10 log-2 log-e loop lowercase  
make make-dir make-face max maximum maximum-of min minimum minimum-of mold multiply  
negate net-error next not now  
offset-to-caret open open-events or or~ 
parse parse-email-addrs parse-header parse-header-date parse-xml path-thru pick poke power prin print probe protect protect-system  
q query quit  
random read read-io read-net read-thru reboot recycle reduce reform rejoin remainder remold remove remove-event-func rename repeat repend replace request request-color request-date request-download request-file request-list request-pass request-text resend return reverse rsa-encrypt rsa-generate-key rsa-make-key 
save save-prefs save-user scroll-para second secure select send send-and-check set set-modes set-font set-net set-para set-style set-user set-user-name show show-popup sine size-text skip sort source split-path square-root stylize subtract switch  
tail tangent textinfo third throw throw-on-error to to-binary to-bitset to-block to-char to-date to-decimal to-email to-event to-file to-get-word to-hash to-hex to-idate to-image to-integer to-issue to-list to-lit-path to-lit-word to-local-file to-logic to-money to-none to-pair to-paren to-path to-rebol-file to-refinement to-set-path to-set-word to-string to-tag to-time to-tuple to-url to-word trace trim try  
unfocus union unique uninstall unprotect unset until unview update upgrade uppercase usage use  
vbug view view-install view-prefs  
wait what what-dir while write write-io  
xor xor~  
action! any-block! any-function! any-string! any-type! any-word!  
binary! bitset! block!  
char!  
datatype! date! decimal! 
email! error! event!  
file! function!  
get-word!  
hash!  
image! integer! issue!  
library! list! lit-path! lit-word! logic!  
money!  
native! none! number!  
object! op!  
pair! paren! path! port!  
refinement! routine!  
series! set-path! set-word! string! struct! symbol!  
tag! time! tuple!  
unset! url!  
word!  
any-block? any-function? any-string? any-type? any-word?  
binary? bitset? block?  
char? connected? crypt-strength? 
datatype? date? decimal? dir?  
email? empty? equal? error? even? event? exists? exists-key?
file? flag-face? found? function?  
get-word? greater-or-equal? greater?  
hash? head?  
image? in-window? index? info? input? inside? integer? issue?  
length? lesser-or-equal? lesser? library? link-app? link? list? lit-path? lit-word? logic?  
modified? money?  
native? negative? none? not-equal? number?  
object? odd? offset? op? outside?  
pair? paren? path? port? positive?  
refinement? routine?  
same? screen-offset? script? series? set-path? set-word? size? span? strict-equal? strict-not-equal? string? struct?  
tag? tail? time? tuple? type?  
unset? url?  
value? view? 
within? word?  
zero?
#@nonl
#@-node:ekr.20070627082044.248:Rebol
#@-node:ekr.20070627082044.247:@test colorizer Rebol
#@+node:ekr.20070627082044.249:@test colorizer shell
if g.unitTesting:
    p = c.currentPosition().firstChild()

    c.beginUpdate()
    try:
        c.selectVnode(p) # Sets body text.
        val = c.frame.body.colorizer.colorize(p,incremental=False)
        assert val=="ok", "colorizer test failed: %s" % p.headString()
    finally:
        c.endUpdate(False)
#@+node:ekr.20070627082044.250:shell
# New in 4.2.

@language shell

# comment
$# not a comment
break
case,continue,
do,done
elif,else,esac
fi,for
if,in
return,
then
until
while,

cd,chdir,eval,exec,
exit,kill,newgrp,pwd,read,readonly,
shift,test,trap,ulimit,
umask,wait
#@nonl
#@-node:ekr.20070627082044.250:shell
#@-node:ekr.20070627082044.249:@test colorizer shell
#@+node:ekr.20070627082044.251:@test colorizer tex.xml (jEdit)
if g.unitTesting:
    p = c.currentPosition().firstChild()

    c.beginUpdate()
    try:
        c.selectVnode(p) # Sets body text.
        val = c.frame.body.colorizer.colorize(p,incremental=False)
        assert val=="ok", "colorizer test failed: %s" % p.headString()
    finally:
        c.endUpdate(False)
#@+node:ekr.20070627082044.252:tex.xml
@language html

<!-- ekr uses the MARK_FOLLOWING to mark _anything_ after \ -->

<?xml version="1.0"?>

<!DOCTYPE MODE SYSTEM "xmode.dtd">

<MODE>
    <PROPS>
        <PROPERTY NAME="lineComment" VALUE="%" />
    </PROPS>

    <RULES>
        << general rules >>
    </RULES>

    <RULES SET="MATH" DEFAULT="MARKUP">
        << math rules >>
    </RULES>
</MODE>
#@nonl
#@+node:ekr.20070627082044.253:<< general rules >>
<!-- $$...$$ -->
<SPAN TYPE="MARKUP" DELEGATE="MATH">
    <BEGIN>$$</BEGIN>
    <END>$$</END>
</SPAN>

<!-- $...$ -->
<SPAN TYPE="MARKUP" DELEGATE="MATH">
    <BEGIN>$</BEGIN>
    <END>$</END>
</SPAN>

<!-- \[...\] (LaTeX math mode) -->
<SPAN TYPE="MARKUP" DELEGATE="MATH">
    <BEGIN>\[</BEGIN>
    <END>\]</END>
</SPAN>

<!-- some commands must be handled specially -->
<SEQ TYPE="KEYWORD1">\$</SEQ>
<SEQ TYPE="KEYWORD1">\\</SEQ>
<SEQ TYPE="KEYWORD1">\%</SEQ>

<!-- \... commands -->
<MARK_FOLLOWING TYPE="KEYWORD1">\</MARK_FOLLOWING>

<!-- comments -->
<EOL_SPAN TYPE="COMMENT1">%</EOL_SPAN>

<!-- word separators -->
<SEQ TYPE="OPERATOR">{</SEQ>
<SEQ TYPE="OPERATOR">}</SEQ>
<SEQ TYPE="OPERATOR">[</SEQ>
<SEQ TYPE="OPERATOR">]</SEQ>
#@nonl
#@-node:ekr.20070627082044.253:<< general rules >>
#@+node:ekr.20070627082044.254:<< math rules >>
<!-- some commands must be handled specially -->
<SEQ TYPE="KEYWORD3">\$</SEQ>
<SEQ TYPE="KEYWORD3">\\</SEQ>
<SEQ TYPE="KEYWORD3">\%</SEQ>

<!-- \... commands -->
<MARK_FOLLOWING TYPE="KEYWORD3">\</MARK_FOLLOWING>

<!-- word separators -->
<SEQ TYPE="KEYWORD2">)</SEQ>
<SEQ TYPE="KEYWORD2">(</SEQ>
<SEQ TYPE="KEYWORD2">{</SEQ>
<SEQ TYPE="KEYWORD2">}</SEQ>
<SEQ TYPE="KEYWORD2">[</SEQ>
<SEQ TYPE="KEYWORD2">]</SEQ>
<SEQ TYPE="KEYWORD2">=</SEQ>
<SEQ TYPE="KEYWORD2">!</SEQ>
<SEQ TYPE="KEYWORD2">+</SEQ>
<SEQ TYPE="KEYWORD2">-</SEQ>
<SEQ TYPE="KEYWORD2">/</SEQ>
<SEQ TYPE="KEYWORD2">*</SEQ>
<SEQ TYPE="KEYWORD2">&gt;</SEQ>
<SEQ TYPE="KEYWORD2">&lt;</SEQ>
<SEQ TYPE="KEYWORD2">&amp;</SEQ>
<SEQ TYPE="KEYWORD2">|</SEQ>
<SEQ TYPE="KEYWORD2">^</SEQ>
<SEQ TYPE="KEYWORD2">~</SEQ>
<SEQ TYPE="KEYWORD2">.</SEQ>
<SEQ TYPE="KEYWORD2">,</SEQ>
<SEQ TYPE="KEYWORD2">;</SEQ>
<SEQ TYPE="KEYWORD2">?</SEQ>
<SEQ TYPE="KEYWORD2">:</SEQ>
<SEQ TYPE="KEYWORD2">'</SEQ>
<SEQ TYPE="KEYWORD2">"</SEQ>
<SEQ TYPE="KEYWORD2">`</SEQ>

<!-- comments -->
<EOL_SPAN TYPE="COMMENT1">%</EOL_SPAN>
#@nonl
#@-node:ekr.20070627082044.254:<< math rules >>
#@-node:ekr.20070627082044.252:tex.xml
#@-node:ekr.20070627082044.251:@test colorizer tex.xml (jEdit)
#@+node:ekr.20070627082044.257:@test colorizer wikiTest1
if g.unitTesting:
    p = c.currentPosition().firstChild()

    c.beginUpdate()
    try:
        c.selectVnode(p) # Sets body text.
        val = c.frame.body.colorizer.colorize(p,incremental=False)
        assert val=="ok", "colorizer test failed: %s" % p.headString()
    finally:
        c.endUpdate(False)
#@+node:ekr.20070627082044.258:wikiTest1
# both color_markup & add_directives plugins must be enabled.

@markup wiki
@language python

""" {picture file=../Icons/Leoapp.GIF}this """ # Problems with correct indexing following a graphic.

""" {picture file=../Icons/Leoapp.GIF}this """ # two copies work.

abc

""" {picture file=../Icons/Leodoc.GIF} """ # xyz

""" continued
string"""

@ ''ab'' __xxx__ ''wx'' __xyz__
@c

# /* ''ab'' __xxx__ ''wx'' __xyz__ */

# Test

""" ''' """ ''' """'''  # Leo handles the common cases correctly.

''' ''ab'' __xxx__ ''wx'' __xyz__ ''' # No wiki markup in ''' strings.

""" ''ab'' __xxx__ ''wx'' __xyz__ """

# ''ab'' __xxx__ ''wx'' __xyz__

""" ''y'' """

""" text~~#ff00ff:some text~~more text"""

if 1 and 2:
    pass

print g.app().loadDir
#@nonl
#@-node:ekr.20070627082044.258:wikiTest1
#@-node:ekr.20070627082044.257:@test colorizer wikiTest1
#@+node:ekr.20070627082044.259:@test colorizer wikiTest2
if g.unitTesting:
    p = c.currentPosition().firstChild()

    c.beginUpdate()
    try:
        c.selectVnode(p) # Sets body text.
        val = c.frame.body.colorizer.colorize(p,incremental=False)
        assert val=="ok", "colorizer test failed: %s" % p.headString()
    finally:
        c.endUpdate(False)
#@+node:ekr.20070627082044.260:wikiTest2
# both color_markup & add_directives plugins must be enabled.
@markup wiki

""" continued
string"""

@ ''ab'' __xxx__ ''wx'' __xyz__  __''bolditalic''__ and ''__italicbold__''
@c

# /* ''ab'' __xxx__ ''wx'' __xyz__ */

__abc__ 

# Test

""" ''' """ ''' """'''  # Leo handles the __b__ common cases correctly.

''' ''ab'' __xxx__ ''wx'' __xyz__ ''' # No wiki markup in ''' strings.

""" ''ab'' __xxx__ ''wx'' __xyz__ """

# ''ab'' __xxx__ ''wx'' __xyz__

""" ''y'' """

""" text~~#ee00ff:some text~~more text"""


if 1 and 2:
    pass

print g.app().loadDir
#@-node:ekr.20070627082044.260:wikiTest2
#@-node:ekr.20070627082044.259:@test colorizer wikiTest2
#@+node:ekr.20070627082044.261:@test colorizer wikiTest3
if g.unitTesting:
    p = c.currentPosition().firstChild()

    c.beginUpdate()
    try:
        c.selectVnode(p) # Sets body text.
        val = c.frame.body.colorizer.colorize(p,incremental=False)
        assert val=="ok", "colorizer test failed: %s" % p.headString()
    finally:
        c.endUpdate(False)
#@+node:ekr.20070627082044.262:wikiTest3
# both color_markup & add_directives plugins must be enabled.

@markup wiki

""" text~~red:some text~~more text"""

""" text~~#ee0ff:some text~~more text"""

if 1 and 2:
    pass
#@nonl
#@-node:ekr.20070627082044.262:wikiTest3
#@-node:ekr.20070627082044.261:@test colorizer wikiTest3
#@+node:ekr.20070627082044.852:@test leoColor.doNowebSecRef
c.beginUpdate()
try:
    # All we need to do is call recolor.
    if 0:
        << test undefined >>
        << test defined >>
    c.recolor_now()
finally:
    c.endUpdate(False)
#@nonl
#@+node:ekr.20070627082044.853:<< test defined >>
test
#@nonl
#@-node:ekr.20070627082044.853:<< test defined >>
#@-node:ekr.20070627082044.852:@test leoColor.doNowebSecRef
#@+node:ekr.20070627082044.192:@test python keywords (new colorizer)
if g.unitTesting:
    try:
        mode = c.frame.body.colorizer.modes.get('python')
        mode.keywords['as'] = 1 # append the keyword, colorize with 'keyword1' tag.
    except AttributeError:
        pass # modes only exists for new colorizer.
#@nonl
#@-node:ekr.20070627082044.192:@test python keywords (new colorizer)
#@+node:ekr.20070627082044.255:@test vbscript
if g.unitTesting:
    p = c.currentPosition().firstChild()

    c.beginUpdate()
    try:
        c.selectVnode(p) # Sets body text.
        val = c.frame.body.colorizer.colorize(p,incremental=False)
        assert val=="ok", "colorizer test failed: %s" % p.headString()
    finally:
        c.endUpdate(False)
#@+node:ekr.20070627082044.256:vbscript
@language vbscript

if
IF
#@-node:ekr.20070627082044.256:vbscript
#@-node:ekr.20070627082044.255:@test vbscript
#@-node:ekr.20070627082044.191:Colorizer
#@-node:ekr.20070629065730.1:Contain non-python code
#@+node:ekr.20070703081205:Contain trees that would be inconvenient in a derived file
#@+node:ekr.20070627082044.819:@test Pretty Print command
if g.unitTesting:
    # @language python 

    # __pychecker__ = '--no-reimport'
    import leoTest

    u = leoTest.testUtils(c)
    dump = False 
    all = False 

    if all:
        c.prettyPrintAllPythonCode(dump=dump)
    else:
        # Warning: at present the before and after text is unprotected:
        # Running Pretty Print on these nodes will negate the value of the test.
        temp = u.findNodeInTree(p,"tempNode")
        c.setBodyString(temp,"")
        before = u.findNodeInTree(p,"before")
        after = u.findNodeInTree(p,"after")
        temp.scriptSetBodyString(before.bodyString())
        c.prettyPrintPythonCode(p=temp,dump=dump)
        assert temp.bodyString() == after.bodyString(),"Pretty Print Test failed"
#@+node:ekr.20070627082044.820:tempNode
@ This is a test of stuff.in doc parts.

         I wonder what will happen.
@c

def spam (self):

    """ This is a ' triple'   quoted string:
        It should remain untouched."""

    if a == 3:
        print "Ä á Û"

    ''' Another ' triple'   quoted string:
        It should remain untouched.'''

    "yet another\
    multi-line string"

class eggs:

    """ A typical doc string """

    @others
#@nonl
#@-node:ekr.20070627082044.820:tempNode
#@+node:ekr.20070627082044.821:before
@ This is    a test of stuff.in doc parts.

         I wonder           what will happen.
@c

def        spam (self         )  :   

    """ This is a ' triple'   quoted string:
        It should remain untouched."""

    if a==3:
        print "Ä á Û"

    ''' Another ' triple'   quoted string:
        It should remain untouched.'''

    "yet another\
    multi-line string"

class eggs:

    """ A typical doc string """

    @others
#@nonl
#@-node:ekr.20070627082044.821:before
#@+node:ekr.20070627082044.822:after
@ This is a test of stuff.in doc parts.

         I wonder what will happen.
@c

def spam (self):

    """ This is a ' triple'   quoted string:
        It should remain untouched."""

    if a == 3:
        print "Ä á Û"

    ''' Another ' triple'   quoted string:
        It should remain untouched.'''

    "yet another\
    multi-line string"

class eggs:

    """ A typical doc string """

    @others
#@nonl
#@-node:ekr.20070627082044.822:after
#@-node:ekr.20070627082044.819:@test Pretty Print command
#@-node:ekr.20070703081205:Contain trees that would be inconvenient in a derived file
#@-node:ekr.20070628110656:@unit-tests Can not be in derived files
#@+node:ekr.20070628121120:@unit-tests General tests: no associated derived file
#@+node:ekr.20070627082044.32:Longer tests (opens windows)
#@+node:ekr.20070627082044.33:Unit tests for  .leo files
@language python
@tabwidth -4
#@nonl
#@+node:ekr.20070627082044.34:@test test.leo
import leoTest

path = g.os_path_join(g.app.loadDir,"..","test","test.leo")
leoTest.runLeoTest(c,path,verbose=False,full=True)

#@-node:ekr.20070627082044.34:@test test.leo
#@+node:ekr.20070627082044.35:@test leoDist.leo
import leoTest

path = g.os_path_join(g.app.loadDir,"..","dist","leoDist.leo")
leoTest.runLeoTest(c,path,verbose=False,full=True)
#@-node:ekr.20070627082044.35:@test leoDist.leo
#@+node:ekr.20070627082044.36:@test LeoPyRef.leo
import leoTest

path = g.os_path_join(g.app.loadDir,"..","src","LeoPyRef.leo")
leoTest.runLeoTest(c,path)
#@-node:ekr.20070627082044.36:@test LeoPyRef.leo
#@+node:ekr.20070627082044.37:@test leoPluginsRef.leo
import leoTest

path = g.os_path_join(g.app.loadDir,"..","plugins","leoPluginsRef.leo")
leoTest.runLeoTest(c,path)
#@-node:ekr.20070627082044.37:@test leoPluginsRef.leo
#@+node:ekr.20070627082044.38:@test LeoDocs.leo
import leoTest

path = g.os_path_join(g.app.loadDir,"..","doc","LeoDocs.leo")
leoTest.runLeoTest(c,path)
#@-node:ekr.20070627082044.38:@test LeoDocs.leo
#@-node:ekr.20070627082044.33:Unit tests for  .leo files
#@+node:ekr.20070627082044.39:Unit tests for plugins
# These are now compatible with the other unit tests.
# It may be a bit off-putting to run the two sets together, however...
#@nonl
#@+node:ekr.20070627082044.40:print all loaded plugins
import leoPlugins

print
print 'loaded plugins...'
for p in g.app.loadedPlugins:
    print p

leoPlugins.printHandlers()
#@nonl
#@-node:ekr.20070627082044.40:print all loaded plugins
#@+node:ekr.20070627082044.41:@suite run all plugin test routines
import glob
import inspect
import unittest

changed = c.isChanged() ; p1 = c.currentPosition()
<< class testRoutineTestCase >>
@others

plugins = getAllPlugins()

# g.printList(plugins)

# print '@suite run all plugin test routines'

if 1:
    g.app.unitTestDict["fail"] = False
    suite = unittest.makeSuite(unittest.TestCase)
    for plugin in plugins:
        n = addTestRoutinesInPluginToSuite(c,g,plugin,suite)
        if n:
            plural = g.choose(n==1,'','s')
            s = 'found %2d test routine%s for %s' % (n,plural,plugin)
            print s ; g.es(s)

    if 1: # For @suite nodes.  Better for unit testing.
        g.app.scriptDict['suite'] = suite
    else: # For script button nodes.  Good for testing.
        # Verbosity: 1: print just dots.
        unittest.TextTestRunner(verbosity=1).run(suite)
        c.setChanged(changed) # Restore changed state.
        c.selectVnode(p1) # N.B. Restore the selected node.
#@nonl
#@+node:ekr.20070627082044.42:<< class testRoutineTestCase >>
class testRoutineTestCase(unittest.TestCase):

    """Create a unit test from a snippet of code."""

    @others
#@nonl
#@+node:ekr.20070627082044.43:__init__
def __init__ (self,c,g,moduleName,theClass,f,code,verbose=False):

     # Init the base class.
    unittest.TestCase.__init__(self)

    self.c = c
    self.moduleName = moduleName
    self.theClass = theClass
    self.f = f
    self.g = g
    self.code = code
    self.p = c.currentPosition().copy()
    self.verbose = verbose
#@-node:ekr.20070627082044.43:__init__
#@+node:ekr.20070627082044.44: fail
def fail (self,msg=None):

    """Mark a unit test as having failed."""

    g.app.unitTestDict["fail"] = g.callerName(2)
#@nonl
#@-node:ekr.20070627082044.44: fail
#@+node:ekr.20070627082044.45:runTest
def runTest (self):

    f = self.f ; name = f.__name__ ; theClass = self.theClass

    d = {'c':self.c,'g':self.g,'p':self.p}

    if 1: # Use dead text to ensure a clean environment.
        # The present code assumes all leading whitespace is consistent.
        code = removeLeadingWs(self.code)
        # The code is a def statement.  We concoct a call to the function or method.
        if theClass:
            s = '%s\n%s(self=None)\n' % (code,name)
        else:
            s = '%s\n%s()\n' % (code,name)

        if self.verbose:
            g.trace('executing...\n\n%s' % s)

        exec s in d # Execute s in a environment containing c, g and p.

    else: # Use live objects.
        if theClass:
            # Create a subclass of f's original class.
            class __dummyClass(theClass):
                # Create a ctor with a known signature.
                def __init__(self): pass
            # Make f a method of the dummyClass with name 'f'.
            # N.B. f is still a method of theClass, and must be called as such!
            if 0: # Override the method with f's actual name.
                g.funcToMethod(f,__dummyClass,name)
                obj = __dummyClass()
                f = getattr(obj,name)
                f(obj)
            else:
                # Use the name 'f' for f's name.
                g.funcToMethod(f,__dummyClass,'f')
                # Create an instance of __dummyClass and call it's f method.
                obj = __dummyClass()
                obj.f()
        else: # Execute a plain function.
            f(**keys)
#@nonl
#@-node:ekr.20070627082044.45:runTest
#@+node:ekr.20070627082044.46:shortDescription
def shortDescription (self):

    return 'test function',repr(self.f)
#@nonl
#@-node:ekr.20070627082044.46:shortDescription
#@-node:ekr.20070627082044.42:<< class testRoutineTestCase >>
#@+node:ekr.20070627082044.47:addTestRoutinesInPluginToSuite
def addTestRoutinesInPluginToSuite (c,g,pluginName,suite):

    path = g.os_path_abspath(g.os_path_join(g.app.loadDir,"..","plugins"))

    plugin = g.importFromPath(pluginName,path,verbose=True)
    if not plugin:
        return len([])

    tests = findTestsInModule(plugin,pluginName)

    for test in tests:
        theClass,f = test
        code = inspect.getsource(f)
        testCase = testRoutineTestCase(c,g,pluginName,theClass,f,code,verbose=False)
        suite.addTest(testCase)

    return len(tests)
#@-node:ekr.20070627082044.47:addTestRoutinesInPluginToSuite
#@+node:ekr.20070627082044.48:findTestsInModule
def findTestsInModule (module,moduleName):

    # g.trace(moduleName)

    toString = g.listToString
    try:
        functions = inspect.getmembers(module,inspect.isfunction)
    except Exception:
        g.trace('Exception in inspect.getmembers(module,inspect.isfunction) for %s' % moduleName)
        functions = []
    try:
        classes = inspect.getmembers(module,inspect.isclass)
    except Exception:
        g.trace('Exception in inspect.getmembers(module,inspect.isclass) for %s' % moduleName)
        classes = []

    # Ignore subclasses of TestCase.
    classes = [theClass for className,theClass in classes
        if not issubclass(theClass,unittest.TestCase)]

    allMethods = []
    for theClass in classes:
        try:
            methods = inspect.getmembers(theClass,inspect.ismethod)
        except Exception:
            # This looks like a bug in inspect: The zodb classes have no methods.
            # g.trace('Exception in inspect.getmembers(theClass,inspect.ismethod) for %s' % moduleName)
            methods = []
        # print '\nmethods of class %s...\n\n%s' % (theClass,toString(methods))
        methods = [(theClass,f) for name,f in methods if name.startswith('test_')]
        allMethods.extend(methods)

    # Hack: remove duplicate tests from leoGlobals.py.
    functions = [(None,f) for name,f in functions
        if name.startswith('test_') and not name.startswith('test_g_')]

    if 0:
        << print classes, methods & functions >>

    result = functions
    result.extend(allMethods)
    return result
#@nonl
#@+node:ekr.20070627082044.49:<< print classes, methods & functions >>
print '=' * 40

if classes:
    print 'classes in %s...\n%s' % (moduleName,toString(classes))
else:
    print 'no classes in %s' % (moduleName)
if allMethods:
    print 'test methods in %s...\n%s'   % (moduleName,toString(allMethods))
else:
    print 'no test methods in %s' % (moduleName)
if functions:
    print 'test functions in %s...\n%s' % (moduleName,toString(functions))
else:
    print 'no test functions in %s' % (moduleName)
#@nonl
#@-node:ekr.20070627082044.49:<< print classes, methods & functions >>
#@-node:ekr.20070627082044.48:findTestsInModule
#@+node:ekr.20070627082044.50:getAllPlugins
def getAllPlugins ():

    path = g.os_path_abspath(g.os_path_join(g.app.loadDir,"..","plugins"))
    # g.trace(path)

    files = glob.glob(g.os_path_join(path,"*.py"))
    files = [g.os_path_abspath(f) for f in files]
    files = [str(g.shortFileName(f)) for f in files]
    files.sort()
    plugins = [g.os_path_splitext(f)[0] for f in files]

    # g.trace(g.listToString(plugins))
    return plugins
#@nonl
#@-node:ekr.20070627082044.50:getAllPlugins
#@+node:ekr.20070627082044.51:removeLeadingWs
def removeLeadingWs (code):

    if not code.strip():
        return ''

    lines = g.splitLines(code)
    line = lines[0]
    i = g.skip_ws(line,0)
    ws = line[0:i]
    if not ws:
        return code
    result = [] ; n = len(ws)
    for line in lines:
        if line.startswith(ws):
            result.append(line[n:])
        elif not line.strip() and line.endswith('\n'):
            result.append('\n')
        else:
            print 'unitTest.leo:underindented line:%s' % repr(line)
            result.append(line)

    # g.trace(g.listToString(result))

    result = ''.join(result)
    return result
#@-node:ekr.20070627082044.51:removeLeadingWs
#@-node:ekr.20070627082044.41:@suite run all plugin test routines
#@+node:ekr.20070627082044.52:@@suite plugins tests
# Create unit tests in g.app.scriptDict["suite"]
import leoPlugins
import leoTest
import glob
import sys
import unittest

@others

suite = makePluginsTestSuite(c)

g.app.scriptDict['suite'] = suite
#@nonl
#@+node:ekr.20070627082044.53:makePluginsTestSuite
def makePluginsTestSuite(c):

    '''Create a plugin test for .py file in the plugins directory'''

    # Create the suite.
    suite = unittest.makeSuite(unittest.TestCase)

    # Add a test case for every plugin.
    plugins = g.os_path_join(g.app.loadDir,'..','plugins','*.py')
    plugins = g.os_path_abspath(plugins)
    files = glob.glob(plugins)
    files = [g.os_path_abspath(f) for f in files]
    files.sort()

    for f in files:
        test = pluginTestCase(c,f)
        # g.trace(test.shortDescription())
        suite.addTest(test)

    if 1:
        # Open a new window after all tests are completed.  Tests many plugins.
        lastTest = lastTestCase(c,openFlag=True)
        suite.addTest(lastTest)

    return suite
#@nonl
#@-node:ekr.20070627082044.53:makePluginsTestSuite
#@+node:ekr.20070627082044.54:class pluginTestCase
class pluginTestCase(unittest.TestCase):

    '''A test case to test a single Leo plugin.'''

    @others
#@nonl
#@+node:ekr.20070627082044.55:__init__
def __init__ (self,c,path):

    # Init the base class.
    unittest.TestCase.__init__(self)

    self.c = c
    self.path = path
#@nonl
#@-node:ekr.20070627082044.55:__init__
#@+node:ekr.20070627082044.56:fail
def fail (self,msg=None):

    """Mark a unit test as having failed."""

    g.app.unitTestDict["fail"] = g.callerName(2)
#@nonl
#@-node:ekr.20070627082044.56:fail
#@+node:ekr.20070627082044.57:runTest
def runTest(self):

    c = self.c ; path = self.path

    path,file = g.os_path_split(path)
    moduleName,ext  = g.os_path_splitext(file)
    module = sys.modules.get(moduleName)

    if not module:
        module = leoPlugins.loadOnePlugin(moduleName,verbose=False)
        assert module, 'can not import %s' % moduleName
#@nonl
#@-node:ekr.20070627082044.57:runTest
#@+node:ekr.20070627082044.58:setUp
def setUp(self):

    g.app.unitTestDict = {}
#@nonl
#@-node:ekr.20070627082044.58:setUp
#@+node:ekr.20070627082044.59:shortDescription
def shortDescription (self):

    return "pluginTestCase: %s" % g.shortFileName(self.path)
#@nonl
#@-node:ekr.20070627082044.59:shortDescription
#@-node:ekr.20070627082044.54:class pluginTestCase
#@+node:ekr.20070627082044.60:class lastTestCase
class lastTestCase(unittest.TestCase):

    '''A test case to print a message at the end of plugin tests.'''

    def __init__ (self,c,openFlag):
        # Init the base class.
        unittest.TestCase.__init__(self)
        self.c = c
        self.openFlag = openFlag

    def runTest(self):
        c = self.c
        print
        print '%s a new window to test more plugin logic' % g.choose(
            self.openFlag,'opening','open')
        print
        if self.openFlag:
            self.new_c = new_c = c.new() # Create the new window.
            new_c.frame.setTitle("unit test for 'new' hook")

    if 0: # Doesn't work
        def shutDown(self):
            c = self.new_c
            c.close()
#@nonl
#@-node:ekr.20070627082044.60:class lastTestCase
#@-node:ekr.20070627082044.52:@@suite plugins tests
#@+node:ekr.20070627082044.61:@suite test syntax of all plugins
# N.B.  We don't import the files: multiple imports might cause problems.
import unittest
import leoTest

@others

# print '@suite test syntax of all plugins'

suite = unittest.makeSuite(unittest.TestCase)

for path in leoTest.getAllPluginFilenames():

    f = file(path)
    assert f, "File not found: %s" % path
    s = f.read() ; f.close()
    test = parseFileTestCase(c,path,checkCompile=True,checkTabs=True)
    suite.addTest(test)

if suite:
    g.app.scriptDict['suite'] = suite
#@nonl
#@+node:ekr.20070627082044.62:class parseFileTestCase
class parseFileTestCase (unittest.TestCase):

    @others
#@nonl
#@+node:ekr.20070627082044.63:__init__
def __init__ (self,c,path,checkCompile,checkTabs):

    # Init the base class.
    unittest.TestCase.__init__(self)

    self.c = c
    self.path = path
    self.checkCompile = checkCompile
    self.checkTabs = checkTabs
    assert self.checkCompile or self.checkTabs, "not checking anything"
#@nonl
#@-node:ekr.20070627082044.63:__init__
#@+node:ekr.20070627082044.64:runTest
def runTest(self):

    c = self.c ; path = self.path

    s = file(path).read()

    if self.checkCompile:
        leoTest.checkFileSyntax(path,s)

    if self.checkTabs:
        leoTest.checkFileTabs(path,s)
#@nonl
#@-node:ekr.20070627082044.64:runTest
#@+node:ekr.20070627082044.65:shortDescription
def shortDescription (self):

    fn = str(g.shortFileName(self.path))

    if self.checkCompile and self.checkTabs:
        return "Test syntax and tabbing of %s plugin" % fn
    elif self.checkCompile:
        return "Test syntax of %s plugin" % fn
    else:
        return "Test tabbing of %s plugin" % fn
#@nonl
#@-node:ekr.20070627082044.65:shortDescription
#@-node:ekr.20070627082044.62:class parseFileTestCase
#@-node:ekr.20070627082044.61:@suite test syntax of all plugins
#@+node:ekr.20070627082044.66:@@test print All plugins tests complete
print '\nAll plugins tests complete.'
#@nonl
#@-node:ekr.20070627082044.66:@@test print All plugins tests complete
#@+node:ekr.20070627082044.67:@test restore the screen
# This is **not** a real unit test.
# It simply restores the screen to a more convenient state.
import leoTest ; u = leoTest.testUtils(c)

c.contractAllHeadlines()
h = 'All unit tests'
p = u.findNodeAnywhere(h)
if p:
    c.beginUpdate()
    try:
        p.expand()
        g.app.unitTestDict['restoreSelectedNode']=False
        c.selectPosition(p)
    finally:
        c.endUpdate()
#@nonl
#@-node:ekr.20070627082044.67:@test restore the screen
#@-node:ekr.20070627082044.39:Unit tests for plugins
#@+node:ekr.20070627082044.68:Tests of minimal .leo files
#@+node:ekr.20070627082044.69:@test minimalLeoFile.leo
import leoTest

path = g.os_path_join(g.app.loadDir,"..","test","unittest","minimalLeoFile.leo")
leoTest.runLeoTest(c,path,verbose=False,full=True)
#@-node:ekr.20070627082044.69:@test minimalLeoFile.leo
#@+node:ekr.20070627082044.70:@test minimalLeoFile2.leo
import leoTest

path = g.os_path_join(g.app.loadDir,"..","test","unittest","minimalLeoFile2.leo")
leoTest.runLeoTest(c,path,verbose=False,full=True)
#@-node:ekr.20070627082044.70:@test minimalLeoFile2.leo
#@+node:ekr.20070627082044.71:@test minimalLeoFile3.leo
import leoTest

path = g.os_path_join(g.app.loadDir,"..","test","unittest","minimalLeoFile3.leo")
leoTest.runLeoTest(c,path,verbose=False,full=True)
#@-node:ekr.20070627082044.71:@test minimalLeoFile3.leo
#@-node:ekr.20070627082044.68:Tests of minimal .leo files
#@+node:ekr.20070627082044.72:@test contract all
c.contractAllHeadlines()
#@nonl
#@-node:ekr.20070627082044.72:@test contract all
#@-node:ekr.20070627082044.32:Longer tests (opens windows)
#@+node:ekr.20070627082044.265:@test all commands have an event arg
import inspect

d = c.commandsDict ; keys = d.keys() ; keys.sort()

for key in keys:
    f = d.get(key) ; name = f and f.__name__
    args, varargs, varkw, defaults = data = inspect.getargspec(f)
    # print '%-28s' % (name),data
    arg0 = len(args) > 0 and args[0]
    arg1 = len(args) > 1 and args[1]
    assert arg0 == 'self' and arg1 == 'event' or arg0 == 'event',\
       'no event arg for %s, args: %s' % (name,data)
#@nonl
#@-node:ekr.20070627082044.265:@test all commands have an event arg
#@+node:ekr.20070627082044.141:Doctests
#@+node:ekr.20070627082044.142:@suite run all doctests
import unittest
import leoTest

import sys

# DocTestSuite exists in Python 2.3 and above.

version = '.'.join([str(sys.version_info[i]) for i in (0,1,2)])
if g.CheckVersion(version, "2.3"):

    path = g.os_path_join(g.app.loadDir,"..","src")
    modules = leoTest.importAllModulesInPath(path)

    suite = leoTest.createUnitTestsFromDoctests(modules)

    if suite:
        g.app.scriptDict['suite'] = suite

else:
    # Create an empty suite to suppress a warning.
    g.app.scriptDict['suite'] = unittest.TestSuite()
    print
    print "Can't create unit tests from doctests"
    print "doctest.DocTestSuite requires Python 2.3 or above."
    print
#@nonl
#@-node:ekr.20070627082044.142:@suite run all doctests
#@+node:ekr.20070627082044.143:@test zz print end of doctests
print ; print 'End of doctests'
#@nonl
#@-node:ekr.20070627082044.143:@test zz print end of doctests
#@-node:ekr.20070627082044.141:Doctests
#@+node:ekr.20070627082044.182:Check base classes & ivars
#@+node:ekr.20070627082044.183:@test leoFrame is subset of leoTkFrame
if g.app.gui.guiName() == 'tkinter':
    import leoFrame,leoTkinterFrame
    import inspect

    baseClass = leoFrame.leoFrame
    subClasses  = (leoTkinterFrame.leoTkinterFrame,leoFrame.nullFrame)
    baseObject = c.frame

    methods = inspect.getmembers(baseClass,inspect.ismethod)
    methodNames = [z[0] for z in methods]

    for name in baseObject.mustBeDefinedOnlyInBaseClass:
        assert name in methodNames, 'not defined in base class %s.%s' % (baseClass.__name__,name)

    for subClass in subClasses:
        subclassName = subClass.__name__
        for name in methodNames:
            base_func = getattr(baseClass,name)
            sub_func =  getattr(subClass,name)
            if name in baseObject.mustBeDefinedOnlyInBaseClass:
                assert base_func.im_func == sub_func.im_func, 'defined in subclass %s.%s' % (subclassName,name)
            if name in baseObject.mustBeDefinedInSubclasses:
                assert base_func.im_func != sub_func.im_func, 'not defined in subclass %s.%s' % (subclassName,name)
#@-node:ekr.20070627082044.183:@test leoFrame is subset of leoTkFrame
#@+node:ekr.20070627082044.184:@test leoBody is subset of leoTkBody
if g.app.gui.guiName() == 'tkinter':
    import leoFrame,leoTkinterFrame
    import inspect,sys

    baseClass = leoFrame.leoBody
    subClasses  = (leoTkinterFrame.leoTkinterBody,leoFrame.nullBody)
    baseObject = c.frame.body

    methods = inspect.getmembers(baseClass,inspect.ismethod)
    methodNames = [z[0] for z in methods]

    for name in baseObject.mustBeDefinedOnlyInBaseClass:
        try:
            assert name in methodNames, 'not defined in base class %s.%s' % (baseClass.__name__,name)
        except AssertionError:
            exctype, value = sys.exc_info()[:2]
            print value
            raise

    for subClass in subClasses:
        subclassName = subClass.__name__
        for name in methodNames:
            base_func = getattr(baseClass,name)
            sub_func =  getattr(subClass,name)
            try:
                if name in baseObject.mustBeDefinedOnlyInBaseClass:
                    assert base_func.im_func == sub_func.im_func, 'defined in subclass %s.%s' % (subclassName,name)
                if name in baseObject.mustBeDefinedInSubclasses:
                    assert base_func.im_func != sub_func.im_func, 'not defined in subclass %s.%s' % (subclassName,name)
            except AssertionError:
                #raise
                exctype, value = sys.exc_info()[:2]
                print value
#@nonl
#@-node:ekr.20070627082044.184:@test leoBody is subset of leoTkBody
#@+node:ekr.20070627082044.185:@test leoTree is subset of leoTkTree
if g.app.gui.guiName() == 'tkinter':
    import leoFrame,leoTkinterTree
    import inspect

    baseClass = leoFrame.leoTree
    subClasses  = (leoTkinterTree.leoTkinterTree,leoFrame.nullTree)
    baseObject = c.frame.tree

    methods = inspect.getmembers(baseClass,inspect.ismethod)
    methodNames = [z[0] for z in methods]

    for name in baseObject.mustBeDefinedOnlyInBaseClass:
        assert name in methodNames, 'not defined in base class %s.%s' % (baseClass.__name__,name)

    for subClass in subClasses:
        subclassName = subClass.__name__
        for name in methodNames:
            base_func = getattr(baseClass,name)
            sub_func =  getattr(subClass,name)
            if name in baseObject.mustBeDefinedOnlyInBaseClass:
                assert base_func.im_func == sub_func.im_func, 'defined in subclass %s.%s' % (subclassName,name)
            if name in baseObject.mustBeDefinedInSubclasses:
                assert base_func.im_func != sub_func.im_func, 'not defined in subclass %s.%s' % (subclassName,name)
#@-node:ekr.20070627082044.185:@test leoTree is subset of leoTkTree
#@+node:ekr.20070627082044.186:@test leoGui is subset of leoTkGui
if g.app.gui.guiName() == 'tkinter':
    import leoGui,leoTkinterGui
    import inspect

    baseClass = leoGui.leoGui
    subClasses  = (leoTkinterGui.tkinterGui,) # nullGui can inherit almost all leoGui dummy methods.
    baseObject = g.app.gui

    methods = inspect.getmembers(baseClass,inspect.ismethod)
    methodNames = [z[0] for z in methods]

    for name in baseObject.mustBeDefinedOnlyInBaseClass:
        assert name in methodNames, 'not defined in base class %s.%s' % (baseClass.__name__,name)

    for subClass in subClasses:
        subclassName = subClass.__name__
        for name in methodNames:
            base_func = getattr(baseClass,name)
            sub_func =  getattr(subClass,name)
            try:
                if name in baseObject.mustBeDefinedOnlyInBaseClass:
                    assert base_func.im_func == sub_func.im_func, 'defined in subclass %s.%s' % (subclassName,name)
                if name in baseObject.mustBeDefinedInSubclasses:
                    assert base_func.im_func != sub_func.im_func, 'not defined in subclass %s.%s' % (subclassName,name)
            except AssertionError:
                raise
#@-node:ekr.20070627082044.186:@test leoGui is subset of leoTkGui
#@+node:ekr.20070627082044.187:@test official frame ivars
f = c.frame
assert(f.c==c)
assert(c.frame==f)

if g.app.gui.guiName() == 'tkinter':
    ivars = (
        'bar1','bar2',
        'body',
        # 'bodyBar','bodyCtrl','bodyXBar',
        'canvas',
        'f1','f2',
        'iconBar','iconFrame',
        'log','outerFrame',
        'statusLine','statusFrame','statusLabel','statusText',
        'title','top','tree',
        #'treeBar', # leo_treeBar is now injected into frame.canvas.
    )
else: ivars = ()

for ivar in ivars:
    assert hasattr(f,ivar), 'missing frame ivar: %s' % ivar
    val = getattr(f,ivar)
    assert val is not None,'null frame ivar: %s'% ivar

# These do not have to be initied.
for ivar in ('findPanel',):
    assert hasattr(f,ivar), 'missing frame ivar: %s' % ivar
#@nonl
#@-node:ekr.20070627082044.187:@test official frame ivars
#@+node:ekr.20070627082044.188:@test official commander ivars
f = c.frame
assert(f.c==c)
assert(c.frame==f)

ivars = (
    # Subcommanders...
    'atFileCommands','fileCommands','importCommands','tangleCommands','undoer',
    # Positions...
    '_currentPosition','_rootPosition','_topPosition',
    # Data structures...
    'hoistStack','recentFiles',
    # Args...
    'output_doc_flag','page_width','tab_width',
    'tangle_directory','tangle_errors','tangle_batch_flag','target_language',
    'untangle_batch_flag','use_header_flag',
    # Others...
    'mFileName',
)

for ivar in ivars:
    assert hasattr(c,ivar), 'missing commander ivar: %s' % ivar
    val = getattr(c,ivar)
    assert val is not None,'null commander ivar: %s'% ivar
#@nonl
#@-node:ekr.20070627082044.188:@test official commander ivars
#@+node:ekr.20070627082044.189:@test official g.app directories
ivars = ('extensionsDir','globalConfigDir','loadDir','testDir')

for ivar in ivars:
    assert hasattr(g.app,ivar), 'missing g.app directory: %s' % ivar
    val = getattr(g.app,ivar)
    assert val is not None, 'null g.app directory: %s'% ivar
    assert g.os_path_exists(g.os_path_abspath(val)), 'non-existent g.app directory: %s' % ivar

assert hasattr(g.app,'homeDir') # May well be None.
#@nonl
#@-node:ekr.20070627082044.189:@test official g.app directories
#@+node:ekr.20070627082044.190:@test official g.app ivars

ivars = (
    # These are non-official and might be removed...
        # 'afterHandler','count','positions',
        # 'menuWarningsGiven','unicodeErrorGiven',
    'batchMode','config',
    'debug','debugSwitch','disableSave',
    'gui','hasOpenWithMenu','hookError','hookFunction',
    'idle_imported','idleTimeDelay','idleTimeHook','initing','killed',
    'leoID','loadedPlugins',
    # 'log', # Will often be null during unit testing.
    'logIsLocked','logWaiting',
    'nodeIndices','numberOfWindows',
    'quitting','realMenuNameDict','searchDict','scriptDict',
    'trace','tracePositions','trace_list','tkEncoding',
    'unitTestDict','unitTesting','use_psyco','windowList',
)

for ivar in ivars:
    assert hasattr(g.app,ivar), 'missing app ivar: %s' % ivar
    val = getattr(g.app,ivar)
    assert val is not None, 'null app ivar: %s'% ivar

# These do not have to be initied.
for ivar in (
    'commandName',
    'openWithFiles','openWithFileNum','openWithTable',
    'root',
):
    assert hasattr(g.app,ivar), 'missing app ivar: %s' % ivar
#@nonl
#@-node:ekr.20070627082044.190:@test official g.app ivars
#@-node:ekr.20070627082044.182:Check base classes & ivars
#@+node:ekr.20070627082044.912:Unicode tests...
#@+node:ekr.20070627082044.913:@test open non-existent non-ascii directory
file = u'Ỗ'
path = g.os_path_join('Ỗ','Ỗ')
# print g.toEncodedString(file,'utf-8')

ok,frame = g.openWithFileName(path,c)

assert not ok and not frame
#@nonl
#@-node:ekr.20070627082044.913:@test open non-existent non-ascii directory
#@+node:ekr.20070627082044.914:@test can't open message in g.openWithFileName
old_c = c
filename = "testᾹ(U+1FB9: Greek Capital Letter Alpha With Macron)"
ok,frame = g.openWithFileName(filename,old_c)
assert(not ok)
#@nonl
#@-node:ekr.20070627082044.914:@test can't open message in g.openWithFileName
#@+node:ekr.20070627082044.916:@test % operator with unicode

s = "testᾹ(U+1FB9: Greek Capital Letter Alpha With Macron)"

s2 = 'test: %s' % s
#@nonl
#@-node:ekr.20070627082044.916:@test % operator with unicode
#@+node:ekr.20070627082044.917:@test failure to convert unicode characters to ascii

encoding = 'ascii'

s = '炰'

s2,ok = g.toUnicodeWithErrorCode(s,encoding)
assert not ok, 'toUnicodeWithErrorCode returns True for %s with ascii encoding' % s

s = u'炰'
s3,ok = g.toEncodedStringWithErrorCode(s,encoding)
assert not ok, 'toEncodedStringWithErrorCode returns True for %s with ascii encoding' % s
#@nonl
#@-node:ekr.20070627082044.917:@test failure to convert unicode characters to ascii
#@+node:ekr.20070627082044.918:@test of round-tripping toUnicode & toEncodedString

for s,encoding in (
    ('a',    'utf-8'),
    ('a',    'ascii'),
    ('äöü',  'utf-8'),
    ('äöü',  'mbcs'),
    ('炰',    'utf-8'),
    ('炰',    'mbcs'),
):
    if g.isValidEncoding(encoding):
        s2,ok = g.toUnicodeWithErrorCode(s,encoding)
        assert ok, 'toUnicodeWithErrorCode fails for %s' %s
        s3,ok = g.toEncodedStringWithErrorCode(s2,encoding)
        assert ok, 'toEncodedStringWithErrorCode fails for %s' % s2
        assert s3 == s, 'Round-trip one fails for %s' %s

        s2 = g.toUnicode(s,encoding)
        s3 = g.toEncodedString(s2,encoding)
        assert s3 == s, 'Round-trip two fails for %s' %s
#@nonl
#@-node:ekr.20070627082044.918:@test of round-tripping toUnicode & toEncodedString
#@-node:ekr.20070627082044.912:Unicode tests...
#@+node:ekr.20070627082044.923:Shorter Unit tests for plugins
#@+node:ekr.20070627082044.924:@test rClick.py
if g.app.gui.guiName() == 'tkinter':

    import rClick

    d = {'c':c}
    rClick.init()
    rClick.rClickbinder(tag='test',keywords=d)
    rClick.rClicker(tag='test',keywords=d)
#@-node:ekr.20070627082044.924:@test rClick.py
#@+node:ekr.20070627082044.925:detect_urls.py
#@+node:ekr.20070627082044.926:@test openURL
import detect_urls

w = c.frame.body.bodyCtrl
s = w.getAllText()
w.setInsertPoint(len(s))
url = detect_urls.openURL(tag='test',keywords={'c':c})
assert url == 'http://webpages.charter.net/edreamleo/front.html','Got:%s' % repr(url)

@ The last line is the url
http://webpages.charter.net/edreamleo/front.html
#@nonl
#@-node:ekr.20070627082044.926:@test openURL
#@+node:ekr.20070627082044.927:@test colorizerURLs
# Only tk gui colorizers with tag_ranges.

if g.app.gui.guiName() == 'tkinter':

    import detect_urls
    w = c.frame.body.bodyCtrl
    s = w.getAllText()
    detect_urls.colorizeURLs(tag='test',keywords={'c':c})
    assert w.tag_ranges('URL'),'no URL tags'

@ The last line is the url
http://webpages.charter.net/edreamleo/front.html
#@nonl
#@-node:ekr.20070627082044.927:@test colorizerURLs
#@-node:ekr.20070627082044.925:detect_urls.py
#@+node:ekr.20070627082044.928:@test mnplugins.insertBodystamp
import mnplugins

w = c.frame.body.bodyCtrl
s = w.getAllText()

try:
    w.setInsertPoint(len(s))
    mnplugins.insertBodystamp(c,p)
    s2 = w.getAllText()
    assert s2.startswith(s)
    assert len(s2) > len(s) + 15
finally:
    w.setAllText(s)
    p.v.t.bodyString = s
    c.recolor()

# end:
#@nonl
#@-node:ekr.20070627082044.928:@test mnplugins.insertBodystamp
#@+node:ekr.20070627082044.929:@test macros.parameterize
import macros

controller = macros.paramClass(c)
controller.parameterize()
    # Not much will happen because there are no children.
    # However, this does test recent changes.
#@nonl
#@-node:ekr.20070627082044.929:@test macros.parameterize
#@+node:ekr.20070627082044.930:@test zz restore the screen
# This is **not** a real unit test.
# It simply restores the screen to a more convenient state.

if 0:
    import leoTest
    u = leoTest.testUtils(c)

    c.beginUpdate()
    try:
        c.contractParent()
        c.selectPosition(p.parent())
        g.app.unitTestDict['restoreSelectedNode']=False
    finally:
        c.endUpdate()

print ; print 'End of other unit tests'
#@nonl
#@-node:ekr.20070627082044.930:@test zz restore the screen
#@-node:ekr.20070627082044.923:Shorter Unit tests for plugins
#@+node:ekr.20070627082044.73:File read/write tests...
#@+node:ekr.20070627082044.74:@test minimal test of putTnodeList
fc = c.fileCommands
t = p.v.t
child = p.firstChild()
assert child,'no child'
grandChild = child.firstChild()
assert grandChild,'no grandChild'
assert not t.tnodeList,repr(t.tnodeList)

try:
    t.tnodeList = [t,child.v.t,grandChild.v.t]
    s = fc.putTnodeList(p.v)
    if 1:
        assert s.startswith(' tnodeList="'),'bad start'
        assert s.endswith('"'),'bad end'
    else: # This doesn't work when copied.
        expected = ' tnodeList="ekr.20061001124008,ekr.20061001124008.1,ekr.20061001124008.2"'
        assert s == expected, 'expected: %s, got: %s' % (repr(expected),repr(s))
finally:
    t.tnodeList = []
#@nonl
#@+node:ekr.20070627082044.75:child
#@+node:ekr.20070627082044.76:grandchild
#@-node:ekr.20070627082044.76:grandchild
#@-node:ekr.20070627082044.75:child
#@-node:ekr.20070627082044.74:@test minimal test of putTnodeList
#@+node:ekr.20070627082044.88:leoFileCommands.py tests...
#@+node:ekr.20070627082044.89:@test putUa
fc = c.fileCommands # self is a dummy
p.v.unknownAttributes = {'unit_test':'abcd'}
s = fc.putUnknownAttributes (p.v)
expected = ' unit_test="55046162636471002e"'
assert s == expected, 'expected: %s, got: %s' % (repr(expected),repr(s))
#@-node:ekr.20070627082044.89:@test putUa
#@+node:ekr.20070627082044.90:@test putDescendentAttributes
fc = c.fileCommands
child = p.firstChild()
c.setMarked(child)
child.expand()
s = fc.putDescendentAttributes (p)

assert s.startswith('\nmarks="'),'bad start'
assert -1 != s.find(',"\nexpanded="'),'bad middle'
assert s.endswith(',"')
#@+node:ekr.20070627082044.91:child
#@+node:ekr.20070627082044.92:grandChild
#@-node:ekr.20070627082044.92:grandChild
#@-node:ekr.20070627082044.91:child
#@-node:ekr.20070627082044.90:@test putDescendentAttributes
#@+node:ekr.20070627082044.93:@test putDescendentUa
fc = c.fileCommands
child = p.firstChild()
grandChild = child.firstChild()
# Note: only tnodes can have unknown attributes.
child.v.t.unknownAttributes = {'unit_test_child':'abcd'}
grandChild.v.t.unknownAttributes = {'unit_test_grandchild':'wxyz'}

try:
    s = fc.putDescendentUnknownAttributes (p)
    assert s.startswith(' descendentTnodeUnknownAttributes="'),'bad start'
    assert s.endswith('"'), 'bad end'
finally:
    del child.v.t.unknownAttributes
    del grandChild.v.t.unknownAttributes
#@+node:ekr.20070627082044.94:child
#@+node:ekr.20070627082044.95:grandChild
#@-node:ekr.20070627082044.95:grandChild
#@-node:ekr.20070627082044.94:child
#@-node:ekr.20070627082044.93:@test putDescendentUa
#@+node:ekr.20070627082044.96:@test write .leo file with @ignore node
assert p.firstChild(), 'no child node'
assert p.firstChild().bodyString().startswith('@ignore'), 'No @ignore in child'
ok = c.fileCommands.write_Leo_file(
    'file-name',outlineOnlyFlag=True,toString=True,toOPML=False)
assert ok, 'error writing file'
count = 0
for line in g.splitLines(g.app.write_Leo_file_string):
    if line.find('@ignore') != -1:
        count += 1
assert count >=3, "not enough @ignore's in written file"
#@+node:ekr.20070627082044.97:child
@ignore # Test that this node gets written.
#@nonl
#@-node:ekr.20070627082044.97:child
#@-node:ekr.20070627082044.96:@test write .leo file with @ignore node
#@-node:ekr.20070627082044.88:leoFileCommands.py tests...
#@+node:ekr.20070627082044.98:Tests of @file nodes...
@color
#@nonl
#@+node:ekr.20070627082044.99:@test @file no newline
import leoTest

leoTest.runAtFileTest(c,p)
#@nonl
#@+node:ekr.20070627082044.100:#@file
Line 1

@last last line 1: no newline
#@nonl
#@-node:ekr.20070627082044.100:#@file
#@+node:ekr.20070627082044.101:Output
#@verbatim
#@+leo-ver=4
#@verbatim
#@+node:#@file
Line 1

#@verbatim
#@@last
#@verbatim
#@nonl
#@verbatim
#@-node:#@file
#@verbatim
#@-leo
last line 1: no newline
#@nonl
#@-node:ekr.20070627082044.101:Output
#@-node:ekr.20070627082044.99:@test @file no newline
#@+node:ekr.20070627082044.102:@test @file one newline
import leoTest

leoTest.runAtFileTest(c,p)
#@nonl
#@+node:ekr.20070627082044.103:#@file
Line 1

@last last line 1: newline
#@-node:ekr.20070627082044.103:#@file
#@+node:ekr.20070627082044.104:Output
#@verbatim
#@+leo-ver=4
#@verbatim
#@+node:#@file
Line 1

#@verbatim
#@@last
#@verbatim
#@-node:#@file
#@verbatim
#@-leo
last line 1: newline
#@-node:ekr.20070627082044.104:Output
#@-node:ekr.20070627082044.102:@test @file one newline
#@+node:ekr.20070627082044.105:@test @file two newlines
import leoTest

leoTest.runAtFileTest(c,p)
#@nonl
#@+node:ekr.20070627082044.106:#@file
Line 1

@last last line 1: two trailing newlines
#@-node:ekr.20070627082044.106:#@file
#@+node:ekr.20070627082044.107:Output
#@verbatim
#@+leo-ver=4
#@verbatim
#@+node:#@file
Line 1

#@verbatim
#@@last
#@verbatim
#@-node:#@file
#@verbatim
#@-leo
last line 1: two trailing newlines
#@-node:ekr.20070627082044.107:Output
#@-node:ekr.20070627082044.105:@test @file two newlines
#@+node:ekr.20070627082044.111:@test @nosent
import leoTest

leoTest.runAtFileTest(c,p)
#@nonl
#@+node:ekr.20070627082044.112:#@nosent
# Test that @nosent generates no sentinels
<< section >>
@others
last line
#@nonl
#@+node:ekr.20070627082044.113:<< section >>
section line 1
#@nonl
#@-node:ekr.20070627082044.113:<< section >>
#@+node:ekr.20070627082044.114:unnamed node
unnamed node line 1
#@nonl
#@-node:ekr.20070627082044.114:unnamed node
#@-node:ekr.20070627082044.112:#@nosent
#@+node:ekr.20070627082044.115:Output
# Test that @nosent generates no sentinels
section line 1
unnamed node line 1
last line
#@-node:ekr.20070627082044.115:Output
#@-node:ekr.20070627082044.111:@test @nosent
#@+node:ekr.20070627082044.116:@test @noref
import leoTest

leoTest.runAtFileTest(c,p)
#@nonl
#@+node:ekr.20070627082044.117:#@noref
# Test that @nosent generates no sentinels

<< section >>

@others

last line
#@nonl
#@+node:ekr.20070627082044.118:<< section >>
section line 1
#@nonl
#@-node:ekr.20070627082044.118:<< section >>
#@+node:ekr.20070627082044.119:unnamed node
unnamed node line 1
#@nonl
#@-node:ekr.20070627082044.119:unnamed node
#@-node:ekr.20070627082044.117:#@noref
#@+node:ekr.20070627082044.120:Output
#@verbatim
#@+leo-ver=4
#@verbatim
#@+node:#@noref
# Test that @nosent generates no sentinels

<< section >>

@others

last line
#@verbatim
#@nonl
#@verbatim
#@-node:#@noref
#@verbatim
#@+node:<< section >>
section line 1
#@verbatim
#@nonl
#@verbatim
#@-node:<< section >>
#@verbatim
#@+node:unnamed node
unnamed node line 1
#@verbatim
#@nonl
#@verbatim
#@-node:unnamed node
#@verbatim
#@-leo
#@-node:ekr.20070627082044.120:Output
#@-node:ekr.20070627082044.116:@test @noref
#@+node:ekr.20070627082044.121:@test @asis
import leoTest

leoTest.runAtFileTest(c,p)
#@nonl
#@+node:ekr.20070627082044.122:#@asis
# Test that @nosent generates no sentinels

<< section >>

@others

last line
#@nonl
#@+node:ekr.20070627082044.123:<< section >>
section line 1
#@nonl
#@-node:ekr.20070627082044.123:<< section >>
#@+node:ekr.20070627082044.124:unnamed node
unnamed node line 1
#@nonl
#@-node:ekr.20070627082044.124:unnamed node
#@-node:ekr.20070627082044.122:#@asis
#@+node:ekr.20070627082044.125:Output
# Test that @nosent generates no sentinels

<< section >>

@others

last linesection line 1unnamed node line 1
#@nonl
#@-node:ekr.20070627082044.125:Output
#@-node:ekr.20070627082044.121:@test @asis
#@-node:ekr.20070627082044.98:Tests of @file nodes...
#@+node:ekr.20070627082044.139:@test Select a node when file is first loaded
c.redraw_now() # To make node visible

c2 = c.new()
p2 = c2.currentPosition()

try:
    # This fails, but it is possible to edit the headline.
    # assert c2.edit_widget(p2),'c2.edit_widget(p2) failed: %s' % repr(p2)
    assert p2,'p2 failed: %s' % repr(p2)
    assert c.edit_widget(p),'c.edit_widget(p) failed: %s' % repr(p)
finally:
    c2.setChanged(False)
    c2.close()
#@nonl
#@-node:ekr.20070627082044.139:@test Select a node when file is first loaded
#@-node:ekr.20070627082044.73:File read/write tests...
#@-node:ekr.20070628121120:@unit-tests General tests: no associated derived file
#@-all
#@nonl
#@-node:ekr.20070627083814.1:@thin unitTests.txt
#@-leo
