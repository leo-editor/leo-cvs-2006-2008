# Leo colorizer control file for bcel mode.

# Properties for bcel mode.
properties = {
	"commentEnd": "*/",
	"commentStart": "/*",
	"lineComment": "//",
}

# Keywords dict for bcel_main ruleset.
bcel_main_keywords_dict = {
	"aaload": "keyword1",
	"aastore": "keyword1",
	"abstract": "keyword1",
	"aconst_null": "keyword1",
	"aload": "keyword1",
	"aload_0": "keyword1",
	"aload_1": "keyword1",
	"aload_2": "keyword1",
	"aload_3": "keyword1",
	"anewarray": "keyword1",
	"areturn": "keyword1",
	"arraylength": "keyword1",
	"astore": "keyword1",
	"astore_0": "keyword1",
	"astore_1": "keyword1",
	"astore_2": "keyword1",
	"astore_3": "keyword1",
	"athrow": "keyword1",
	"baload": "keyword1",
	"bastore": "keyword1",
	"bipush": "keyword1",
	"boolean": "keyword3",
	"breakpoint": "keyword1",
	"byte": "keyword3",
	"caload": "keyword1",
	"castore": "keyword1",
	"char": "keyword3",
	"checkcast": "keyword1",
	"class": "keyword3",
	"clinit": "keyword1",
	"d2f": "keyword1",
	"d2i": "keyword1",
	"d2l": "keyword1",
	"dadd": "keyword1",
	"daload": "keyword1",
	"dastore": "keyword1",
	"dcmpg": "keyword1",
	"dcmpl": "keyword1",
	"dconst_0": "keyword1",
	"dconst_1": "keyword1",
	"ddiv": "keyword1",
	"dload": "keyword1",
	"dload_0": "keyword1",
	"dload_1": "keyword1",
	"dload_2": "keyword1",
	"dload_3": "keyword1",
	"dmul": "keyword1",
	"dneg": "keyword1",
	"double": "keyword3",
	"drem": "keyword1",
	"dreturn": "keyword1",
	"dstore": "keyword1",
	"dstore_0": "keyword1",
	"dstore_1": "keyword1",
	"dstore_2": "keyword1",
	"dstore_3": "keyword1",
	"dsub": "keyword1",
	"dup": "keyword1",
	"dup2": "keyword1",
	"dup2_x1": "keyword1",
	"dup2_x2": "keyword1",
	"dup_x1": "keyword1",
	"dup_x2": "keyword1",
	"extends": "keyword1",
	"f2d": "keyword1",
	"f2i": "keyword1",
	"f2l": "keyword1",
	"fadd": "keyword1",
	"faload": "keyword1",
	"fastore": "keyword1",
	"fcmpg": "keyword1",
	"fcmpl": "keyword1",
	"fconst_0": "keyword1",
	"fconst_1": "keyword1",
	"fconst_2": "keyword1",
	"fdiv": "keyword1",
	"final": "keyword1",
	"fload": "keyword1",
	"fload_0": "keyword1",
	"fload_1": "keyword1",
	"fload_2": "keyword1",
	"fload_3": "keyword1",
	"float": "keyword3",
	"fmul": "keyword1",
	"fneg": "keyword1",
	"frem": "keyword1",
	"freturn": "keyword1",
	"fstore": "keyword1",
	"fstore_0": "keyword1",
	"fstore_1": "keyword1",
	"fstore_2": "keyword1",
	"fstore_3": "keyword1",
	"fsub": "keyword1",
	"getfield": "keyword1",
	"getstatic": "keyword1",
	"goto": "keyword1",
	"goto_w": "keyword1",
	"i2b": "keyword1",
	"i2c": "keyword1",
	"i2d": "keyword1",
	"i2f": "keyword1",
	"i2l": "keyword1",
	"i2s": "keyword1",
	"iadd": "keyword1",
	"iaload": "keyword1",
	"iand": "keyword1",
	"iastore": "keyword1",
	"iconst_0": "keyword1",
	"iconst_1": "keyword1",
	"iconst_2": "keyword1",
	"iconst_3": "keyword1",
	"iconst_4": "keyword1",
	"iconst_5": "keyword1",
	"iconst_m1": "keyword1",
	"idiv": "keyword1",
	"if_acmpeq": "keyword1",
	"if_acmpne": "keyword1",
	"if_icmpeq": "keyword1",
	"if_icmpge": "keyword1",
	"if_icmpgt": "keyword1",
	"if_icmple": "keyword1",
	"if_icmplt": "keyword1",
	"if_icmpne": "keyword1",
	"ifeq": "keyword1",
	"ifge": "keyword1",
	"ifgt": "keyword1",
	"ifle": "keyword1",
	"iflt": "keyword1",
	"ifne": "keyword1",
	"ifnonnull": "keyword1",
	"ifnull": "keyword1",
	"iinc": "keyword1",
	"iload": "keyword1",
	"iload_0": "keyword1",
	"iload_1": "keyword1",
	"iload_2": "keyword1",
	"iload_3": "keyword1",
	"impdep1": "keyword1",
	"impdep2": "keyword1",
	"implements": "keyword1",
	"imul": "keyword1",
	"ineg": "keyword1",
	"init": "keyword1",
	"instanceof": "keyword1",
	"int": "keyword3",
	"interface": "keyword3",
	"invokeinterface": "keyword1",
	"invokespecial": "keyword1",
	"invokestatic": "keyword1",
	"invokevirtual": "keyword1",
	"ior": "keyword1",
	"irem": "keyword1",
	"ireturn": "keyword1",
	"ishl": "keyword1",
	"ishr": "keyword1",
	"istore": "keyword1",
	"istore_0": "keyword1",
	"istore_1": "keyword1",
	"istore_2": "keyword1",
	"istore_3": "keyword1",
	"isub": "keyword1",
	"iushr": "keyword1",
	"ixor": "keyword1",
	"jsr": "keyword1",
	"jsr_w": "keyword1",
	"l2d": "keyword1",
	"l2f": "keyword1",
	"l2i": "keyword1",
	"ladd": "keyword1",
	"laload": "keyword1",
	"land": "keyword1",
	"lastore": "keyword1",
	"lcmp": "keyword1",
	"lconst_0": "keyword1",
	"lconst_1": "keyword1",
	"ldc": "keyword1",
	"ldc2_w": "keyword1",
	"ldc_w": "keyword1",
	"ldiv": "keyword1",
	"lload": "keyword1",
	"lload_0": "keyword1",
	"lload_1": "keyword1",
	"lload_2": "keyword1",
	"lload_3": "keyword1",
	"lmul": "keyword1",
	"lneg": "keyword1",
	"long": "keyword3",
	"lookupswitch": "keyword1",
	"lor": "keyword1",
	"lrem": "keyword1",
	"lreturn": "keyword1",
	"lshl": "keyword1",
	"lshr": "keyword1",
	"lstore": "keyword1",
	"lstore_0": "keyword1",
	"lstore_1": "keyword1",
	"lstore_2": "keyword1",
	"lstore_3": "keyword1",
	"lsub": "keyword1",
	"lushr": "keyword1",
	"lxor": "keyword1",
	"monitorenter": "keyword1",
	"monitorexit": "keyword1",
	"multianewarray": "keyword1",
	"native": "keyword1",
	"new": "keyword1",
	"newarray": "keyword1",
	"nop": "keyword1",
	"pop": "keyword1",
	"pop2": "keyword1",
	"private": "keyword1",
	"protected": "keyword1",
	"public": "keyword1",
	"putfield": "keyword1",
	"putstatic": "keyword1",
	"ret": "keyword1",
	"return": "keyword1",
	"saload": "keyword1",
	"sastore": "keyword1",
	"short": "keyword3",
	"sipush": "keyword1",
	"static": "keyword1",
	"swap": "keyword1",
	"synchronized": "keyword1",
	"tableswitch": "keyword1",
	"throw": "keyword1",
	"throws": "keyword1",
	"transient": "keyword1",
	"void": "keyword3",
	"volatile": "keyword1",
	"wide": "keyword1",
}

# Dictionary of keywords dictionaries for bcel mode.
keywordsDictDict = {
	"bcel_main": bcel_main_keywords_dict,
}

# Rules for bcel_main ruleset.

def rule0(colorer, s, i):
    return colorer.match_seq(s, i, kind="comment1", seq="/**/",
        at_line_start=False, at_whitespace_end=False, at_word_start=False, delegate="")

def rule1(colorer, s, i):
    return colorer.match_span(s, i, kind="comment3", begin="/**", end="*/",
        at_line_start=False, at_whitespace_end=False, at_word_start=False,
        delegate="JAVADOC",exclude_match=False,
        no_escape=False, no_line_break=False, no_word_break=False)

def rule2(colorer, s, i):
    return colorer.match_span(s, i, kind="comment1", begin="/*", end="*/",
        at_line_start=False, at_whitespace_end=False, at_word_start=False,
        delegate="",exclude_match=False,
        no_escape=False, no_line_break=False, no_word_break=False)

def rule3(colorer, s, i):
    return colorer.match_eol_span(s, i, kind="comment2", seq="//",
        at_line_start=False, at_whitespace_end=False, at_word_start=False,
        delegate="", exclude_match=False)

def rule4(colorer, s, i):
    return colorer.match_span(s, i, kind="literal1", begin="'", end="'",
        at_line_start=False, at_whitespace_end=False, at_word_start=False,
        delegate="",exclude_match=False,
        no_escape=False, no_line_break=True, no_word_break=False)

def rule5(colorer, s, i):
    return colorer.match_span(s, i, kind="literal1", begin="\"", end="\"",
        at_line_start=False, at_whitespace_end=False, at_word_start=False,
        delegate="",exclude_match=False,
        no_escape=False, no_line_break=True, no_word_break=False)

def rule6(colorer, s, i):
    return colorer.match_mark_following(s, i, kind="keyword2", pattern="%"
        at_line_start=False, at_whitespace_end=False, at_word_start=False, exclude_match=False)

def rule7(colorer, s, i):
    return colorer.match_mark_following(s, i, kind="keyword2", pattern="#"
        at_line_start=False, at_whitespace_end=False, at_word_start=False, exclude_match=False)

def rule8(colorer, s, i):
    return colorer.match_mark_previous(s, i, kind="label", pattern=":",
        at_line_start=True, at_whitespace_end=False, at_word_start=False, exclude_match=True)

def rule9(colorer, s, i):
    return colorer.match_seq(s, i, kind="operator", seq=">",
        at_line_start=False, at_whitespace_end=False, at_word_start=False, delegate="")

def rule10(colorer, s, i):
    return colorer.match_seq(s, i, kind="operator", seq="<",
        at_line_start=False, at_whitespace_end=False, at_word_start=False, delegate="")

def rule11(colorer, s, i):
    return colorer.match_keywords(s, i)

# Rules dict for main ruleset.
rulesDict1 = {
	"\"": [rule5,],
	"#": [rule7,],
	"%": [rule6,],
	"'": [rule4,],
	"/": [rule0,rule1,rule2,rule3,],
	"0": [rule11,],
	"1": [rule11,],
	"2": [rule11,],
	"3": [rule11,],
	"4": [rule11,],
	"5": [rule11,],
	"6": [rule11,],
	"7": [rule11,],
	"8": [rule11,],
	"9": [rule11,],
	":": [rule8,],
	"<": [rule10,],
	">": [rule9,],
	"@": [rule11,],
	"A": [rule11,],
	"B": [rule11,],
	"C": [rule11,],
	"D": [rule11,],
	"E": [rule11,],
	"F": [rule11,],
	"G": [rule11,],
	"H": [rule11,],
	"I": [rule11,],
	"J": [rule11,],
	"K": [rule11,],
	"L": [rule11,],
	"M": [rule11,],
	"N": [rule11,],
	"O": [rule11,],
	"P": [rule11,],
	"Q": [rule11,],
	"R": [rule11,],
	"S": [rule11,],
	"T": [rule11,],
	"U": [rule11,],
	"V": [rule11,],
	"W": [rule11,],
	"X": [rule11,],
	"Y": [rule11,],
	"Z": [rule11,],
	"_": [rule11,],
	"a": [rule11,],
	"b": [rule11,],
	"c": [rule11,],
	"d": [rule11,],
	"e": [rule11,],
	"f": [rule11,],
	"g": [rule11,],
	"h": [rule11,],
	"i": [rule11,],
	"j": [rule11,],
	"k": [rule11,],
	"l": [rule11,],
	"m": [rule11,],
	"n": [rule11,],
	"o": [rule11,],
	"p": [rule11,],
	"q": [rule11,],
	"r": [rule11,],
	"s": [rule11,],
	"t": [rule11,],
	"u": [rule11,],
	"v": [rule11,],
	"w": [rule11,],
	"x": [rule11,],
	"y": [rule11,],
	"z": [rule11,],
}

# x.rulesDictDict for bcel mode.
rulesDictDict = {
	"bcel_main": rulesDict1,
}

# Import dict for bcel mode.
importDict = {}

