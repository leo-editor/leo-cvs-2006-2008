# Leo colorizer control file for bbj mode.

# Properties for bbj mode.
properties = {
	"commentEnd": "*/",
	"commentStart": "/*",
	"wordBreakChars": ",+-=<>/?^&*",
}

# Keywords dict for bbj_main ruleset.
bbj_main_keywords_dict = {
	"		": "keywords",
	"			": "keywords",
	"
": "keywords",
	"ABS": "keyword1",
	"ADDR": "keyword3",
	"ADJN": "keyword1",
	"ALL": "keyword3",
	"ARGC": "keyword1",
	"ARGV": "keyword1",
	"ASC": "keyword1",
	"ATH": "keyword1",
	"ATN": "keyword1",
	"AUTO": "keyword3",
	"BACKGROUND": "keyword1",
	"BEGIN": "keyword3",
	"BIN": "keyword1",
	"BREAK": "keyword3",
	"BSZ": "keyword1",
	"CALL": "keyword3",
	"CALLBACK": "keyword1",
	"CASE": "keyword3",
	"CHANOPT": "keyword1",
	"CHDIR": "keyword2",
	"CHN": "keyword3",
	"CHR": "keyword1",
	"CISAM": "keyword2",
	"CLEAR": "keyword3",
	"CLIPCLEAR": "keyword1",
	"CLIPFROMFILE": "keyword1",
	"CLIPFROMSTR": "keyword1",
	"CLIPISFORMAT": "keyword1",
	"CLIPLOCK": "keyword1",
	"CLIPREGFORMAT": "keyword1",
	"CLIPTOFILE": "keyword1",
	"CLIPTOSTR": "keyword1",
	"CLIPUNLOCK": "keyword1",
	"CLOSE": "keyword2",
	"CONTINUE": "keyword2",
	"COS": "keyword1",
	"CPL": "keyword1",
	"CRC": "keyword1",
	"CRC16": "keyword1",
	"CTL": "keyword3",
	"CTRL": "keyword1",
	"CVS": "keyword1",
	"CVT": "keyword1",
	"DATA": "keyword3",
	"DATE": "keyword1",
	"DAY": "keyword3",
	"DEC": "keyword1",
	"DEF": "keyword3",
	"DEFAULT": "keyword3",
	"DEFEND": "keyword3",
	"DELETE": "keyword3",
	"DIM": "keyword3",
	"DIMS": "keyword1",
	"DIR": "keyword2",
	"DIRECT": "keyword2",
	"DISABLE": "keyword2",
	"DOM": "keyword2",
	"DREAD": "keyword3",
	"DROP": "keyword3",
	"DSK": "keyword1",
	"DSZ": "keyword1",
	"DUMP": "keyword2",
	"EDIT": "keyword3",
	"ELSE": "keyword3",
	"ENABLE": "keyword2",
	"END": "keyword2",
	"ENDIF": "keyword3",
	"ENDTRACE": "keyword2",
	"ENTER": "keyword3",
	"EPT": "keyword1",
	"ERASE": "keyword2",
	"ERR": "keyword3",
	"ERRMES": "keyword1",
	"ESCAPE": "keyword3",
	"ESCOFF": "keyword3",
	"ESCON": "keyword3",
	"EXECUTE": "keyword3",
	"EXIT": "keyword3",
	"EXITTO": "keyword3",
	"EXTRACT": "keyword2",
	"FATTR": "keyword1",
	"FBIN": "keyword1",
	"FDEC": "keyword1",
	"FI": "keyword3",
	"FID": "keyword2",
	"FIELD": "keyword1",
	"FILE": "keyword2",
	"FILEOPT": "keyword1",
	"FILL": "keyword1",
	"FIN": "keyword2",
	"FIND": "keyword2",
	"FLOATINGPOINT": "keyword1",
	"FOR": "keyword3",
	"FPT": "keyword1",
	"FROM": "keyword2",
	"GAP": "keyword1",
	"GOSUB": "keyword3",
	"GOTO": "keyword3",
	"HSA": "keyword1",
	"HSH": "keyword1",
	"HTA": "keyword1",
	"IF": "keyword3",
	"IFF": "keyword3",
	"IMP": "keyword1",
	"IND": "keyword2",
	"INDEXED": "keyword2",
	"INFO": "keyword1",
	"INITFILE": "keyword3",
	"INPUT": "keyword2",
	"INPUTE": "keyword2",
	"INPUTN": "keyword2",
	"INT": "keyword1",
	"IOL": "keyword2",
	"IOLIST": "keyword2",
	"IOR": "keyword3",
	"JUL": "keyword1",
	"KEY": "keyword2",
	"KEYF": "keyword2",
	"KEYL": "keyword2",
	"KEYN": "keyword2",
	"KEYP": "keyword2",
	"KGEN": "keyword2",
	"KNUM": "keyword2",
	"LCHECKIN": "keyword1",
	"LCHECKOUT": "keyword1",
	"LEN": "keyword1",
	"LET": "keyword3",
	"LINFO": "keyword1",
	"LIST": "keyword2",
	"LOAD": "keyword2",
	"LOCK": "keyword2",
	"LOG": "keyword1",
	"LRC": "keyword1",
	"LST": "keyword1",
	"MASK": "keyword1",
	"MAX": "keyword1",
	"MENUINFO": "keyword1",
	"MERGE": "keyword2",
	"MIN": "keyword1",
	"MKDIR": "keyword2",
	"MKEYED": "keyword2",
	"MOD": "keyword1",
	"MSGBOX": "keyword1",
	"NEVAL": "keyword1",
	"NEXT": "keyword3",
	"NFIELD": "keyword1",
	"NOT": "keyword3",
	"NOTICE": "keyword1",
	"NOTICETPL": "keyword1",
	"NUM": "keyword1",
	"ON": "keyword3",
	"OPEN": "keyword2",
	"OPTS": "keyword3",
	"OR": "keyword3",
	"PAD": "keyword1",
	"PCK": "keyword1",
	"PFX": "keyword3",
	"PGM": "keyword1",
	"POS": "keyword1",
	"PRECISION": "keyword3",
	"PREFIX": "keyword2",
	"PRINT": "keyword2",
	"PROCESS_EVENTS": "keyword1",
	"PROGRAM": "keyword1",
	"PSZ": "keyword1",
	"PUB": "keyword1",
	"READ": "keyword2",
	"READ_RESOURCE": "keyword2",
	"RECORD": "keyword2",
	"RELEASE": "keyword3",
	"REMOVE": "keyword2",
	"REMOVE_CALLBACK": "keyword1",
	"RENAME": "keyword2",
	"RENUM": "keyword3",
	"REPEAT": "keyword3",
	"RESCLOSE": "keyword2",
	"RESERVE": "keyword1",
	"RESET": "keyword3",
	"RESFIRST": "keyword2",
	"RESGET": "keyword2",
	"RESINFO": "keyword2",
	"RESNEXT": "keyword2",
	"RESOPEN": "keyword2",
	"RESTORE": "keyword3",
	"RETRY": "keyword3",
	"RETURN": "keyword3",
	"REV": "keyword2",
	"RMDIR": "keyword2",
	"RND": "keyword1",
	"ROUND": "keyword1",
	"RUN": "keyword3",
	"SAVE": "keyword2",
	"SCALL": "keyword1",
	"SELECT": "keyword2",
	"SENDMSG": "keyword1",
	"SERIAL": "keyword2",
	"SETDAY": "keyword2",
	"SETDRIVE": "keyword2",
	"SETERR": "keyword3",
	"SETESC": "keyword3",
	"SETOPTS": "keyword3",
	"SETTIME": "keyword3",
	"SETTRACE": "keyword2",
	"SET_CASE_SENSITIVE_OFF": "keyword3",
	"SET_CASE_SENSITIVE_ON": "keyword3",
	"SEVAL": "keyword1",
	"SGN": "keyword1",
	"SIN": "keyword1",
	"SIZ": "keyword2",
	"SORT": "keyword2",
	"SQLCHN": "keyword2",
	"SQLCLOSE": "keyword2",
	"SQLERR": "keyword2",
	"SQLEXEC": "keyword2",
	"SQLFETCH": "keyword2",
	"SQLLIST": "keyword2",
	"SQLOPEN": "keyword2",
	"SQLPREP": "keyword2",
	"SQLSET": "keyword2",
	"SQLTABLES": "keyword2",
	"SQLTMPL": "keyword2",
	"SQLUNT": "keyword2",
	"SQR": "keyword1",
	"SSN": "keyword3",
	"SSORT": "keyword1",
	"SSZ": "keyword1",
	"START": "keyword3",
	"STBL": "keyword1",
	"STEP": "keyword3",
	"STOP": "keyword3",
	"STR": "keyword1",
	"STRING": "keyword2",
	"SWAP": "keyword1",
	"SWEND": "keyword3",
	"SWITCH": "keyword3",
	"SYS": "keyword1",
	"TABLE": "keyword2",
	"TBL": "keyword2",
	"TCB": "keyword1",
	"THEN": "keyword3",
	"TIM": "keyword2",
	"TMPL": "keyword1",
	"TO": "keyword3",
	"TSK": "keyword1",
	"UNLOCK": "keyword2",
	"UNT": "keyword3",
	"UNTIL": "keyword3",
	"UPK": "keyword1",
	"WAIT": "keyword3",
	"WEND": "keyword3",
	"WHERE": "keyword2",
	"WHILE": "keyword3",
	"WINFIRST": "keyword1",
	"WININFO": "keyword1",
	"WINNEXT": "keyword1",
	"WRITE": "keyword2",
	"XFID": "keyword2",
	"XFILE": "keyword2",
	"XFIN": "keyword2",
	"XOR": "keyword3",
}

# Dictionary of keywords dictionaries for bbj mode.
keywordsDictDict = {
	"bbj_main": bbj_main_keywords_dict,
}

# Rules for bbj_main ruleset.

def rule0(colorer, s, i):
    return colorer.match_span(s, i, kind="comment1", begin="/*", end="*/",
        at_line_start=False, at_whitespace_end=False, at_word_start=False,
        delegate="",exclude_match=False,
        no_escape=False, no_line_break=False, no_word_break=False)

def rule1(colorer, s, i):
    return colorer.match_span(s, i, kind="literal1", begin="\"", end="\"",
        at_line_start=False, at_whitespace_end=False, at_word_start=False,
        delegate="",exclude_match=False,
        no_escape=False, no_line_break=True, no_word_break=False)

def rule2(colorer, s, i):
    return colorer.match_eol_span(s, i, kind="comment2", seq="//",
        at_line_start=False, at_whitespace_end=False, at_word_start=False,
        delegate="", exclude_match=False)

def rule3(colorer, s, i):
    return colorer.match_eol_span(s, i, kind="comment2", seq="REM",
        at_line_start=False, at_whitespace_end=False, at_word_start=False,
        delegate="", exclude_match=False)

def rule4(colorer, s, i):
    return colorer.match_seq(s, i, kind="operator", seq="=",
        at_line_start=False, at_whitespace_end=False, at_word_start=False, delegate="")

def rule5(colorer, s, i):
    return colorer.match_seq(s, i, kind="operator", seq=">=",
        at_line_start=False, at_whitespace_end=False, at_word_start=False, delegate="")

def rule6(colorer, s, i):
    return colorer.match_seq(s, i, kind="operator", seq="<=",
        at_line_start=False, at_whitespace_end=False, at_word_start=False, delegate="")

def rule7(colorer, s, i):
    return colorer.match_seq(s, i, kind="operator", seq="+",
        at_line_start=False, at_whitespace_end=False, at_word_start=False, delegate="")

def rule8(colorer, s, i):
    return colorer.match_seq(s, i, kind="operator", seq="-",
        at_line_start=False, at_whitespace_end=False, at_word_start=False, delegate="")

def rule9(colorer, s, i):
    return colorer.match_seq(s, i, kind="operator", seq="/",
        at_line_start=False, at_whitespace_end=False, at_word_start=False, delegate="")

def rule10(colorer, s, i):
    return colorer.match_seq(s, i, kind="operator", seq="*",
        at_line_start=False, at_whitespace_end=False, at_word_start=False, delegate="")

def rule11(colorer, s, i):
    return colorer.match_seq(s, i, kind="operator", seq=">",
        at_line_start=False, at_whitespace_end=False, at_word_start=False, delegate="")

def rule12(colorer, s, i):
    return colorer.match_seq(s, i, kind="operator", seq="<",
        at_line_start=False, at_whitespace_end=False, at_word_start=False, delegate="")

def rule13(colorer, s, i):
    return colorer.match_seq(s, i, kind="operator", seq="<>",
        at_line_start=False, at_whitespace_end=False, at_word_start=False, delegate="")

def rule14(colorer, s, i):
    return colorer.match_seq(s, i, kind="operator", seq="^",
        at_line_start=False, at_whitespace_end=False, at_word_start=False, delegate="")

def rule15(colorer, s, i):
    return colorer.match_seq(s, i, kind="operator", seq="and",
        at_line_start=False, at_whitespace_end=False, at_word_start=False, delegate="")

def rule16(colorer, s, i):
    return colorer.match_seq(s, i, kind="operator", seq="or",
        at_line_start=False, at_whitespace_end=False, at_word_start=False, delegate="")

def rule17(colorer, s, i):
    return colorer.match_mark_previous(s, i, kind="label", pattern=":",
        at_line_start=True, at_whitespace_end=False, at_word_start=False, exclude_match=True)

def rule18(colorer, s, i):
    return colorer.match_mark_previous(s, i, kind="function", pattern="(",
        at_line_start=False, at_whitespace_end=False, at_word_start=False, exclude_match=True)

def rule19(colorer, s, i):
    return colorer.match_keywords(s, i)

# Rules dict for main ruleset.
rulesDict1 = {
	"\"": [rule1,],
	"(": [rule18,],
	"*": [rule10,],
	"+": [rule7,],
	"-": [rule8,],
	"/": [rule0,rule2,rule9,],
	"0": [rule19,],
	"1": [rule19,],
	"2": [rule19,],
	"3": [rule19,],
	"4": [rule19,],
	"5": [rule19,],
	"6": [rule19,],
	"7": [rule19,],
	"8": [rule19,],
	"9": [rule19,],
	":": [rule17,],
	"<": [rule6,rule12,rule13,],
	"=": [rule4,],
	">": [rule5,rule11,],
	"@": [rule19,],
	"A": [rule19,],
	"B": [rule19,],
	"C": [rule19,],
	"D": [rule19,],
	"E": [rule19,],
	"F": [rule19,],
	"G": [rule19,],
	"H": [rule19,],
	"I": [rule19,],
	"J": [rule19,],
	"K": [rule19,],
	"L": [rule19,],
	"M": [rule19,],
	"N": [rule19,],
	"O": [rule19,],
	"P": [rule19,],
	"Q": [rule19,],
	"R": [rule3,rule19,],
	"S": [rule19,],
	"T": [rule19,],
	"U": [rule19,],
	"V": [rule19,],
	"W": [rule19,],
	"X": [rule19,],
	"Y": [rule19,],
	"Z": [rule19,],
	"^": [rule14,],
	"_": [rule19,],
	"a": [rule15,rule19,],
	"b": [rule19,],
	"c": [rule19,],
	"d": [rule19,],
	"e": [rule19,],
	"f": [rule19,],
	"g": [rule19,],
	"h": [rule19,],
	"i": [rule19,],
	"j": [rule19,],
	"k": [rule19,],
	"l": [rule19,],
	"m": [rule19,],
	"n": [rule19,],
	"o": [rule16,rule19,],
	"p": [rule19,],
	"q": [rule19,],
	"r": [rule19,],
	"s": [rule19,],
	"t": [rule19,],
	"u": [rule19,],
	"v": [rule19,],
	"w": [rule19,],
	"x": [rule19,],
	"y": [rule19,],
	"z": [rule19,],
}

# x.rulesDictDict for bbj mode.
rulesDictDict = {
	"bbj_main": rulesDict1,
}

# Import dict for bbj mode.
importDict = {}

