# Leo colorizer control file for maple mode.

# Properties for maple mode.
properties = {
	"lineComment": "//",
}

# Keywords dict for maple_main ruleset.
maple_main_keywords_dict = {
	"AFactor": "function",
	"AFactors": "function",
	"AIrreduc": "function",
	"AiryAi": "function",
	"AiryAiZeros": "function",
	"AiryBi": "function",
	"AiryBiZeros": "function",
	"AngerJ": "function",
	"Array": "function",
	"ArrayDims": "function",
	"ArrayElems": "function",
	"ArrayIndFns": "function",
	"ArrayOptions": "function",
	"Berlekamp": "function",
	"BesselI": "function",
	"BesselJ": "function",
	"BesselJZeros": "function",
	"BesselK": "function",
	"BesselY": "function",
	"BesselYZeros": "function",
	"Beta": "function",
	"C": "function",
	"CLi": "function",
	"Catalan": "literal2",
	"ChebyShevU": "function",
	"ChebyshevT": "function",
	"CheckArgs": "function",
	"Chi": "function",
	"Ci": "function",
	"CompSeq": "function",
	"Content": "function",
	"CopySign": "function",
	"CylinderD": "function",
	"CylinderU": "function",
	"CylinderV": "function",
	"D": "function",
	"DESol": "function",
	"Default0": "function",
	"DefaultOverflow": "function",
	"DefaultUnderflow": "function",
	"Det": "function",
	"Diff": "function",
	"Digits": "literal2",
	"Dirac": "function",
	"DistDeg": "function",
	"Divide": "function",
	"Ei": "function",
	"Eigenvals": "function",
	"EllipticCE": "function",
	"EllipticCK": "function",
	"EllipticCPi": "function",
	"EllipticE": "function",
	"EllipticF": "function",
	"EllipticK": "function",
	"EllipticModulus": "function",
	"EllipticNome": "function",
	"EllipticPi": "function",
	"Eval": "function",
	"Excel": "function",
	"Expand": "function",
	"FAIL": "literal2",
	"FFT": "function",
	"Factor": "function",
	"Factors": "function",
	"FresnelC": "function",
	"FresnelS": "function",
	"Fresnelf": "function",
	"Fresnelg": "function",
	"FromInert": "function",
	"GAMMA": "function",
	"GF": "function",
	"GaussAGM": "function",
	"Gausselim": "function",
	"Gaussjord": "function",
	"Gcd": "function",
	"Gcdex": "function",
	"GegenbauerC": "function",
	"GetResultDataType": "function",
	"GetResultShape": "function",
	"Greek": "function",
	"HankelH1": "function",
	"HankelH2": "function",
	"Heaviside": "function",
	"Hermite": "function",
	"HermiteH": "function",
	"Hessenberg": "function",
	"I": "literal2",
	"IEEEdiffs": "function",
	"Im": "function",
	"ImportMatrix": "function",
	"ImportVector": "function",
	"Interp": "function",
	"Inverse": "function",
	"Irreduc": "function",
	"IsMatrixShape": "function",
	"JacobiAM": "function",
	"JacobiCD": "function",
	"JacobiCN": "function",
	"JacobiCS": "function",
	"JacobiDC": "function",
	"JacobiDN": "function",
	"JacobiDS": "function",
	"JacobiNC": "function",
	"JacobiND": "function",
	"JacobiNS": "function",
	"JacobiP": "function",
	"JacobiSC": "function",
	"JacobiSD": "function",
	"JacobiSN": "function",
	"JacobiTheta1": "function",
	"JacobiTheta2": "function",
	"JacobiTheta3": "function",
	"JacobiTheta4": "function",
	"JacobiZeta": "function",
	"KelvinBei": "function",
	"KelvinBer": "function",
	"KelvinHei": "function",
	"KelvinHer": "function",
	"KelvinKei": "function",
	"KelvinKer": "function",
	"KummerM": "function",
	"KummerU": "function",
	"LaguerreL": "function",
	"LambertW": "function",
	"Lcm": "function",
	"LegendreP": "function",
	"LegendreQ": "function",
	"LerchPhi": "function",
	"Limit": "function",
	"Linsolve": "function",
	"LommelS1": "function",
	"Lommels2": "function",
	"MOLS": "function",
	"Maple_floats": "function",
	"MatlabMatrix": "function",
	"Matrix": "function",
	"MatrixOptions": "function",
	"MeijerG": "function",
	"ModifiedMeijerG": "function",
	"NULL": "literal2",
	"NextAfter": "function",
	"Normal": "function",
	"Nullspace": "function",
	"NumericClass": "function",
	"NumericEvent": "function",
	"NumericEventHandler": "function",
	"NumericException": "function",
	"NumericStatus": "function",
	"Order": "literal2",
	"OrderedNE": "function",
	"PDEplot_options": "function",
	"Pi": "literal2",
	"Power": "function",
	"Powmod": "function",
	"Prem": "function",
	"Preprocessor": "function",
	"Primitive": "function",
	"Primpart": "function",
	"ProbSplit": "function",
	"ProcessOptions": "function",
	"Product": "function",
	"Psi": "function",
	"Quo": "function",
	"RESol": "function",
	"Randpoly": "function",
	"Randprime": "function",
	"Ratrecon": "function",
	"Re": "function",
	"Record": "function",
	"Reduce": "function",
	"Rem": "function",
	"Resultant": "function",
	"RootOf": "function",
	"Roots": "function",
	"Rounding": "function",
	"SFloatExponent": "function",
	"SFloatMantissa": "function",
	"SPrem": "function",
	"SampleRTable": "function",
	"Scale10": "function",
	"Scale2": "function",
	"SearchText": "function",
	"Shi": "function",
	"Si": "function",
	"Simplify": "function",
	"Smith": "function",
	"Sqrfree": "function",
	"Ssi": "function",
	"StruveH": "function",
	"StruveL": "function",
	"Sum": "function",
	"Svd": "function",
	"TEXT": "function",
	"ToInert": "function",
	"TopologicalSort": "function",
	"Unordered": "function",
	"UseHardwareFloats": "function",
	"Vector": "function",
	"WeberE": "function",
	"WeierstrassP": "function",
	"WeierstrassPPrime": "function",
	"WeierstrassSigma": "function",
	"WeierstrassZeta": "function",
	"WhittakerM": "function",
	"WhittakerW": "function",
	"Zeta": "function",
	"`mod`": "literal2",
	"about": "function",
	"add": "function",
	"addcoords": "function",
	"additionally": "function",
	"addproperty": "function",
	"addressof": "function",
	"algebraic": "function",
	"algsubs": "function",
	"alias": "function",
	"allvalues": "function",
	"anames": "function",
	"and": "keyword1",
	"ans": "function",
	"antihermitian": "function",
	"antisymm": "function",
	"apply": "function",
	"applyop": "function",
	"applyrule": "function",
	"arccos": "function",
	"arccosh": "function",
	"arccot": "function",
	"arccoth": "function",
	"arccsc": "function",
	"arccsch": "function",
	"arcsec": "function",
	"arcsech": "function",
	"arcsin": "function",
	"arcsinh": "function",
	"arctan": "function",
	"arctanh": "function",
	"argument": "function",
	"array": "function",
	"assign": "function",
	"assigned": "function",
	"asspar": "function",
	"assume": "function",
	"assuming": "keyword1",
	"asympt": "function",
	"attributes": "function",
	"band": "function",
	"bernoulli": "function",
	"bernstein": "function",
	"branches": "function",
	"break": "keyword1",
	"by": "keyword1",
	"cat": "function",
	"catch": "keyword1",
	"ceil": "function",
	"changecoords": "function",
	"charfcn": "function",
	"chrem": "function",
	"close": "function",
	"coeff": "function",
	"coeffs": "function",
	"coeftayl": "function",
	"collect": "function",
	"combine": "function",
	"comparray": "function",
	"compiletable": "function",
	"compoly": "function",
	"conjugate": "function",
	"constant": "function",
	"constants": "literal2",
	"content": "function",
	"convergs": "function",
	"convert": "function",
	"coords": "function",
	"copy": "function",
	"cos": "function",
	"cosh": "function",
	"cot": "function",
	"coth": "function",
	"coulditbe": "function",
	"csc": "function",
	"csch": "function",
	"csgn": "function",
	"currentdir": "function",
	"curry": "function",
	"dawson": "function",
	"define": "function",
	"define_external": "function",
	"degree": "function",
	"denom": "function",
	"depends": "function",
	"description": "keyword1",
	"diagon": "function",
	"diff": "function",
	"diffop": "function",
	"dilog": "function",
	"dinterp": "function",
	"disassemble": "function",
	"discont": "function",
	"discrim": "function",
	"dismantle": "function",
	"divide": "function",
	"do": "keyword1",
	"done": "keyword1",
	"dsolve": "function",
	"efficiency": "function",
	"elif": "keyword1",
	"eliminate": "function",
	"ellipsoid": "function",
	"elliptic_int": "function",
	"else": "keyword1",
	"end": "keyword1",
	"entries": "function",
	"erf": "function",
	"erfc": "function",
	"erfi": "function",
	"error": "keyword1",
	"euler": "function",
	"eulermac": "function",
	"eval": "function",
	"evala": "function",
	"evalapply": "function",
	"evalb": "function",
	"evalc": "function",
	"evalf": "function",
	"evalfint": "function",
	"evalhf": "function",
	"evalm": "function",
	"evaln": "function",
	"evalr": "function",
	"evalrC": "function",
	"events": "function",
	"exists": "function",
	"exp": "function",
	"expand": "function",
	"expandoff": "function",
	"expandon": "function",
	"export": "keyword1",
	"exports": "function",
	"extract": "function",
	"extrema": "function",
	"factor": "function",
	"factors": "function",
	"false": "literal2",
	"fclose": "function",
	"fdiscont": "function",
	"feof": "function",
	"fflush": "function",
	"fi": "keyword1",
	"filepos": "function",
	"finally": "keyword1",
	"fixdiv": "function",
	"float": "function",
	"floor": "function",
	"fnormal": "function",
	"fold": "function",
	"fopen": "function",
	"for": "keyword1",
	"forall": "function",
	"forget": "function",
	"fprintf": "function",
	"frac": "function",
	"freeze": "function",
	"frem": "function",
	"fremove": "function",
	"from": "keyword1",
	"frontend": "function",
	"fscanf": "function",
	"fsolve": "function",
	"galois": "function",
	"gamma": "literal2",
	"gc": "function",
	"gcd": "function",
	"gcdex": "function",
	"genpoly": "function",
	"getenv": "function",
	"global": "keyword1",
	"harmonic": "function",
	"has": "function",
	"hasfun": "function",
	"hasoption": "function",
	"hastype": "function",
	"heap": "function",
	"hermitian": "function",
	"hfarray": "function",
	"history": "function",
	"hypergeom": "function",
	"iFFT": "function",
	"icontent": "function",
	"identity": "function",
	"if": "keyword1",
	"ifactor": "function",
	"ifactors": "function",
	"igcd": "function",
	"igcdex": "function",
	"ilcm": "function",
	"ilog": "function",
	"ilog10": "function",
	"ilog2": "function",
	"implicitdiff": "function",
	"implies": "keyword1",
	"in": "keyword1",
	"indets": "function",
	"index": "function",
	"indexed": "function",
	"indices": "function",
	"infinity": "literal2",
	"inifcn": "function",
	"ininame": "function",
	"initialcondition": "function",
	"initialize": "function",
	"insert": "function",
	"int": "function",
	"intat": "function",
	"integrate": "literal2",
	"interface": "function",
	"interp": "function",
	"intersect": "keyword1",
	"invfunc": "function",
	"invztrans": "function",
	"iostatus": "function",
	"iperfpow": "function",
	"iquo": "function",
	"iratrecon": "function",
	"irem": "function",
	"iroot": "function",
	"irreduc": "function",
	"is": "function",
	"iscont": "function",
	"isdifferential": "function",
	"isolate": "function",
	"isolve": "function",
	"ispoly": "function",
	"isprime": "function",
	"isqrfree": "function",
	"isqrt": "function",
	"issqr": "function",
	"ithprime": "function",
	"lasterror": "literal2",
	"latex": "function",
	"lattice": "function",
	"lcm": "function",
	"lcoeff": "function",
	"leadterm": "function",
	"length": "function",
	"lexorder": "function",
	"lhs": "function",
	"libname": "literal2",
	"limit": "function",
	"ln": "function",
	"lnGAMMA": "function",
	"local": "keyword1",
	"log": "function",
	"log10": "function",
	"lprint": "function",
	"map": "function",
	"map2": "function",
	"match": "function",
	"matrix": "function",
	"max": "function",
	"maximize": "function",
	"maxnorm": "function",
	"maxorder": "function",
	"member": "function",
	"min": "function",
	"minimize": "function",
	"minus": "keyword1",
	"mkdir": "function",
	"mod": "keyword1",
	"modp": "function",
	"modp1": "function",
	"modp2": "function",
	"modpol": "function",
	"mods": "function",
	"module": "function",
	"msolve": "function",
	"mtaylor": "function",
	"mul": "function",
	"next": "keyword1",
	"nextprime": "function",
	"nops": "function",
	"norm": "function",
	"normal": "function",
	"not": "keyword1",
	"nprintf": "function",
	"numboccur": "function",
	"numer": "function",
	"numerics": "function",
	"od": "keyword1",
	"odetest": "function",
	"op": "function",
	"open": "function",
	"option": "keyword1",
	"options": "keyword1",
	"or": "keyword1",
	"order": "function",
	"parse": "function",
	"patmatch": "function",
	"pclose": "function",
	"pdesolve": "function",
	"pdetest": "function",
	"pdsolve": "function",
	"piecewise": "function",
	"plot": "function",
	"plot3d": "function",
	"plotsetup": "function",
	"pochhammer": "function",
	"pointto": "function",
	"poisson": "function",
	"polar": "function",
	"polylog": "function",
	"polynom": "function",
	"powmod": "function",
	"prem": "function",
	"prevprime": "function",
	"primpart": "function",
	"print": "function",
	"printf": "function",
	"printlevel": "literal2",
	"proc": "keyword1",
	"procbody": "function",
	"procmake": "function",
	"product": "function",
	"proot": "function",
	"property": "function",
	"protect": "function",
	"psqrt": "function",
	"queue": "function",
	"quit": "keyword1",
	"quo": "function",
	"radfield": "function",
	"radnormal": "function",
	"radsimp": "function",
	"rand": "function",
	"randomize": "function",
	"randpoly": "function",
	"range": "function",
	"ratinterp": "function",
	"rationalize": "function",
	"ratrecon": "function",
	"read": "keyword1",
	"readbytes": "function",
	"readdata": "function",
	"readlib": "function",
	"readline": "function",
	"readstat": "function",
	"realroot": "function",
	"references": "function",
	"release": "function",
	"rem": "function",
	"remove": "function",
	"repository": "function",
	"requires": "function",
	"residue": "function",
	"resultant": "function",
	"return": "keyword1",
	"rhs": "function",
	"rmdir": "function",
	"root": "function",
	"rootbound": "function",
	"roots": "function",
	"round": "function",
	"rsolve": "function",
	"rtable": "function",
	"rtable_algebra": "function",
	"rtable_dims": "function",
	"rtable_elems": "function",
	"rtable_indfns": "function",
	"rtable_options": "function",
	"rtable_printf": "function",
	"rtable_scanf": "function",
	"save": "keyword1",
	"savelib": "function",
	"scalar": "function",
	"scan": "function",
	"scanf": "function",
	"searchtext": "function",
	"sec": "function",
	"sech": "function",
	"select": "function",
	"selectfun": "function",
	"selectremove": "function",
	"seq": "function",
	"series": "function",
	"setattribute": "function",
	"shale": "function",
	"showprofile": "function",
	"showtime": "function",
	"sign": "function",
	"signum": "function",
	"simplify": "function",
	"sin": "function",
	"singular": "function",
	"sinh": "function",
	"sinterp": "function",
	"smartplot3d": "function",
	"solve": "function",
	"solvefor": "function",
	"sort": "function",
	"sparse": "function",
	"spec_eval_rule": "function",
	"spline": "function",
	"spreadsheet": "function",
	"sprem": "function",
	"sprintf": "function",
	"sqrfree": "function",
	"sqrt": "function",
	"sscanf": "function",
	"ssystem": "function",
	"stop": "keyword1",
	"storage": "function",
	"string": "function",
	"sturm": "function",
	"sturmseq": "function",
	"subs": "function",
	"subset": "keyword1",
	"subsindets": "function",
	"subsop": "function",
	"substring": "function",
	"subtype": "function",
	"sum": "function",
	"surd": "function",
	"symmdiff": "function",
	"symmetric": "function",
	"syntax": "function",
	"system": "function",
	"table": "function",
	"tan": "function",
	"tang": "function",
	"taylor": "function",
	"testeq": "function",
	"testfloat": "function",
	"thaw": "function",
	"then": "keyword1",
	"thiele": "function",
	"time": "function",
	"timelimit": "function",
	"to": "keyword1",
	"traperror": "function",
	"triangular": "function",
	"trigsubs": "function",
	"true": "literal2",
	"trunc": "function",
	"try": "keyword1",
	"type": "function",
	"typematch": "function",
	"unames": "function",
	"unapply": "function",
	"unassign": "function",
	"undefined": "literal2",
	"union": "keyword1",
	"unit": "function",
	"unprotect": "function",
	"update": "function",
	"use": "keyword1",
	"userinfo": "function",
	"value": "function",
	"vector": "function",
	"verify": "function",
	"whattype": "function",
	"while": "keyword1",
	"with": "function",
	"worksheet": "function",
	"writebytes": "function",
	"writedata": "function",
	"writeline": "function",
	"writestat": "function",
	"writeto": "function",
	"xor": "keyword1",
	"zero": "function",
	"zip": "function",
	"ztrans": "function",
}

# Dictionary of keywords dictionaries for maple mode.
keywordsDictDict = {
	"maple_main": maple_main_keywords_dict,
}

# Rules for maple_main ruleset.

def rule0(colorer, s, i):
    return colorer.match_span(s, i, kind="literal1", begin="\"", end="\"",
        at_line_start=False, at_whitespace_end=False, at_word_start=False,
        delegate="",exclude_match=False,
        no_escape=False, no_line_break=False, no_word_break=False)

def rule1(colorer, s, i):
    return colorer.match_span(s, i, kind="literal1", begin="'", end="'",
        at_line_start=False, at_whitespace_end=False, at_word_start=False,
        delegate="",exclude_match=False,
        no_escape=False, no_line_break=False, no_word_break=False)

def rule2(colorer, s, i):
    return colorer.match_span(s, i, kind="literal1", begin="`", end="`",
        at_line_start=False, at_whitespace_end=False, at_word_start=False,
        delegate="",exclude_match=False,
        no_escape=False, no_line_break=False, no_word_break=False)

def rule3(colorer, s, i):
    return colorer.match_eol_span(s, i, kind="comment1", seq="#",
        at_line_start=False, at_whitespace_end=False, at_word_start=False,
        delegate="", exclude_match=False)

def rule4(colorer, s, i):
    return colorer.match_seq(s, i, kind="operator", seq="+",
        at_line_start=False, at_whitespace_end=False, at_word_start=False, delegate="")

def rule5(colorer, s, i):
    return colorer.match_seq(s, i, kind="operator", seq="-",
        at_line_start=False, at_whitespace_end=False, at_word_start=False, delegate="")

def rule6(colorer, s, i):
    return colorer.match_seq(s, i, kind="operator", seq="*",
        at_line_start=False, at_whitespace_end=False, at_word_start=False, delegate="")

def rule7(colorer, s, i):
    return colorer.match_seq(s, i, kind="operator", seq="/",
        at_line_start=False, at_whitespace_end=False, at_word_start=False, delegate="")

def rule8(colorer, s, i):
    return colorer.match_seq(s, i, kind="operator", seq="^",
        at_line_start=False, at_whitespace_end=False, at_word_start=False, delegate="")

def rule9(colorer, s, i):
    return colorer.match_seq(s, i, kind="operator", seq="<>",
        at_line_start=False, at_whitespace_end=False, at_word_start=False, delegate="")

def rule10(colorer, s, i):
    return colorer.match_seq(s, i, kind="operator", seq="<=",
        at_line_start=False, at_whitespace_end=False, at_word_start=False, delegate="")

def rule11(colorer, s, i):
    return colorer.match_seq(s, i, kind="operator", seq="<",
        at_line_start=False, at_whitespace_end=False, at_word_start=False, delegate="")

def rule12(colorer, s, i):
    return colorer.match_seq(s, i, kind="operator", seq=">=",
        at_line_start=False, at_whitespace_end=False, at_word_start=False, delegate="")

def rule13(colorer, s, i):
    return colorer.match_seq(s, i, kind="operator", seq=">",
        at_line_start=False, at_whitespace_end=False, at_word_start=False, delegate="")

def rule14(colorer, s, i):
    return colorer.match_seq(s, i, kind="operator", seq="=",
        at_line_start=False, at_whitespace_end=False, at_word_start=False, delegate="")

def rule15(colorer, s, i):
    return colorer.match_seq(s, i, kind="operator", seq="$",
        at_line_start=False, at_whitespace_end=False, at_word_start=False, delegate="")

def rule16(colorer, s, i):
    return colorer.match_seq(s, i, kind="operator", seq="@@",
        at_line_start=False, at_whitespace_end=False, at_word_start=False, delegate="")

def rule17(colorer, s, i):
    return colorer.match_seq(s, i, kind="operator", seq="@",
        at_line_start=False, at_whitespace_end=False, at_word_start=False, delegate="")

def rule18(colorer, s, i):
    return colorer.match_seq(s, i, kind="operator", seq="||",
        at_line_start=False, at_whitespace_end=False, at_word_start=False, delegate="")

def rule19(colorer, s, i):
    return colorer.match_seq(s, i, kind="operator", seq=":=",
        at_line_start=False, at_whitespace_end=False, at_word_start=False, delegate="")

def rule20(colorer, s, i):
    return colorer.match_seq(s, i, kind="operator", seq="::",
        at_line_start=False, at_whitespace_end=False, at_word_start=False, delegate="")

def rule21(colorer, s, i):
    return colorer.match_seq(s, i, kind="operator", seq=":-",
        at_line_start=False, at_whitespace_end=False, at_word_start=False, delegate="")

def rule22(colorer, s, i):
    return colorer.match_seq(s, i, kind="operator", seq="&",
        at_line_start=False, at_whitespace_end=False, at_word_start=False, delegate="")

def rule23(colorer, s, i):
    return colorer.match_seq(s, i, kind="operator", seq="!",
        at_line_start=False, at_whitespace_end=False, at_word_start=False, delegate="")

def rule24(colorer, s, i):
    return colorer.match_keywords(s, i)

# Rules dict for main ruleset.
rulesDict1 = {
	"!": [rule23,],
	"\"": [rule0,],
	"#": [rule3,],
	"$": [rule15,],
	"&": [rule22,],
	"'": [rule1,],
	"*": [rule6,],
	"+": [rule4,],
	"-": [rule5,],
	"/": [rule7,],
	"0": [rule24,],
	"1": [rule24,],
	"2": [rule24,],
	"3": [rule24,],
	"4": [rule24,],
	"5": [rule24,],
	"6": [rule24,],
	"7": [rule24,],
	"8": [rule24,],
	"9": [rule24,],
	":": [rule19,rule20,rule21,],
	"<": [rule9,rule10,rule11,],
	"=": [rule14,],
	">": [rule12,rule13,],
	"@": [rule16,rule17,rule24,],
	"A": [rule24,],
	"B": [rule24,],
	"C": [rule24,],
	"D": [rule24,],
	"E": [rule24,],
	"F": [rule24,],
	"G": [rule24,],
	"H": [rule24,],
	"I": [rule24,],
	"J": [rule24,],
	"K": [rule24,],
	"L": [rule24,],
	"M": [rule24,],
	"N": [rule24,],
	"O": [rule24,],
	"P": [rule24,],
	"Q": [rule24,],
	"R": [rule24,],
	"S": [rule24,],
	"T": [rule24,],
	"U": [rule24,],
	"V": [rule24,],
	"W": [rule24,],
	"X": [rule24,],
	"Y": [rule24,],
	"Z": [rule24,],
	"^": [rule8,],
	"_": [rule24,],
	"`": [rule2,],
	"a": [rule24,],
	"b": [rule24,],
	"c": [rule24,],
	"d": [rule24,],
	"e": [rule24,],
	"f": [rule24,],
	"g": [rule24,],
	"h": [rule24,],
	"i": [rule24,],
	"j": [rule24,],
	"k": [rule24,],
	"l": [rule24,],
	"m": [rule24,],
	"n": [rule24,],
	"o": [rule24,],
	"p": [rule24,],
	"q": [rule24,],
	"r": [rule24,],
	"s": [rule24,],
	"t": [rule24,],
	"u": [rule24,],
	"v": [rule24,],
	"w": [rule24,],
	"x": [rule24,],
	"y": [rule24,],
	"z": [rule24,],
	"|": [rule18,],
}

# x.rulesDictDict for maple mode.
rulesDictDict = {
	"maple_main": rulesDict1,
}

# Import dict for maple mode.
importDict = {}

