<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet ekr_stylesheet?>
<leo_file>
<leo_header file_format="2" tnodes="0" max_tnode_index="0" clone_windows="0"/>
<globals body_outline_ratio="0.450431034483">
	<global_window_position top="29" left="385" height="833" width="849"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="ekr.20050315084904"><vh>Startup</vh>
<v t="ekr.20070325123540"><vh>@chapters</vh></v>
<v t="ekr.20050315084904.1" annotate="7d71002e"><vh>@settings</vh>
<v t="ekr.20050315084904.2"><vh>@recentfiles </vh></v>
</v>
<v t="ekr.20050315084922"><vh>@button Spell</vh></v>
<v t="ekr.20051015172713"><vh>@button Save</vh></v>
<v t="ekr.20070614165755"><vh>@button create-leo-zip</vh></v>
</v>
<v t="ekr.20070622084133" a="TV"><vh>Unused</vh>
<v t="ekr.20070622075820"><vh>@@button Create Leo-4.x.zip</vh>
<v t="ekr.20070622075820.1"><vh>&lt;&lt; about this script &gt;&gt;</vh></v>
<v t="ekr.20070622075820.2"><vh>&lt;&lt; version history &gt;&gt;</vh></v>
<v t="ekr.20070622075820.3"><vh>&lt;&lt; imports &gt;&gt;</vh></v>
<v t="ekr.20070622075820.4"><vh>&lt;&lt; define files &amp; directories &gt;&gt;</vh></v>
<v t="ekr.20070622075820.5"><vh>&lt;&lt; copy createLeoDist.py to top directory &gt;&gt;</vh></v>
<v t="ekr.20070622075820.6"><vh>&lt;&lt; run createLeoDist from the top directory &gt;&gt;</vh></v>
<v t="ekr.20070622075820.7"><vh>&lt;&lt; remove temp createLeoDist.py &gt;&gt;</vh></v>
</v>
<v t="ekr.20070622081640"><vh>Setuptools stuff</vh>
<v t="ekr.20070622080750"><vh>setup.py for setuptools</vh></v>
<v t="ekr.20070620084858"><vh>@@button register (requires setup.py using setuptools)</vh></v>
<v t="ekr.20070620084858.1"><vh>@@button upload</vh></v>
</v>
</v>
<v t="EKR.20040519091259"><vh>Annoucnements (don't split into lines)</vh>
<v t="EKR.20040519091259.1"><vh>Download statistics</vh></v>
<v t="EKR.20040519091259.2"><vh>Quotes of the month</vh>
<v t="ekr.20070425092712"><vh>April 2007</vh></v>
<v t="ekr.20070101093904"><vh>January 2007</vh></v>
<v t="ekr.20060823090437"><vh>August 2006</vh></v>
<v t="ekr.20060213160806"><vh>February 2005</vh></v>
<v t="ekr.20040828084148"><vh>August 2004</vh></v>
<v t="ekr.20040630210818"><vh>July 2004</vh></v>
<v t="EKR.20040519091259.3"><vh>November 2003</vh></v>
<v t="EKR.20040519091259.4"><vh>October 2003</vh></v>
</v>
<v t="ekr.20070610174300"><vh>ANN: Leo 4.4.3 beta 2</vh></v>
<v t="ekr.20070518070012"><vh>ANN: Leo 4.4.3 beta 1</vh></v>
<v t="ekr.20070317054921"><vh>ANN: Leo 4.4.3 alpha 2</vh></v>
<v t="ekr.20070126084440"><vh>ANN: Leo 4.4.3 alpha 1</vh></v>
<v t="ekr.20061029080932.1"><vh>ANN: Leo 4.4.2.1 final</vh></v>
<v t="ekr.20061026100827"><vh>ANN: Leo 4.4.2 final</vh></v>
<v t="EKR.20040519091259.30"><vh>Previous announcements</vh>
<v t="ekr.20061026100827.1"><vh>4.4.2</vh>
<v t="ekr.20061021071838"><vh>ANN: Leo 4.4.2 beta 3</vh></v>
<v t="ekr.20061008193307"><vh>ANN: Leo 4.4.2 beta 2</vh></v>
</v>
<v t="ekr.20060929055249.2"><vh>4.4.1 &amp; 4.4.1.1</vh>
<v t="ekr.20060903103403"><vh>ANN: Leo 4.4.1.1 final</vh></v>
<v t="ekr.20060830085819"><vh>ANN: Leo 4.4.1 final</vh></v>
<v t="ekr.20060823090544"><vh>ANN: Leo 4.4.1 beta 4</vh></v>
<v t="ekr.20060629090118"><vh>ANN: Leo 4.4.1 beta 3</vh></v>
<v t="ekr.20060622182003"><vh>ANN: Leo 4.4.1 beta 2</vh></v>
<v t="ekr.20060603080748"><vh>ANN: Leo 4.4.1 beta 1</vh></v>
</v>
<v t="ekr.20060603080748.1"><vh>4.4</vh>
<v t="ekr.20060511075451"><vh>ANN: Leo 4.4 final</vh></v>
<v t="ekr.20060428085435"><vh>ANN: Leo 4.4rc1</vh></v>
<v t="ekr.20060421071350"><vh>ANN: Leo 4.4b4</vh></v>
<v t="ekr.20060330134831"><vh>ANN: Leo 4.4b3</vh></v>
<v t="ekr.20060227110642"><vh>ANN: Leo 4.4a7</vh></v>
<v t="ekr.20060217073112"><vh>ANN: Leo 4.4a6</vh></v>
<v t="ekr.20060215120457"><vh>ANN: Leo 4.4x1</vh></v>
<v t="ekr.20060213161050"><vh>ANN: Leo 4.4b2</vh></v>
<v t="ekr.20060116101806"><vh>ANN: Leo 4.4b1</vh></v>
<v t="ekr.20060106070701"><vh>ANN: Leo 4.4a5</vh></v>
<v t="ekr.20051205092824"><vh>ANN: Leo 4.4a4</vh></v>
<v t="ekr.20051110084338"><vh>ANN: Leo 4.4a3</vh></v>
<v t="ekr.20051101183219"><vh>ANN: Leo 4.4a2</vh></v>
<v t="ekr.20051015171839"><vh>ANN: Leo 4.4a1</vh></v>
</v>
<v t="ekr.20060330135143"><vh>4.3</vh>
<v t="ekr.20050919101619"><vh>ANN: Leo 4.3.3</vh></v>
<v t="ekr.20050916073410"><vh>ANN: Leo 4.3.2-final</vh></v>
<v t="ekr.20050905095110"><vh>ANN: Leo 4.3.2-b1</vh></v>
<v t="ekr.20050909083954"><vh>ANN: New docs for Leo</vh></v>
<v t="ekr.20050620150256"><vh>ANN: Leo 4.3.1</vh></v>
<v t="ekr.20050523091828"><vh>ANN: Leo 4.3-final</vh></v>
<v t="ekr.20050516064011"><vh>ANN: Leo 4.3-b2</vh></v>
<v t="ekr.20050429102040"><vh>ANN: Leo 4.3-b1</vh></v>
<v t="ekr.20050313105121"><vh>ANN: Leo 4.3-a4</vh></v>
<v t="ekr.20050212054125"><vh>ANN: Leo 4.3-a3</vh></v>
<v t="ekr.20050224070230"><vh>ANN: Leo 4.3-a2</vh></v>
<v t="ekr.20050124083006"><vh>ANN: Leo 4.3-a1</vh></v>
<v t="EKR.20040519091259.5"><vh>FAQ for comp.prog.literate</vh></v>
</v>
<v t="ekr.20060330135143.1"><vh>4.2</vh>
<v t="ekr.20040922074043"><vh>ANN: Leo 4.2 final: An outlining editor</vh></v>
<v t="ekr.20040908073013"><vh>ANN: Leo 4.2 RC1: An outlining editor</vh></v>
<v t="ekr.20040810104041"><vh>ANN: Leo 4.2 Beta 3: An outlining editor</vh></v>
<v t="ekr.20040630103409"><vh>ANN: Leo 4.2 Beta 1: An outlining editor</vh></v>
</v>
<v t="ekr.20060330135143.2"><vh>4.1</vh>
<v t="EKR.20040519091259.6"><vh>ANN: Leo 4.1 final: An outlining editor</vh></v>
<v t="EKR.20040519091259.31"><vh>ANN: Leo 4.1 rc4: An outlining editor</vh></v>
<v t="EKR.20040519091259.32"><vh>ANN: Leo 4.1 rc3: An outlining editor</vh></v>
<v t="EKR.20040519091259.33"><vh>ANN: Leo 4.1 beta 5: An outlining editor</vh></v>
</v>
<v t="EKR.20040519091259.34"><vh>4.0</vh>
<v t="EKR.20040519091259.35"><vh>ANN: Leo 4.0.4: An outlining editor</vh></v>
<v t="EKR.20040519091259.36"><vh>ANN: Leo 4.0 final: An outlining editor</vh></v>
</v>
<v t="EKR.20040519091259.37"><vh>3.x</vh>
<v t="EKR.20040519091259.38"><vh>ANN: Leo 3.3 outlining editor</vh></v>
<v t="EKR.20040519091259.39"><vh>ANN: Leo 3.5 (and 3.4) outlining editor</vh></v>
<v t="EKR.20040519091259.40"><vh>ANN: Leo 3.6 outlining editor</vh></v>
<v t="EKR.20040519091259.41"><vh>ANN: Leo 3.7 outlining editor</vh></v>
<v t="EKR.20040519091259.42"><vh>ANN: Leo 3.8 outlining editor</vh></v>
<v t="EKR.20040519091259.43"><vh>ANN: Leo 3.9 outlining editor</vh></v>
<v t="EKR.20040519091259.44"><vh>ANN: Leo 3.10 outlining editor</vh></v>
<v t="EKR.20040519091259.45"><vh>ANN: Leo 3.11b1 outlining editor</vh></v>
<v t="EKR.20040519091259.46"><vh>ANN: Leo 3.11b3 outlining editor</vh></v>
<v t="EKR.20040519091259.47"><vh>ANN: Leo 3.11b4 outlining editor</vh></v>
<v t="EKR.20040519091259.48"><vh>ANN: Leo 3.11 outlining editor</vh></v>
<v t="EKR.20040519091259.49"><vh>ANN: Leo 3.11.1 outlining editor</vh></v>
<v t="EKR.20040519091259.50"><vh>ANN: Leo 3.12 outlining editor</vh></v>
<v t="EKR.20040519091259.51"><vh>ANN: Leo 3.12 outlining editor (c.l.py)</vh></v>
</v>
</v>
</v>
<v t="ekr.20050116151024"><vh>To do (someday)</vh>
<v t="ekr.20050117031116"><vh>Make sure nsi scripts are in synch with manifest</vh></v>
<v t="ekr.20050116150710.90"><vh>Handle installation with Python 2.4 installed for Current User only</vh></v>
<v t="ekr.20050118125236"><vh>Write a script to make sure .nsi and main install scripts create the same files</vh></v>
<v t="ekr.20050119191034"><vh>Create manifest.in from manifest-nn.in</vh></v>
</v>
<v t="EKR.20040519080201.1"><vh>Distribution checklist</vh></v>
<v t="ekr.20040629175400"><vh>Pychecker stuff</vh>
<v t="EKR.20040519080201.2" tnodeList="EKR.20040519080201.2"><vh>@file-nosent C:\Documents and Settings\HP_Administrator\My Documents\Edward\.pycheckrc</vh></v>
<v t="ekr.20050430095952"><vh>Pychecker statements</vh></v>
<v t="ekr.20070126082333"><vh>Output of pychecker -h</vh></v>
<v t="ekr.20050212143754"><vh>*** Mods to pychecker in python23/site-packages ***</vh>
<v t="ekr.20050212143754.1"><vh>What I did</vh></v>
<v t="ekr.20050212143754.2"><vh>CodeChecks.py (modified)</vh>
<v t="ekr.20050212143754.3"><vh>_checkGlobal (modified)</vh></v>
<v t="ekr.20050212143754.4"><vh>_checkModuleAttribute (modified)</vh></v>
</v>
</v>
<v t="ekr.20040629173419.1" tnodeList="ekr.20040629173419.1,ekr.20040701193853,ekr.20040701193853.1,ekr.20040701193853.2,ekr.20040701193853.3,ekr.20040701193853.4,ekr.20040701193853.5"><vh>@file .pycheckrc</vh>
<v t="ekr.20040701193853"><vh>blacklist</vh></v>
<v t="ekr.20040701193853.1"><vh>defaults</vh></v>
<v t="ekr.20040701193853.2"><vh>max...</vh></v>
<v t="ekr.20040701193853.3"><vh>suppressions</vh></v>
<v t="ekr.20040701193853.4"><vh>unusedNames</vh></v>
<v t="ekr.20040701193853.5"><vh>variablesToIgnore</vh></v>
</v>
<v t="ekr.20040701160830"><vh>@url http://pychecker.sourceforge.net/</vh></v>
<v t="ekr.20040701160830.1"><vh>names for use in suppressions</vh></v>
<v t="ekr.20040629180414"><vh>pycheckrc (reference)</vh></v>
</v>
<v t="ekr.20050118095021"><vh>Leo 4.x installer</vh>
<v t="ekr.20050118103207"><vh>Keeping installer/uninstallers in synch</vh>
<v t="ekr.20050118104149"><vh>config files</vh>
<v t="ekr.20050118104149.1"><vh>&lt;&lt; install config files &gt;&gt;</vh></v>
<v t="ekr.20050118104149.2"><vh>&lt;&lt; uninstall config files &gt;&gt;</vh></v>
</v>
<v t="ekr.20050118104149.3"><vh>dist files</vh>
<v t="ekr.20050118104149.4"><vh>&lt;&lt; install dist files &gt;&gt;</vh></v>
<v t="ekr.20050118104149.5"><vh>&lt;&lt; uninstall dist files &gt;&gt;</vh></v>
</v>
<v t="ekr.20050118104901"><vh>doc files</vh>
<v t="ekr.20050118104901.1"><vh>&lt;&lt; install doc files &gt;&gt;</vh></v>
<v t="ekr.20050118104901.2"><vh>&lt;&lt; uninstall doc files &gt;&gt;</vh></v>
</v>
<v t="ekr.20050118122740"><vh>extensions files</vh>
<v t="ekr.20050118122404"><vh>&lt;&lt; install extensions files &gt;&gt;</vh></v>
<v t="ekr.20050118122740.1"><vh>&lt;&lt; uninstall extensions files &gt;&gt;</vh></v>
</v>
<v t="ekr.20050118104901.3"><vh>icons</vh>
<v t="ekr.20050118104901.4"><vh>&lt;&lt; install icons &gt;&gt;</vh></v>
<v t="ekr.20050118104901.5"><vh>&lt;&lt; uninstall icons &gt;&gt;</vh></v>
</v>
<v t="ekr.20051208100413"><vh>modes</vh>
<v t="ekr.20051208095832"><vh>&lt;&lt; install modes &gt;&gt;</vh></v>
<v t="ekr.20051208100413.1"><vh>&lt;&lt; uninstall modes &gt;&gt;</vh></v>
</v>
<v t="ekr.20050118104901.6"><vh>plugins</vh>
<v t="ekr.20050118104901.7"><vh>&lt;&lt; install plugins &gt;&gt;</vh></v>
<v t="ekr.20050118104901.8"><vh>&lt;&lt; uninstall plugins &gt;&gt;</vh></v>
</v>
<v t="ekr.20050118104901.12"><vh>scripts</vh>
<v t="ekr.20050118104901.13"><vh>&lt;&lt; install scripts &gt;&gt;</vh></v>
<v t="ekr.20050118104901.14"><vh>&lt;&lt; uninstall scripts &gt;&gt;</vh></v>
</v>
<v t="ekr.20050118104901.9" a="E"><vh>src files</vh>
<v t="ekr.20050118104901.10"><vh>&lt;&lt; install src files &gt;&gt;</vh></v>
<v t="ekr.20050118104901.11"><vh>&lt;&lt; uninstall src files &gt;&gt;</vh></v>
</v>
<v t="ekr.20050118122740.2"><vh>test files</vh>
<v t="ekr.20050118122404.1"><vh>&lt;&lt; install test files &gt;&gt;</vh></v>
<v t="ekr.20050830052109"><vh>&lt;&lt; install unittest files &gt;&gt;</vh></v>
<v t="ekr.20050118122740.3"><vh>&lt;&lt; uninstall test files &gt;&gt;</vh></v>
<v t="ekr.20050830052109.1"><vh>&lt;&lt; uninstall unittest files &gt;&gt;</vh></v>
</v>
<v t="ekr.20050118103447"><vh>top-level</vh>
<v t="ekr.20050118103207.1"><vh>&lt;&lt; install top-level files &gt;&gt;</vh></v>
<v t="ekr.20050118103447.1"><vh>&lt;&lt; uninstall top-level files &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20050118092706"><vh>@thin leo-4-3.nsi</vh></v>
</v>
<v t="EKR.20040519090846" a="E"><vh>Distribution files</vh>
<v t="ekr.20070614105133.3" tnodeList="ekr.20070614105133.3,ekr.20070614110334,ekr.20070622084634"><vh>@nosent ../setup.py</vh>
<v t="ekr.20070614110334"><vh>&lt;&lt; define long_description &gt;&gt;</vh></v>
<v t="ekr.20070622084634"><vh>&lt;&lt; define version number in setup.py &gt;&gt;</vh></v>
</v>
<v t="EKR.20040519090846.2"><vh>@asis ../doc/INSTALL.TXT</vh>
<v t="EKR.20040519090846.3"><vh>System requirements</vh></v>
<v t="EKR.20040519090846.4"><vh>Linux installation</vh></v>
<v t="EKR.20040519090846.5"><vh>Windows installation</vh></v>
<v t="EKR.20040519090846.6"><vh>MacOS installation</vh></v>
<v t="EKR.20040519090846.7"><vh>Shell &amp; batch scripts</vh></v>
</v>
<v t="EKR.20040519090846.1"><vh>@asis ../doc/LICENSE.TXT</vh></v>
<v t="EKR.20040519090846.8"><vh>@asis ../doc/PKG-INFO.TXT</vh></v>
<v t="EKR.20040519090846.9"><vh>@asis ../doc/README.TXT</vh></v>
<v t="ekr.20070622074708"><vh>@asis../manifest.in</vh></v>
<v t="EKR.20040519082027.32"><vh>Linux install/uninstall scripts</vh>
<v t="EKR.20040519082027.33"><vh>@file-thin ../install</vh></v>
<v t="EKR.20040519082027.34"><vh>@file-thin ../uninstall</vh></v>
</v>
</v>
<v t="ekr.20051205102401" a="E"><vh>Update these version numbers for each release</vh>
<v t="ekr.20050118092706.4"><vh>&lt;&lt; Settings for leo-4.3.nsi &gt;&gt;</vh></v>
<v t="ekr.20050118124408"><vh>&lt;&lt; 4.3 nsi installer version &gt;&gt;</vh></v>
<v t="ekr.20070622084634"><vh>&lt;&lt; define version number in setup.py &gt;&gt;</vh></v>
</v>
</vnodes>
<tnodes>
<t tx="EKR.20040519080201.1">@color
# Run pychecker by enabling code in leo.py
# Run all unit tests.
@nocolor
Clean up .leo files
    - leoPlugins.leo: Removed top-level clones.
    - leoPy.leo: Remove top-level clones.
    - LeoDocs.leo: select the read-me node.
Documentation
	- Update readme.txt
	- Update LeoDocs.leo
    - Update Announcement.
Version numbers
	- Update version number in Help menu.
	- Update version number in createLeoDist.py

Create the distribution using the distribution scripts.
    - Do a cvs update, with a tag.
    - Move Chinese folder out of unit test folder.

Create and test leosetup.exe.
	- Create leosetup.exe by right-clicking leo.nsi and choosing "compile with NSI (bz2)"
	- Test created leosetup.exe file.
	- test the files created in c:\program files\leo
    ** Open unitTest.leo: does it open without errors?
    ** Open leoPlugins.leo: does it open without errors?

@color
# **** Scan all folders &amp; files before uploading.
@nocolor

Create Release on SourceForge

Uploads
    - Upload leodocs.zip
	- Upload leosetup.exe
	- Upload leo-x-y.zip
	- Upload sbook.chm if it has been changed.
Announcements
    - Update version number on Leo's wikipedia site: http://en.wikipedia.org/wiki/Leo_(editor)
        - Edit with the 'Edit this page' *tab* (not a link)
    - Update version number on web site.
	- Announce to Leo's Open Forum.
    - Announce to SourceForge itself. USE ANNOUNCEMENT FORMAT, not readme format.
	- Announce to comp.lang.python
	- Register Leo at http://www.python.org/pypi?:action=submit_form</t>
<t tx="EKR.20040519080201.2"># Sample defaults file for PyChecker 0.8.13
# This file should be called:  .pycheckrc
# It should be placed in your home directory (value of $HOME).
# If $HOME is not set, it will look in the current directory.

# bool: only warn about files passed on the command line
only = 0

# int: the maximum number of warnings to be displayed
limit = 1000

# bool: warnings for Doc Strings
noDocModule = 0
noDocClass = 0
noDocFunc = 0

# bool: when checking if class data members (attributes) are set
#       check all members or __init__() only
onlyCheckInitForMembers = 0

# bool: warn when all module variables are not used (including private vars)
allVariablesUsed = 0

# bool: produce warnings for each occurrence of a warning for global (xxx)
reportAllGlobals = 0

# bool: warn when private module variables are not used (_var)
privateVariableUsed = 1

# bool: warn when imports are not used
importUsed = 1

# bool: warn when import and from ... import are used for same module
mixImport = 0 # EKR

# bool: warn when imports are not used in __init__.py
packageImportUsed = 1

# bool: warn when a module reimports another module (import &amp; from/import)
moduleImportErrors = 0 # EKR

# bool: warn when modules import themselves
reimportSelf = 0 # EKR

# bool: warn when local variables are not used
localVariablesUsed = 1

# bool:  assume a, b, and c are used in this case:  a, b, c = func()
unusedLocalTuple = 0

# bool:  warn when class attributes (data members) are unused
membersUsed = 0

# bool: warn when Subclass.__init__ is not called in a subclass
baseClassInitted = 1

# bool: warn when Subclass needs to override methods that only throw exceptions
abstractClasses = 1

# bool: warn when __init__ is defined in a subclass
initDefinedInSubclass = 0

# bool: warn when __init__ returns None
returnNoneFromInit = 1

# bool: warn when code is not reachable
unreachableCode = 0

# bool: warn when a constant is used in a conditional statement (if '':)
constantConditions = 1

# bool: warn when 1 is used in a conditional statement, (if 1: while 1: etc)
constant1 = 0

# bool: warn when iterating over a string in a for loop
stringIteration = 1

# bool: warn when setting a variable to different types
inconsistentTypes = 0

# bool: warn when setting a tuple of variables to a non-sequence (a, b = None)
unpackNonSequence = 1

# bool: warn when setting a tuple of variables to the wrong length (a, b = 1,)
unpackLength = 1

# bool: warn when using strings exceptions or 
#       other classes not derived from Exception to raise/catch exceptions
badExceptions = 1

# bool: warn when statements appear to have no effect
noEffect = 1

# bool: warn when using (expr % 1), it has no effect on integers and strings
modulo1 = 1

# bool: warn if using (expr is const-literal), 
# doesn't always work on integers and strings
isLiteral = 0 # EKR

# bool: warn when possibly using string.find() improperly (if s.find():)
stringFind = 1

# bool: warn when using a deprecated module or function
deprecated = 1

# bool: warn when the class attribute does not exist
classAttrExists = 1

# bool: warn when calling an attribute not a method
callingAttribute = 0

# bool: warn when using named arguments: func(a=1, b=2), where def func(a, b):
#       def func2(a, b, **kw): doesn't generate a warning
namedArgs = 0 # EKR

# str: name of 'self' parameter
methodArgName = 'self'

# list of str: names of first parameter to classmethods
## classmethodArgNames = ['cls', 'klass']

# bool: warn when method/function arguments are unused
argumentsUsed = 1

# bool: ignore if self is unused in methods
ignoreSelfUnused = 0

# bool: warn if functions/classes/methods names are redefined in same scope
redefiningFunction = 1

# bool:  check if an overriden method has the same signature
#	 as base class method (__init__() methods are not checked)
checkOverridenMethods = 1

# bool:  check if a special (reserved) method has the correct signature
#	 and is known (these are methods that begin and end with __
## checkSpecialMethods = 1

# int: warnings for code complexity, max value before generating a warning
maxLines = 2000
maxBranches = 500
maxReturns = 100
maxArgs = 100
maxLocals = 250
maxReferences = 500

# bool:  ignore all warnings from standard library components
#	 (this includes anything under the standard library, eg, site-packages)
ignoreStandardLibrary = 1 # EKR

# list of strings: ignore unused locals/arguments if name is one of
unusedNames = [
	'_', 'empty', 'unused', 'dummy', 'event', 'commander',
	'c', 'i', 'j', 'k', 's',
	'tag', 'args', 'keys', 'keywords']

# list of strings: ignore warnings generated from these modules
blacklist = [
	'leoFrame', 'leoMenu', 'leoGui',
        # Base classes have lots of unused params.
	'Tkinter', 'wxPython', 'gtk', 'GTK', 'GDK', 
    'mod_http',
]

# list of strings: ignore global variables not used if name is one of
variablesToIgnore = [ '__all__', '__version__', '__copyright__', ]

# bool: print the PyChecker parse of modules, classes, etc.
printParse = 0

# bool: turn debugging of PyChecker on
debug = 0

# bool: check that attributes of objects exist
checkObjectAttrs = 1

# bool: various warnings about incorrect usage of __slots__
slots = 1

# bool: check if __slots__ is empty
emptySlots = 1

# bool: check for using properties in classic classes
classicProperties = 1

# bool: check for integer division (may be problem between Python versions)
intDivide = 1

# bool: check if local variables shadow a global variable with same name
shadows = 0 # EKR

# bool: check if local variables shadow a builtin variable with same name
shadowBuiltins = 1

# bool: check if input() is used, which is a security problem, use raw_input()
usesInput = 1

# bool: check if using a constant string to getattr()/setattr()
# Doesn't exist.
constAttr = 1

# bool: check for using +variable, since it is almost always has no effect
unaryPositive = 1

# bool: check for modifying a parameter with a default value
#       (value must be: list, dict, instance)
#       modifying the value may have undesirable/unexpected side-effects
modifyDefaultValue = 1

# bool: check if the exec statement is used (possible security problem)
usesExec = 0

# bool: check consistent return values
checkReturnValues = 1

# bool: check if using implict and explicit return values
checkImplicitReturns = 1

# dict: suppress warnings, key is module.class.method or module.function
#	value is a string of command line arguments (can omit -- for long args)
#       { 'module1': 'no-namedargs maxlines=0',
#	  'module2.my_func': 'argsused',
#	  'module3.my_class': 'no-initreturn', }
if 0:
	suppressions = {}
else:
	suppressions = {
		'leoFrame' : 'argumentsUsed',
		'leoGui' : 'argumentsUsed' }

# dict: suppress warnings where keys can be regular expressions
suppressionRegexs = {}</t>
<t tx="EKR.20040519082027.32">@color
@lineending nl
@language shell</t>
<t tx="EKR.20040519090846">@nocolor</t>
<t tx="EKR.20040519090846.1">Leo is Open Software and is distributed under the terms of the Python License.
The gist of the license is that Leo is absolutely free, even for commercial use
(including resale). There is no GNU-like "copyleft" restriction. The Open Source
Initiative board has voted to certify the Python license as Open Source. This
license is compatible with the GPL.

Copyright (c) 1997-2007 by Edward K. Ream. All Rights Reserved.

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted, provided that
the above copyright notice appear in all copies and that both that copyright
notice and this permission notice appear in supporting documentation, and that
the names of Leo or Edward K. Ream not be used in advertising or publicity
pertaining to distribution of the software without specific, written prior
permission.

DISCLAIMER OF WARRANTIES

EDWARD K. REAM (REAM) SPECIFICALLY DISCLAIMS ALL WARRANTIES, EXPRESSED OR
IMPLIED, WITH RESPECT TO THIS COMPUTER SOFTWARE, INCLUDING BUT NOT LIMITED TO
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. IN
NO EVENT SHALL REAM BE LIABLE FOR ANY LOSS OF PROFIT OR ANY COMMERCIAL DAMAGE,
INCLUDING BUT NOT LIMITED TO SPECIAL, INCIDENTAL, CONSEQUENTIAL OR OTHER
DAMAGES.</t>
<t tx="EKR.20040519090846.2"></t>
<t tx="EKR.20040519090846.3">System requirements for leo.py
------------------------------

leo.py requires Python 2.2.1 or above and tcl/tk 8.4 or above.

	Download Python from http://python.org/ 
	Download tcl/Tk from http://tcl.activestate.com/software/tcltk/

Warning: When building Tcl on Linux, do not specify "--enable-threads" .
Only use Tcl with the default "threads not enabled" case.</t>
<t tx="EKR.20040519090846.4">
Installing the leo.py on Linux
------------------------------

You can install Leo using the install script provided.  Remember to 'chmod +x' before running this script.

Leo is distributed as a single compressed (.zip) folder.  Simply uncompress this folder, put the folder in a convenient place and run leo.py.  You can run leo.py by double-clicking leo.py.  You can also run leo.py from a Python interpreter as follows:

	import leo
	leo.run() # runs leo.py, opening a new outline.
	leo.go() # runs leo.py after reloading all modules.
	leo.leoOpen(fileName) # runs leo.py, reloads all modules, and opens fileName.

You may specify options using the configuration file called leoSettings.leo.</t>
<t tx="EKR.20040519090846.5">
Installing the leo.py on Windows
--------------------------------

Important: You can install leo.py on Windows using the single-click installer called leosetup.exe.

Leo is distributed as a single compressed (.zip) folder.  Uncompress this folder, put the folder in a convenient place and run leo.py.  You can run leo.py by double-clicking leo.py.  You can also run leo.py from a Python interpreter as follows:

	import leo
	leo.run() # runs leo.py, opening a new outline.
	leo.go() # runs leo.py after reloading all modules.
	leo.leoOpen(fileName) # runs leo.py, reloads all modules, and opens fileName.

You may specify options using the configuration file called leoSettings.leo.
</t>
<t tx="EKR.20040519090846.6">
Installing leo.py on MacOs
--------------------------

Leo works reliably only on MacOS X 10.3 (Panther).

To run Leo on Macintosh OS X 10.3:

1) Download and install "MacPython 2.3 for Panther addons".

Python is already included in OS X 10.3 so only the addons are necessary

	http://www.cwi.nl/~jack/macpython.html

2) Download and install TclTkAqua.

	http://tcltkaqua.sourceforge.net/

3) Run the PackageManager found in /Applications/MacPython-2.3 and  
install "_tkinter-2.3-binary" by clicking on the package in the list  
and clicking the [Install:] button with "Install dependencies" checked

4)  Install Leo.  There are two ways to do this.

a)  The NEW way: Download Leo-version-number.pkg from

    http://leo.sourceforge.net/

Double-click Leo.pkg to install the Leo folder. I recommend that you install Leo
in your home directory.

b) The OLD way: Download Leo-version-number.zip:

	http://leo.sourceforge.net/

Unzip the contents into the desired directory by double-clicking the downloaded file.

5) Run Leo by ontrol-clicking on /path_to_unzipped_dir/leo/src/leo.py and open
with PythonLauncher.

6) It is a good idea to set PythonLauncher as the default program to  
open python scripts by clicking on "leo.py", choosing Get Info from the  
Finder's File menu, and selecting "PythonLauncher" as the default  
program to "Open With:"

By clicking the "Change All..." button, all python scripts will be  
opened with PythonLauncher.

8) (optional) Download and install Pmw. (Leo now contains Pmw in the extensions folder).

    http://pmw.sourceforge.net/

Pmw must be installed in order to use the Settings panel.

Drag the downloaded gzip file into
 
/System/Library/Frameworks/Python.framework/Versions/2.3/lib/python2.3/site-packages

Double click on it to unzip and untar the file into a folder to make it
available to Python

Thanks to Randall Voth for these instructions.</t>
<t tx="EKR.20040519090846.7">
Using shell scripts and batch files to make using Leo easier
------------------------------------------------------------

On Linux, the following shell script will allow you to open foo.leo files by typing leo foo

#!/bin/sh 
python &lt;leopath&gt;/leo.py $1

where &lt;leopath&gt; is replaced with the path to the leo directory. 

On Windows, the equivalent batch file would be:

c:\python22\python &lt;leopath&gt;leo.py %1

</t>
<t tx="EKR.20040519090846.8">Metadata-Version: 1.0
Name: leo
Version: 4.4.3-rc1
Summary: Leo: Literate Editor with Outlines
Home-page: http://webpages.charter.net/edreamleo/front.html
Author: Edward K. Ream
Author-email: edreamleo@charter.net
License: Python
Description: Leo is an outline-oriented editor written in 100% pure Python.
		Leo works on any platform that supports Python 2.2.1 and Tk 8.4 or above.
		You may download Python from http://python.org/ and
		tcl/Tk from http://tcl.activestate.com/software/tcltk/
		Leo features a multi-window outlining editor, Python colorizing,
		powerful outline commands and many other things, including 
		Unlimited Undo/Redo and an integrated Python shell(IDLE) window.
		Leo will place its own icon in Leo windows provided that you have
		installed Fredrik Lundh's PIL and tkIcon packages:
		Download PIL from http://www.pythonware.com/downloads/index.htm#pil
		Download tkIcon from http://www.effbot.org/downloads/#tkIcon
Platform: Windows, Linux, Macintosh
</t>
<t tx="EKR.20040519090846.9">Leo 4.4.3 beta 2                                June 10, 2006

Leo 4.4.3 beta 2 is available at:
http://sourceforge.net/project/showfiles.php?group_id=3458&amp;package_id=29106

Leo is a text editor, data organizer, project manager and much more. See:
http://webpages.charter.net/edreamleo/intro.html

The highlights of Leo 4.4.3:
----------------------------
- Added support for chapters in Leo's core.
  Chapters are disabled by default.  To enable, set @bool use_chapters = True.
- Added support for zipped .leo files.
- Added a leoBridge module that allows full access to all of Leo's capabilities
  from programs running outside of Leo.
- Removed all gui-dependent code from Leo's core.
- Better support for the winpdb debugger.
- Added support for @enabled-plugins nodes in settings files.
- Added support for @open-with nodes in settings files.
- Added support for @bool write_strips_blank_lines setting.
- The__wx_gui plugin is now functional.
- Leo can use aspell on Linux when using Python 2.5 or later.
- Many minor improvements, new settings, commands and bug fixes.

Links:
------
Leo:      http://webpages.charter.net/edreamleo/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://leo.tigris.org/source/browse/leo/
Quotes:   http://webpages.charter.net/edreamleo/testimonials.html</t>
<t tx="EKR.20040519091259">@pagewidth 70
@killcolor</t>
<t tx="EKR.20040519091259.1">4.2-final   setup: 1828 zip: 1508
4.2b3       setup: 563, zip: 338
4.1rc3      setup: 870  zip: 630
4.1 b5      setup: 195, zip: 128
4.0.4       setup: 340, zip: 385
4.0                     zip: 382
3.12        setup: 953  zip: 592
3.11                    zip: 102
3.10                    zip: 1193</t>
<t tx="EKR.20040519091259.2"></t>
<t tx="EKR.20040519091259.3">I like Leo more the more I use it...It's an unexpected pleasure to
see my (linearly written) code outlined in Leo. I can't wait to use
Leo to start a new project, going from outline to code...Thanks again
for providing the computing community with such a fine piece of
software. -- Jim Shapiro, Ph.D.

If you think you have used all possible programmer's editors, but
have not yet tried Leo, you are wrong...I rate Leo as a "must have"
for Python programmers. The code makes for a good read.
-- John Tobler  http://weblogs.asp.net/Jtobler/
</t>
<t tx="EKR.20040519091259.4">I've written documentation in WordPerfert, Ventura, Word, PageMaker, and
FrameMaker and even though they create wonderfully looking and useful
documents, they've never been able to do what I've been looking for. HTML,
compiled help files, and later PDF came closer, but still not there. I think
I've found it in LEO, a way to make a "living" document. A document built out
of discrete parts that can be re-organized on the fly to meet the needs of a
varying audience...Being a convert for less than a day I've still got a lot to
learn, but just the possibility of keeping system maintenance scripts in the IT
manual is mind boggling.  -- David Nichols dnichols@amci.com</t>
<t tx="EKR.20040519091259.5">Proper FAQ entry for Leo

Almost everything in the present FAQ for Leo is incorrect.

- The proper capitalization is Leo, not LEO.
- Leo is highly supported: Leo should appear in the supported tools section.  
- Leo has great relevance to section 6: What is literate programming.
  See: http://webpages.charter.net/edreamleo/design.html
- All links in the Leo section of the present FAQ are incorrect.

Here is a correct FAQ entry for Leo:

8.x Leo

     Developer:
        Edward K. Ream edreamleo@charter.net

     Version:
        4.0

     Hardware:
        Any platform supporting Python and Tk, including
        Windows, Linux, MacOs X and others.
        Leo requires Python 2.1 or above and tcl/tk 8.3 or above.

     Languages:
        Written in Python. Full support for Python scripting.
        Full support for noweb and cweb.
        Syntax coloring for C, C++, cweb, html, Java, LaTex,
        Pascal, Perl and Perlpod, PHP, plain text, Python, Rebol,
        shell scripts and tcl/tk.

     Formatter:
        Printing and formatting via exports to external editors.

     Availability:
        Leo home:    http://webpages.charter.net/edreamleo/front.html
        SourceForge: http://sourceforge.net/projects/leo/
        Support:     http://sourceforge.net/forum/?group_id=3458
        Download: http://sourceforge.net/project/showfiles.php?group_id=3458
        CVS:         http://sourceforge.net/cvs/?group_id=3458
        Wiki:        http://leo.hd1.org/

     Readme:
        See download link above.

     Description:
        - A programmer's editor, an outlining editor and a flexible browser.
        - A literate programming tool, compatible with noweb and CWEB.
        - A data organizer and project manager. Leo provides multiple views
          of projects within a single outline.
        - Fully scriptable using Python. Leo saves its files in XML format.
        - Extensible: plugins may change all aspects of Leo at runtime.
        - Portable: Leo is 100% pure Python.
        - Open Software, distributed under the Python License.

     Support:
        Leo is highly supported and has many active developers and users.
        See the support link above for general, help and developer forums.

Edward K. Ream
--------------------------------------------------------------------
Edward K. Ream   email:  edreamleo@charter.net
Leo: Literate Editor with Outlines
Leo: http://webpages.charter.net/edreamleo/front.html
--------------------------------------------------------------------</t>
<t tx="EKR.20040519091259.6">Leo 4.1 final is now available at
http://sourceforge.net/projects/leo/

Leo 4.1 final is the culmination of four months of work. No
significant bugs have been reported since 4.1 rc4. Several people have
contributed nifty plugins recently. See leoPlugins.leo for full
details.

The highlights version 4.1:
---------------------------
- Leo runs in batch mode when invoked with --script aScriptFile.py
- Leo supports Unicode characters (e.g. Chinese) in path and file names.
- @directives and section references are now valid when executing scripts.
- @ignored and orphan nodes now valid in @file-nosent trees.
- Script-based find/change commands.
- Check Outline command.
- Hoist &amp; DeHoist commands.
- A new gui-agnostic architecture: useful for batch mode and unit tests.
- Several new configuration settings.
- Many new unit tests.
- A host of bug fixes.

Quotes of the month
-------------------

"I'm a newbie to Leo(a couple of weeks) and I feel addicted to
programming again...in fact it has resurrected a dead project of mine :)
The outline has proven most liberating in terms of testing ideas out.
Thanks a lot!" -- anon

"Wow, wow, and wow. I just started using Leo about a month ago..Now I
finally understand how to use clones and I realized that this is
exactly how I want to organize my information.  Multiple views on my
data, fully interlinkable just like my thoughts...Thanks for a great
tool! -- anon

"I *LIKE* it; I was amazed at how [different the Leo] experience was
compared to flat-filing. It was almost Forth-like in the way that it
was possible to work top-down or bottom-up at will (I believe this is
the key to its strength, btw)." --Tarvin Rhodes

What is Leo?
------------
- A programmer's editor, an outlining editor and a flexible browser.
- A literate programming tool, compatible with noweb and CWEB.
- A data organizer and project manager. Leo provides multiple views
   of projects within a single outline.
- Fully scriptable using Python. Leo saves its files in XML format.
- Portable. leo.py is 100% pure Python.
- Open Software, distributed under the Python License.

Leo requires Python 2.1 or above and tcl/tk 8.3 or above.
Leo works on Linux, Windows and MacOs X.

Links:
------
Leo:      http://webpages.charter.net/edreamleo/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458
Wiki:     http://leo.hd1.org/

Edward K. Ream
February 20, 2004</t>
<t tx="EKR.20040519091259.30"></t>
<t tx="EKR.20040519091259.31">Leo 4.1 release candidate 4 is now available at
http://sourceforge.net/projects/leo/

This release fixes numerous bugs reported since 4.1 rc3 and makes
several other improvements, including several nifty new plugins.

The highlights version 4.1:
---------------------------
- Leo runs in batch mode when invoked with --script aScriptFile.py
- Leo supports Unicode characters (e.g. Chinese) in path and file names.
- @directives and section references are now valid when executing scripts.
- @ignored and orphan nodes now valid in @file-nosent trees.
- Script-based find/change commands.
- Check Outline command.
- Hoist &amp; DeHoist commands.
- A new gui-agnostic architecture: useful for batch mode and unit tests.
- Several new configuration settings.
- Many new unit tests.
- A host of bug fixes.

Quotes of the month
-------------------

I'm a newbie to Leo(a couple of weeks) and I feel addicted to
programming again...in fact it has resurrected a dead project of mine :)
The outline has proven most liberating in terms of testing ideas out.
Thanks a lot! -- anon

"Wow, wow, and wow. I just started using Leo about a month ago..Now I
finally understand how to use clones and I realized that this is
exactly how I want to organize my information.  Multiple views on my
data, fully interlinkable just like my thoughts...Thanks for a great
tool! -- anon

"I *LIKE* it; I was amazed at how [different the Leo] experience was
compared to flat-filing. It was almost Forth-like in the way that it
was possible to work top-down or bottom-up at will (I believe this is
the key to its strength, btw)." --Tarvin Rhodes

What is Leo?
------------
- A programmer's editor, an outlining editor and a flexible browser.
- A literate programming tool, compatible with noweb and CWEB.
- A data organizer and project manager. Leo provides multiple views
   of projects within a single outline.
- Fully scriptable using Python. Leo saves its files in XML format.
- Portable. leo.py is 100% pure Python.
- Open Software, distributed under the Python License.

Leo requires Python 2.1 or above and tcl/tk 8.3 or above.
Leo works on Linux, Windows and MacOs X.

Links:
------
Leo:      http://webpages.charter.net/edreamleo/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458
Wiki:     http://leo.hd1.org/

Edward K. Ream
February 3, 2004</t>
<t tx="EKR.20040519091259.32">Leo 4.1 release candidate 3 is now available at: http://sourceforge.net/projects/leo/

This release fixes a serious problem that prevented Leo from reading 3.x derived files.

The highlights version 4.1:
---------------------------
- Leo runs in batch mode when invoked with --script aScriptFile.py
- Leo supports Unicode characters (e.g. Chinese) in path and file names.
- @directives and section references are now valid when executing scripts.
- @ignored and orphan nodes now valid in @file-nosent trees.
- Script-based find/change commands.
- Check Outline command.
- Hoist &amp; DeHoist commands.
- A new gui-agnostic architecture: useful for batch mode and unit tests.
- Several new configuration settings.
- Many new unit tests.
- A host of bug fixes.

Quotes of the month
-------------------
"I like Leo more the more I use it...It's an unexpected pleasure to
see my (linearly written) code outlined in Leo. I can't wait to use
Leo to start a new project, going from outline to code...Thanks again
for providing the computing community with such a fine piece of
software." -- Jim Shapiro, Ph.D.

"If you think you have used all possible programmer's editors, but
have not yet tried Leo, you are wrong...I rate Leo as a 'must have'
for Python programmers. The code makes for a good read."
-- John Tobler  http://weblogs.asp.net/Jtobler/

What is Leo?
------------
- A programmer's editor, an outlining editor and a flexible browser.
- A literate programming tool, compatible with noweb and CWEB.
- A data organizer and project manager. Leo provides multiple views
   of projects within a single outline.
- Fully scriptable using Python. Leo saves its files in XML format.
- Portable. leo.py is 100% pure Python.
- Open Software, distributed under the Python License.

Leo requires Python 2.1 or above and tcl/tk 8.3 or above.
Leo works on Linux, Windows and MacOs X.

Links:
------
Leo:      http://webpages.charter.net/edreamleo/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458
Wiki:     http://leo.hd1.org/

Edward K. Ream
December 19, 2003</t>
<t tx="EKR.20040519091259.33">Leo 4.1 beta 5 is now available at: http://sourceforge.net/projects/leo/

For the first time in months there are no serious bugs outstanding.

Warning: By default Leo 4.1 creates .leo files that can not be read by older versions of Leo.

Warning: Use the __wx_gui.py plugin with extreme caution until further notice:
bugs in this plugin could cause body text to be lost when changing nodes.

Beta 5:
  * Leo runs in batch mode when invoked with --script aScriptFile.py
    - Created "null gui" classes that do not write to the screen.
  * Leo supports Unicode characters (e.g. Chinese) in path and file names.
  * Fixed several long-standing bugs:
    - Fixed several minor problems with the Extract Section and Import commands.
    - Fixed problem that prevent the Find panel from working on the Mac.
    - Improved @url handling so that @url file:\\path\x.leo works properly.
    - Improved support for @lineending platform.
    - Leo honors outline/body pane ratio when opening .leo files.
    - Leo now ensures that newly-opened windows fit entirely on the screen.
    - Fixed a crasher when Undoing a Change All command when searching headlines.
  - Fixed other bugs resulting from the 4.1 reorg:
    - Fixed problem loading plugins on Linux.
    - Fixed crashers in the Extract Section and Extract commands.
    - Fixed crasher when writing a file containing an undefined section.
    - Removed duplicate bindings in popup menus.
    - Made sure to show Leo's windows in wx gui plugin.

Beta 4:
  * Allow @directives and section references when executing scripts!
  - Fixed several "reorg" bugs, some of which affected plugins.
  - More than one section reference may now appear on the same line.
  - Use "utf-8" encoding for filenames under MacOS (Darwin)
  - Allow command or cmnd prefix for menu shortcuts under Darwin.

Beta 3:
  - Completed the reorg, making many changes to the code base.
  - Fixed a LaTeX coloring bug

Beta 2:
  - Fixed a startup problem on Linux: the "mbcs" text encoding is not valid on Linux.

Beta 1:
  * New script-based find/change commands.
  - Hoist &amp; DeHoist commands for viewing parts of an outline.
  - Check Outline command finds user clone mistakes.
  * New configuration settings:
    - use_gnx specifies whether .leo files use integers as indices:
      use_gnx = 0 makes .leo files compatible with previous versions of Leo.
      use_gnx = 1 makes .leo files cvs-friendly
    - config_encoding specifies the encoding of leoConfig.txt.
  * Several significant code-level changes:
    - The 4.1 code base has been reorganized to support gui plugins.
    - An example wx_gui plugin is partly functional.
    - Created a flexible framework for creating &amp; running regression tests.
    - app.forceShutdown now works when called from plugins.

Quotes of the month
-------------------
"I like Leo more the more I use it...It's an unexpected pleasure to
see my (linearly written) code outlined in Leo. I can't wait to use
Leo to start a new project, going from outline to code...Thanks again
for providing the computing community with such a fine piece of
software." -- Jim Shapiro, Ph.D.

"If you think you have used all possible programmer's editors, but
have not yet tried Leo, you are wrong...I rate Leo as a 'must have'
for Python programmers. The code makes for a good read."
-- John Tobler  http://weblogs.asp.net/Jtobler/

What is Leo?
------------
- A programmer's editor, an outlining editor and a flexible browser.
- A literate programming tool, compatible with noweb and CWEB.
- A data organizer and project manager. Leo provides multiple views
   of projects within a single outline.
- Fully scriptable using Python. Leo saves its files in XML format.
- Portable. leo.py is 100% pure Python.
- Open Software, distributed under the Python License.

Leo requires Python 2.1 or above and tcl/tk 8.3 or above.
Leo works on Linux, Windows and MacOs X.

Links:
------
Leo:      http://webpages.charter.net/edreamleo/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458
Wiki:     http://leo.hd1.org/

Edward K. Ream
December 5, 2003</t>
<t tx="EKR.20040519091259.34"></t>
<t tx="EKR.20040519091259.35">Leo 4.0.4 is now available at: http://sourceforge.net/projects/leo/

The 4.0.x releases fix numerous minor bugs.

Please note: it will be severals weeks before Leo supports unicode
characters in file or directory names. Until then, please use ascii
names.

Changes made in 4.0.4:
-----------------------
- Fixed a problem with the titles in Font and Color panels.
- Worked around a Unicode assert failure in the colorizer.
- Fixed crasher in OnEndEditHeadline.
- Fixed import problems in leoPlugins.leo.
- @first and @last sentinels no longer contain corresponding text.
  This fixes a problem that affected PHP comment delimiters.

Changes made in 4.0.3:
-----------------------
- Fixed several problems with the auto_save and plugin menu plugins.
- Fixed a problem with the Go To Line Number command.

Changes made in 4.0.2:
-----------------------
- Fixed a crasher in reportBadChars when a .leo file contains a character that
  can not be represented in the encoding specified in the first line of the
  .leo file.
- Leo now sends full tracebacks to the log window when Leo takes an unexpected
 exception.
- Leo now issues a more informative message when the @comment directive
  inhibits the Untangle command.

Changes made in 4.0.1:
------------------------
- Fixed several crashers, one of which may prevent Leo from starting.
- Fixed indentation for section references that are preceded by something
  other than whitespace.
- Removed debugging traces when reading and writing unknown attributes.
- Removed some improperly cloned nodes from LeoDocs.leo.
- Added the checkTopologyOfAllClones script.
- Fixed some problems with plugins.

Highlights of 4.0 final:
-----------------------
** Improved and simplified format of derived files.
  - Eliminated child indices, extraneous blank lines and @body sentinels.
  - Eliminated @node sentinels that indicate outline structure.
  - New @nl and @nonl sentinels indicate where newlines are and aren't.
  - These changes will largely eliminate unwanted cvs conflicts.

** Greatly improved error handling.
  - Reading derived files _never_ alter outline structure or links.
  - Read errors leave the outline completely unchanged.
  - Broken clone links are gone forever.
  - As a result, 4.0 is much safer than all previous versions.

** Full compatibility will previous versions of Leo.
  - Leo 4.0 reads all derived files properly, regardless of version.
  - Leo writes new-format derived files by default, and this default may be changed.
  - New commands in the read/write menu allow you to explicitly specify the format of derived files.

* New commands:
  - Write 3.x Derived File and Write 4.x Derived File.
  - Import Derived File.
  - Clear Recent Files.

* Dozens of other improvements, including:
  - Better Unicode support.
  - New configuration settings.
  - Several new plugins.

Quote of the month
------------------
I've written documentation in WordPerfert, Ventura, Word, PageMaker, and
FrameMaker and even though they create wonderfully looking and useful
documents, they've never been able to do what I've been looking for. HTML,
compiled help files, and later PDF came closer, but still not there. I think
I've found it in Leo, a way to make a "living" document. A document built out
of discrete parts that can be re-organized on the fly to meet the needs of a
varying audience...Being a convert for less than a day I've still got a lot to
learn, but just the possibility of keeping system maintenance scripts in the IT
manual is mind boggling.  -- David Nichols

What is Leo?
------------
- A programmer's editor, an outlining editor and a flexible browser.
- A literate programming tool, compatible with noweb and CWEB.
- A data organizer and project manager. Leo provides multiple views
   of projects within a single outline.
- Fully scriptable using Python. Leo saves its files in XML format.
- Portable. leo.py is 100% pure Python.
- Open Software, distributed under the Python License.

Leo requires Python 2.1 or above and tcl/tk 8.3 or above.
Leo works on Linux, Windows and MacOs X.

Links:
------
Leo:      http://webpages.charter.net/edreamleo/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458
Wiki:     http://leo.hd1.org/

Edward K. Ream
October 29, 2003</t>
<t tx="EKR.20040519091259.36">Leo 4.0 is now available at: http://sourceforge.net/projects/leo/

More than a year in the making, Leo 4.0 is here.

Highlights of 4.0 final:
-----------------------
** Improved and simplified format of derived files.
  - Eliminated child indices, extra blank lines and @body sentinels.
  - Eliminated @node sentinels that indicate outline structure.
  - New @nl and @nonl sentinels indicate where newlines are.
  - These changes will largely eliminate unwanted cvs conflicts.

** Greatly improved error handling.
  - Reading derived files never alters outline structure or links.
  - Read errors leave the outline completely unchanged.
  - Broken clone links are gone forever.
  - As a result, 4.0 is much safer than all previous versions.

** Full compatibility will previous versions of Leo.
  - Leo 4.0 reads all derived files properly, regardless of version.
  - Leo writes new-format derived files by default.
  - New commands in the read/write menu allow you to explicitly
    specify the format of derived files.

* New commands:
  - Write 3.x Derived File and Write 4.x Derived File.
  - Import Derived File.
  - Clear Recent Files.

* Dozens of other improvements, including:
  - Better Unicode support.
  - New configuration settings.
  - Several new plugins.

Quote of the month
------------------
I've written documentation in WordPerfert, Ventura, Word, PageMaker,
and FrameMaker and even though they create wonderfully looking and
useful documents, they've never been able to do what I've been
looking for. HTML, compiled help files, and later PDF came closer,
but still not there. I think I've found it in Leo, a way to make a
"living" document...A document built out of discrete parts that can be
re-organized on the fly to meet the needs of a varying audience.
Being a convert for less than a day I've still got a lot to learn,
but just the possibility of keeping system maintenance scripts in the
IT manual is mind boggling. -- David Nichols

What is Leo?
------------
- A programmer's editor, an outlining editor and a flexible browser.
- A literate programming tool, compatible with noweb and CWEB.
- A data organizer and project manager. Leo provides multiple views
  of projects within a single outline.
- Fully scriptable using Python. Leo saves its files in XML format.
- Portable. leo.py is 100% pure Python.
- Open Software, distributed under the Python License.

Leo requires Python 2.1 or above and tcl/tk 8.3 or above.
Leo works on Linux, Windows and MacOs X.

Links:
------
Leo:      http://webpages.charter.net/edreamleo/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458
Wiki:     http://leo.hd1.org/

Edward K. Ream
October 17, 2003</t>
<t tx="EKR.20040519091259.37"></t>
<t tx="EKR.20040519091259.38">leo.py 3.3 is now available at:  http://sourceforge.net/projects/leo/

The highlights of 3.3:
----------------------

- Added support for Unicode.
- Improved the Import commands.
- Fixed numerous bugs related to configuration settings.
- Fixed the "Javadoc" bug and several latent bugs related to it.

leo.py requires Python 2.2 and tcl/tk 8. or above.

What is Leo?
------------
 - A programmer's editor, an outlining editor and a flexible browser.
 - A literate programming tool, compatible with noweb and CWEB.
 - A data organizer and project manager. Leo provides multiple views
   of projects within a single outline.
 - Fully scriptable using Python. Leo saves its files in XML format.
 - Portable. leo.py is 100% pure Python.
 - Open Software, distributed under the Python License.

Links:
------
Leo:      http://personalpages.tds.net/~edream/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458
</t>
<t tx="EKR.20040519091259.39">leo.py 3.5 is now available at:  http://sourceforge.net/projects/leo/

The many bugs reported in 3.4 show that leo.py is being heavily used.  leo.py 3.5 corrects all known bugs and adds some new features:

The highlights of 3.5:
----------------------

- Added new entries in the help menu,
  (Including a link to Joe Orr's excellent ScreenBook tutorial).
- Added configuration options for horizontal scrollbars.
- Added an importFiles script for mass imports.
- Added better warnings for read-only files.
- Removed all '\r' characters when reading derived files.
- Fixed crasher in Read Outline Only command.
- Fixed crasher when leoConfig.txt did not exist.
- Many small improvements and bug fixes.

Version 3.4 has not been announced previously.

The highlights of 3.4:
----------------------

- Fixed several crashers involving Unicode.
- The Show Invisibles command now makes blanks and tabs look much better.
- Created leoConfig.leo, from which leoConfig.txt is now derived.
- Added save_clears_undo_buffer configuration option.
- Fixed a large number of problems with the configuration code.
- The usual minor improvements and bug fixes.

leo.py requires Python 2.2 and tcl/tk 8.3 or above.

What is Leo?
------------
 - A programmer's editor, an outlining editor and a flexible browser.
 - A literate programming tool, compatible with noweb and CWEB.
 - A data organizer and project manager. Leo provides multiple views
   of projects within a single outline.
 - Fully scriptable using Python. Leo saves its files in XML format.
 - Portable. leo.py is 100% pure Python.
 - Open Software, distributed under the Python License.

Links:
------
Leo:      http://personalpages.tds.net/~edream/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458

</t>
<t tx="EKR.20040519091259.40">leo.py 3.6 is now available at:  http://sourceforge.net/projects/leo/
leo.py requires Python 2.2 and tcl/tk 8.3 or above.

A slashdot article about Leo appeared soon after 3.5 was released.  Leo now has many more users and developers; 3.6 is considerably more friendly to Linux as a result.

The highlights of 3.6:
----------------------

- Fixed several bugs that appear only on Linux.
- Added Match Brackets command.
- Added support for MouseWheel (Linux only).
- Added support for LaTex and PHP languages.
- Improved all aspects of the Help menu.
- Discovered a minor bug involving the Python (Idle) window and documented a workaround.
- Leo remembers the previous insertion point and scrollbar position when switching between nodes.
- The usual small improvements and bug fixes.

What is Leo?
------------
 - A programmer's editor, an outlining editor and a flexible browser.
 - A literate programming tool, compatible with noweb and CWEB.
 - A data organizer and project manager. Leo provides multiple views
   of projects within a single outline.
 - Fully scriptable using Python. Leo saves its files in XML format.
 - Portable. leo.py is 100% pure Python.
 - Open Software, distributed under the Python License.

Links:
------
Leo:      http://personalpages.tds.net/~edream/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458</t>
<t tx="EKR.20040519091259.41">leo.py 3.7 is now available at:  http://sourceforge.net/projects/leo/
leo.py requires Python 2.1 and tcl/tk 8.3 or above.

The highlights of 3.7:
----------------------

- Now works with Python 2.1.  Previous versions required Python 2.2.
- Many new user options, including user-definable shortcuts for all commands
  and colors for all parts of Leo's windows.
  As a result, it is now possible to use arrow keys as you desire.
- Minimal support for Unicode. Better support is coming.
- Improved handling of relative path names.
- The @first directive allows lines to precede the opening @+leo sentinel line.
- The @last  directive allows lines to follow  the closing @-leo sentinel line.
- Better support for Perl+pod.
- Leo now ends all lines with '\n' regardless of platform.
- Leo is now compatible with Python 2.1.
- Simplified sentinels reduce spurious CVS diffs.
- Many other minor improvements and bug fixes.

What is Leo?
------------
 - A programmer's editor, an outlining editor and a flexible browser.
 - A literate programming tool, compatible with noweb and CWEB.
 - A data organizer and project manager. Leo provides multiple views
   of projects within a single outline.
 - Fully scriptable using Python. Leo saves its files in XML format.
 - Portable. leo.py is 100% pure Python.
 - Open Software, distributed under the Python License.

Links:
------
Leo:      http://personalpages.tds.net/~edream/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458</t>
<t tx="EKR.20040519091259.42">leo.py 3.8 is now available at:  http://sourceforge.net/projects/leo/
leo.py requires Python 2.1 or above and tcl/tk 8.3 or above.

Many major improvements have been made to Leo, all made as the result of user requests:

The highlights of 3.8:
----------------------

- New @rawfile and @silentfile trees complement @file trees.
  @rawfile and @silentfile trees create derived files without using sections.
  @rawfile files contain only those sentinels needed to automatically untangle them.
  @silentfile trees contain no sentinels at all.
- New @raw and @end_raw directives allow unformatted code within @file trees.
- Much better support for CWEB.  You may organize .w files using noweb!
- The @comment and @language directives may now apply simultaneously.
- Leo can now read, remember and write &lt;?xml-stylesheet...?&gt; lines,
  under control of the new stylesheet option.
- The new output_newline option specifies the line endings used when writing files.
- The new output_initial_comment option specifies the text to appear
  in an @comment sentinel at the start of each derived file.
- New commands in the help menu make it much easier to change configuration options.
- Dozens of minor improvements and bug fixes.

What is Leo?
------------
 - A programmer's editor, an outlining editor and a flexible browser.
 - A literate programming tool, compatible with noweb and CWEB.
 - A data organizer and project manager. Leo provides multiple views
   of projects within a single outline.
 - Fully scriptable using Python. Leo saves its files in XML format.
 - Portable. leo.py is 100% pure Python.
 - Open Software, distributed under the Python License.

Links:
------
Leo:      http://personalpages.tds.net/~edream/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458</t>
<t tx="EKR.20040519091259.43">leo.py 3.9 is now available at:  http://sourceforge.net/projects/leo/
leo.py requires Python 2.1 or above and tcl/tk 8.3 or above.

This is one of the most interesting versions of Leo ever released:

The highlights of 3.9:
----------------------
* Major performance improvements:
  - Incremental syntax coloring speeds response when typing.
  - Incremental undo drastically reduces memory used.

* Major improvements in customizing Leo:
  - Leo looks in the file customizeLeo.py for user-specific customizations.
  - Leo calls "hook routines" in customizeLeo.py for all commands and events.
    These hook routines can modify or replace any command or event.
  - New convenience routines simplify creating and modifying menus.
  - Easy translation of menus to other languages using customizeLeo.py.

* Better integration with other tools:
  - The Open With command allows you to communicate back and forth with other editors.
  - The Go To Line Number command converts lines numbers in derived files
    to locations in the outline.
  - Double-clicking the icon of a @url node launches any url in your web browser.
  - The Execute Script command executes Python code in any body pane.
    This is much more convenient than opening Leo's Idle window.
  - Much better support for cweb. At last, Leo has a power user of cweb.
    By default, @space, @* and @** sections are colored as latex text.
    Leo properly generates @q..@&gt; sentinels.
  - @nosentinelfile is like @file except Leo writes no sentinel lines.

* Other improvements:
  - Optional Emacs-style auto-indent.
  - Reformat Paragraph command.
  - Leo will optionally create nonexistent directories specified in
    @file, @root or @path, including all nonexistent parent directories.
  - Leo will place its own icon in Leo windows provided that you have
    installed Fredrik Lundh's PIL and tkIcon packages.
  - The usual assortment of bug fixes.

Quote of the month
------------------
"When first I opened Leo, it was out of curiosity. But having used it...
I'LL NEVER GO BACK. THEY'LL HAVE TO PRY LEO OUT OF MY COLD, DEAD FINGERS!
Seriously,it should be renamed 'Crack Cocaine' because it's that addictive.
I'm ready to start a 12-Step group." -- Travers A. Hough

What is Leo?
------------
 - A programmer's editor, an outlining editor and a flexible browser.
 - A literate programming tool, compatible with noweb and CWEB.
 - A data organizer and project manager. Leo provides multiple views
   of projects within a single outline.
 - Fully scriptable using Python. Leo saves its files in XML format.
 - Portable. leo.py is 100% pure Python.
 - Open Software, distributed under the Python License.

Links:
------
Leo:      http://personalpages.tds.net/~edream/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458</t>
<t tx="EKR.20040519091259.44">leo.py 3.10 is now available at:  http://sourceforge.net/projects/leo/
leo.py requires Python 2.1 or above and tcl/tk 8.3 or above.

3.10 corrects bugs, improves Leo's documentation and adds many new features:

The highlights of 3.10:
-----------------------
- Rewrote the Scripting Chapter in Leo's Users Guide.
- Improved the Customization Chapter of the Users Guide.
- Adds several customizations contributed by Leo's users:
  -- @read-only nodes.
  -- Reading empty .leo files.
  -- Redirecting stderr and stdout to Leo's log pane.
- New Mark Clones and Go To Next Clone commands.
- New Export Headlines command.
- Control-dragging a node now clones it.
- New "Node Only checkbox in the Find/Change panel.
- @root-code trees start in code mode by default.
  This allows @root trees to work like @file trees.
- @root-doc  trees start in doc  mode by default.
- Converted leoConfig.py to use @root-code
- New at_root_bodies_start_in_doc_mode option in leoConfig.py.
  Specifies whether @root trees work like @root-code or @root-doc.
- New synonyms: @file-asis = @silentfile
  @file-nosent = @nosentinelsfile ; @file-noref = @rawfile.
- Leo now supports navigation of menus using underlined menus.
- Added an easy way to replace any Leo method by a function.
  The code in customizeLeo.py can now override part of Leo's code!
- Added routines to redirect stderr and stdout to Leo's log pane.
- Added "event1" and "event2" hooks for customized event handling.
- Improved Leo's window icon, and improved how that icon is loaded.
- The usual assortment of bug fixes and minor improvements.
  Actually, this release fixes more than the usual number of bugs.

Quote of the month
------------------
I must say I am very impressed. I have been absolutely seduced by Leo over the
past few days. I tell you, I can not put it down. I feel like a kid with a
shiny new bike...I'm already bursting with new ways I'd like to use the tool in
the future -- Lyn Adams Headley

What is Leo?
------------
- A programmer's editor, an outlining editor and a flexible browser.
- A literate programming tool, compatible with noweb and CWEB.
- A data organizer and project manager. Leo provides multiple views
   of projects within a single outline.
- Fully scriptable using Python. Leo saves its files in XML format.
- Portable. leo.py is 100% pure Python.
- Open Software, distributed under the Python License.

Links:
------
Leo:      http://personalpages.tds.net/~edream/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458</t>
<t tx="EKR.20040519091259.45">leo.py 3.11 beta 1 is now available at:  http://sourceforge.net/projects/leo/
leo.py requires Python 2.1 or above and tcl/tk 8.3 or above.
leo.py will work on Linux, Windows and MacOs X Jaguar.

The highlights of 3.11:
-----------------------
** Leo finally supports unicode properly.  This solves a lot of problems.
	- New @encoding directives specifies encoding for derived files.
	- New settings specify default encodings for .leo and derived files.
	- Derived files specify encodings used to create them.
** A new plugin architecture for customizing Leo. (A major improvement.)
- New commands:
	- Toggle Angle Brackets.
	- Insert Time/Date (in headline or body text).
	- Go To First/Last Node, Parent, Next/Previous Sibling.
	- Write Missing @file Nodes.
	- Expand/Contract Node.
- Improved commands:
	- Expand/Contract commands now operate on the selected tree.
	  ( A major improvement)
	- Sort Siblings command can now sort top-level nodes.
	- Leo now allows multiple writes of cloned nodes.
	  (Useful when different @path directives are in effect.)
- Other improvements:
	- Improved syntax coloring for html and xml.
	- Leo scrolls partially visible headlines into full view.
	- Added "Replace tabs with spaces" checkbox in Prefs panel.
	- Added install script for Linux.
- New settings in leoConfig.leo/.txt.
	- Colors for Show Invisibles command and body_insertion_cursor
	- Settings affecting when control-drags start.
	- Defaults for unicode (see above).
- Many other bug fixes and improvements.

Quote of the month
------------------
I only have one week of Leo experience but I already know it will be my default
IDE/project manager.  I have seen several old threads on c.l.python  where people
complain about the lack of a project manager for the free/standard Python IDE's
like Idle.  Leo clearly solves that problem and in a way that commercial tools
can't touch -- Marshall Parsons

What is Leo?
------------
- A programmer's editor, an outlining editor and a flexible browser.
- A literate programming tool, compatible with noweb and CWEB.
- A data organizer and project manager. Leo provides multiple views
   of projects within a single outline.
- Fully scriptable using Python. Leo saves its files in XML format.
- Portable. leo.py is 100% pure Python.
- Open Software, distributed under the Python License.

Links:
------
Leo:      http://personalpages.tds.net/~edream/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458
</t>
<t tx="EKR.20040519091259.46">leo.py 3.11 beta 3                       February 26, 2003

leo.py 3.11 beta 3 is now available at:  http://sourceforge.net/projects/leo/
leo.py requires Python 2.1 or above and tcl/tk 8.3 or above.
leo.py will work on Linux, Windows and MacOs X Jaguar.

It appears that just about everyone who has ever reported problems with how Leo handles non-ascii characters is now satisfied with Leo.

- Fixes some unicode problems when the system encoding is not "utf-8".
- Adds the tk_encoding setting.
- Fixes some minor bugs in the Outline To Noweb command.

For all other details, see below.

The highlights of 3.11:
-----------------------
** Leo finally supports unicode properly.  This solves a lot of problems.
	- New @encoding directives specifies encoding for derived files.
	- New settings specify default encodings for .leo and derived files.
	- Derived files specify encodings used to create them.
** A new plugin architecture for customizing Leo. (A major improvement.)
- New commands:
	- Toggle Angle Brackets.
	- Insert Time/Date (in headline or body text).
	- Go To First/Last Node, Parent, Next/Previous Sibling.
	- Write Missing @file Nodes.
	- Expand/Contract Node.
- Improved commands:
	- Expand/Contract commands now operate on the selected tree.
	  ( A major improvement)
	- Sort Siblings command can now sort top-level nodes.
	- Leo now allows multiple writes of cloned nodes.
	  (Useful when different @path directives are in effect.)
- Other improvements:
	- Improved syntax coloring for html and xml.
	- Leo scrolls partially visible headlines into full view.
	- Added "Replace tabs with spaces" checkbox in Prefs panel.
	- Added install script for Linux.
- New settings in leoConfig.leo/.txt.
	- Colors for Show Invisibles command and body_insertion_cursor
	- Settings affecting when control-drags start.
	- Defaults for unicode (see above).
- Many other bug fixes and improvements.

Quote of the month
------------------
I only have one week of Leo experience but I already know it will be my default
IDE/project manager.  I have seen several old threads on c.l.python  where people
complain about the lack of a project manager for the free/standard Python IDE's
like Idle.  Leo clearly solves that problem and in a way that commercial tools
can't touch -- Marshall Parsons

What is Leo?
------------
- A programmer's editor, an outlining editor and a flexible browser.
- A literate programming tool, compatible with noweb and CWEB.
- A data organizer and project manager. Leo provides multiple views
   of projects within a single outline.
- Fully scriptable using Python. Leo saves its files in XML format.
- Portable. leo.py is 100% pure Python.
- Open Software, distributed under the Python License.

Links:
------
Leo:      http://personalpages.tds.net/~edream/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458
</t>
<t tx="EKR.20040519091259.47">leo.py 3.11 beta 4                       March 31, 2003

leo.py 3.11 beta 4 is now available at:  http://sourceforge.net/projects/leo/

This will be the last beta release before 3.11 final.

The highlights of beta 4:
-------------------------
- Fixed several minor problems with unicode.
- Fixed a _huge_ performance bug that slowed moving nodes left.
- Added several new plugins:
	- Support for the VIM editor.
	- A French translation of all menus.
- Added many minor bug fixes and improvements.

The highlights of 3.11:
-----------------------
** Leo now supports unicode properly.
	- New @encoding directives specifies encoding for derived files.
	- New settings specify default encodings for .leo and derived files.
	- Derived files specify encodings used to create them.
** A new plugin architecture for customizing Leo.
- New commands:
	- Toggle Angle Brackets.
	- Insert Time/Date (in headline or body text).
	- Go To First/Last Node, Parent, Next/Previous Sibling.
	- Write Missing @file Nodes.
	- Expand/Contract Node.
- Improved commands:
	- Expand/Contract commands now operate on the selected tree.
	  ( A major improvement)
	- Sort Siblings command can now sort top-level nodes.
	- Leo now allows multiple writes of cloned nodes.
	  (Useful when different @path directives are in effect.)
- Other improvements:
	- Improved syntax coloring for html and xml.
	- Leo scrolls partially visible headlines into full view.
	- Added "Replace tabs with spaces" checkbox in Prefs panel.
	- Added install script for Linux.
- New settings in leoConfig.leo/.txt.
	- Colors for Show Invisibles command and body_insertion_cursor
	- Settings affecting when control-drags start.
	- Defaults for unicode (see above).
- Many other bug fixes and improvements.

What is Leo?
------------
- A programmer's editor, an outlining editor and a flexible browser.
- A literate programming tool, compatible with noweb and CWEB.
- A data organizer and project manager. Leo provides multiple views
   of projects within a single outline.
- Fully scriptable using Python. Leo saves its files in XML format.
- Portable. leo.py is 100% pure Python.
- Open Software, distributed under the Python License.

leo.py requires Python 2.1 or above and tcl/tk 8.3 or above.
leo.py will work on Linux, Windows and MacOs X Jaguar.

Links:
------
Leo:      http://personalpages.tds.net/~edream/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458
</t>
<t tx="EKR.20040519091259.48">leo.py 3.11 final is now available at:  http://sourceforge.net/projects/leo/
leo.py requires Python 2.1 or above and tcl/tk 8.3 or above.
leo.py will work on Linux, Windows and MacOs X Jaguar.

This version of Leo contains many important improvements since 3.10,
especially support for unicode and a new plugin architecture.

The Highlights of 3.11 final:

** Leo supports unicode.
	- New @encoding directives specifies encoding for derived files.
	- New settings specify default encodings for .leo and derived files.
	- Derived files specify encodings used to create them.
** A new plugin architecture for customizing Leo.
- New commands:
	- Toggle Angle Brackets.
	- Insert Time/Date (in headline or body text).
	- Go To First/Last Node, Parent, Next/Previous Sibling.
	- Write Missing @file Nodes.
	- Expand/Contract Node.
- Improved commands:
	- Fixed a huge performance bug that slowed moving nodes left.
	- Expand/Contract commands now operate on the selected tree.
	  ( A major improvement)
	- Sort Siblings command can now sort top-level nodes.
	- Leo now allows multiple writes of cloned nodes.
	  (Useful when different @path directives are in effect.)
- Other improvements:
	- New @lineending directive specifies line endings.
	- Improved syntax coloring for html and xml.
	- Leo scrolls partially visible headlines into full view.
	- Added "Replace tabs with spaces" checkbox in Prefs panel.
- New settings in leoConfig.leo/.txt.
	- Added "tk_encoding" setting and related logic.
	- Colors for Show Invisibles command and body_insertion_cursor
	- Settings affecting when control-drags start.
	- Defaults for unicode (see above).
- Many other bug fixes and improvements.

Quote of the Month:
-------------------
I gave Leo a try a while ago, but did not recognize its strengths as an
outliner. In April 2003 a gave it another try. And when I saw in the online
help mentioning clones almost in passing (you got to emphasis this much
more!), I knew: This is it.

If you are like me, you have a kind of knowledge base with infos gathered over
time. And you have projects, where you use some of those infos. Now, with
conventional outliners you begin to double these infos, because you want to
have the infos needed for the project with your project. With Leo you can do
this too, but if you change text in one place IT IS UPDATED IN THE OTHER PLACE
TOO! This is a feature I did not see with any other outliner (and I tried a
few). Amazing! Leo directly supports the way I work! -- F. Geiger

What is Leo?
------------
- A programmer's editor, an outlining editor and a flexible browser.
- A literate programming tool, compatible with noweb and CWEB.
- A data organizer and project manager. Leo provides multiple views
   of projects within a single outline.
- Fully scriptable using Python. Leo saves its files in XML format.
- Portable. leo.py is 100% pure Python.
- Open Software, distributed under the Python License.

leo.py requires Python 2.1 or above and tcl/tk 8.3 or above.
leo.py works on Linux, Windows and MacOs X Jaguar.

Links:
------
Leo:      http://webpages.charter.net/edreamleo/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458

Edward K. Ream</t>
<t tx="EKR.20040519091259.49">leo.py 3.11.1 is now available at:  http://sourceforge.net/projects/leo/

This version fixes two bugs found in the recent 3.11 version:

- Leo had startup problems on some Linux systems.

- Creating clones by control dragging did not always work.
  This bug has existed in Leo for a long time.

What is Leo?
------------
- A programmer's editor, an outlining editor and a flexible browser.
- A literate programming tool, compatible with noweb and CWEB.
- A data organizer and project manager. Leo provides multiple views
   of projects within a single outline.
- Fully scriptable using Python. Leo saves its files in XML format.
- Portable. leo.py is 100% pure Python.
- Open Software, distributed under the Python License.

leo.py requires Python 2.1 or above and tcl/tk 8.3 or above.
leo.py works on Linux, Windows and MacOs X Jaguar.

Links:
------
Leo:      http://webpages.charter.net/edreamleo/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458
Wiki:     http://leo.hd1.org/

Edward K. Ream
</t>
<t tx="EKR.20040519091259.50">leo.py 3.12                              July 17, 2003

leo.py 3.12 is now available at: http://sourceforge.net/projects/leo/

This version fixes many bugs and adds several major new features.  There are no known serious bugs in this version of Leo. 

Window sizes are now in pixels rather than grid units, so you must resize existing outlines (.leo files) when opening them for the first time using this version of Leo.  Don't panic!

Highlights of this version:

* Plugged a huge memory leak.
* Fixed a major bug involving undo.
* Added Icon &amp; Status areas to Leo window for use by plugins.
* Important new plugins:
  - The file leoPlugins.leo now contains all plugins.
  - add_directives.py allows plugins to define new directives.
  - color_markup.py supports wiki-styled markup.
  - mod_spelling.py checks spelling (requires aspell to be installed).
  - nav_buttons.py creates browser-style navigation plugins in the icon area.
  - plugins_menu.py creates a Plugins menu items for all loaded plugins.
  - scripts_menu.py creates a Scripts menu for all scripts in scripts folder.
  - spell
  - trace_gc traces all changes to memory at idle time.
* Other enhancements:
  - Redesigned the Find panel.   Non-functional options are dimmed.
  - Added @wrap and @nowrap directives.
  - Added Write Dirty @file Nodes command.
  - Added several new "stub hooks".
  - Hyperlinks are now enabled by default.
  - Leo now loads plugins in alphabetical order.
  - Leo now remembers the size and location of Leo windows.
  - Undo now restores the insert point or the selection range after most commands.
  - Added apply button to Font panel.
  - Improved the reporting of characters that do not exist in the present encoding.
* The usual assortment of bug fixes and minor improvements.
  - There are no known bugs in this version of Leo.

Quote of the month:
-------------------
"Thanks for such a great mind-opening program!" -- Eduardo Dominguez

What is Leo?
------------
- A programmer's editor, an outlining editor and a flexible browser.
- A literate programming tool, compatible with noweb and CWEB.
- A data organizer and project manager. Leo provides multiple views
   of projects within a single outline.
- Fully scriptable using Python. Leo saves its files in XML format.
- Portable. leo.py is 100% pure Python.
- Open Software, distributed under the Python License.

leo.py requires Python 2.1 or above and tcl/tk 8.3 or above.
leo.py works on Linux, Windows and MacOs X Jaguar.

Links:
------
Leo:      http://webpages.charter.net/edreamleo/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458
Wiki:     http://leo.hd1.org/

Edward K. Ream
</t>
<t tx="EKR.20040519091259.51">leo.py 3.12                              July 17, 2003

leo.py 3.12 is now available at: http://sourceforge.net/projects/leo/

This version fixes many bugs and adds several major new features.

The first announcement of 3.12 appeared a few days ago on SourceForge.  Since then, a few minor bugs have been found.  In particular, if would be best, when installing Leo on Linux, to remove previous installations of Leo before running the install script.  This will ensure that the new subdirectories of the main Leo directory are created properly.

Window sizes are now in pixels rather than grid units, so you must resize existing outlines (.leo files) when opening them for the first time using this version of Leo.  Don't panic!

Highlights of this version:

* Plugged a huge memory leak.
* Fixed a major bug involving undo.
* Added Icon &amp; Status areas to Leo window for use by plugins.
* Important new plugins:
  - The file leoPlugins.leo now contains all plugins.
  - add_directives.py allows plugins to define new directives.
  - color_markup.py supports wiki-styled markup.
  - mod_spelling.py checks spelling (requires aspell to be installed).
  - nav_buttons.py creates browser-style navigation plugins in the icon area.
  - plugins_menu.py creates a Plugins menu items for all loaded plugins.
  - scripts_menu.py creates a Scripts menu for all scripts in scripts folder.
  - spell
  - trace_gc traces all changes to memory at idle time.
* Other enhancements:
  - Redesigned the Find panel.   Non-functional options are dimmed.
  - Added @wrap and @nowrap directives.
  - Added Write Dirty @file Nodes command.
  - Added several new "stub hooks".
  - Hyperlinks are now enabled by default.
  - Leo now loads plugins in alphabetical order.
  - Leo now remembers the size and location of Leo windows.
  - Undo now restores the insert point or the selection range after most commands.
  - Added apply button to Font panel.
  - Improved the reporting of characters that do not exist in the present encoding.
* The usual assortment of bug fixes and minor improvements.
  - There are no known bugs in this version of Leo.

Quote of the month:
-------------------
"Thanks for such a great mind-opening program!" -- Eduardo Dominguez

What is Leo?
------------
- A programmer's editor, an outlining editor and a flexible browser.
- A literate programming tool, compatible with noweb and CWEB.
- A data organizer and project manager. Leo provides multiple views
   of projects within a single outline.
- Fully scriptable using Python. Leo saves its files in XML format.
- Portable. leo.py is 100% pure Python.
- Open Software, distributed under the Python License.

leo.py requires Python 2.1 or above and tcl/tk 8.3 or above.
leo.py works on Linux, Windows and MacOs X Jaguar.

Links:
------
Leo:      http://webpages.charter.net/edreamleo/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458
Wiki:     http://leo.hd1.org/

Edward K. Ream
</t>
<t tx="ekr.20040629173419.1"># NOTE: This file is created (and distributed) in the leo/dist directory.
# NOTE: You must copy this file to your $HOME directory for pychecker to use it!

@color
@tabwidth -4
@comment #

@others

# Sample defaults file for PyChecker 0.8.14
# This file should be called:  .pycheckrc
# It should be placed in your home directory (value of $HOME).
# If $HOME is not set, it will look in the current directory.

# Enabled tests...
checkObjectAttrs = 1        # True: check that attributes of objects exist
checkReturnValues = 1       # True: check consistent return values
checkImplicitReturns = 1    # True: check if using implict and explicit return values
classAttrExists = 1         # True: warn when the class attribute does not exist
mixImport = 1               # True: warn when import and from ... import are used for same module
moduleImportErrors = 1      # True: warn when a module reimports another module (import &amp; from/import)
reimportSelf = 1            # True: warn when modules import themselves
shadows = 1                 # bool: check if local variables shadow a global variable with same name
localVariablesUsed = 1      # True: warn when local variables are not used

# Disabled by EKR...
argumentsUsed = 0       # True: warn when method/function arguments are unused
isLiteral = 0           # True: warn if using (expr is const-literal), doesn't always work on ints and strings
shadowBuiltins = 1      # EKR: Not in ref file.

# bool:  ignore all warnings from standard library components
#	 (this includes anything under the standard library, eg, site-packages)
ignoreStandardLibrary = 1 # EKR

# bool:  check if an overriden method has the same signature
#	 as base class method (__init__() methods are not checked)
checkOverridenMethods = 0 # EKR

# Won't enable...
constantConditions = 0  # bool: warn when a constant is used in a conditional statement (if '':)
constant1 = 0           # bool: warn when 1 is used in a conditional statement, (if 1: while 1: etc)

# bool: warn when using named arguments: func(a=1, b=2), where def func(a, b):
#       def func2(a, b, **kw): doesn't generate a warning
namedArgs = 0 # EKR
</t>
<t tx="ekr.20040629175400"></t>
<t tx="ekr.20040629180414"># Sample defaults file for PyChecker 0.8.13
# This file should be called:  .pycheckrc
# It should be placed in your home directory (value of $HOME).
# If $HOME is not set, it will look in the current directory.

# bool: warnings for Doc Strings
noDocModule = 0
noDocClass = 0
noDocFunc = 0

# bool: when checking if class data members (attributes) are set
#       check all members or __init__() only
onlyCheckInitForMembers = 0

# bool: warn when all module variables are not used (including private vars)
allVariablesUsed = 0

# bool: produce warnings for each occurrence of a warning for global (xxx)
reportAllGlobals = 0

# bool: warn when private module variables are not used (_var)
privateVariableUsed = 1

# bool: warn when imports are not used
importUsed = 1

# bool: warn when import and from ... import are used for same module
mixImport = 1

# bool: warn when imports are not used in __init__.py
packageImportUsed = 1

# bool: warn when a module reimports another module (import &amp; from/import)
moduleImportErrors = 1

# bool: warn when modules import themselves
reimportSelf = 1

# bool: warn when local variables are not used
localVariablesUsed = 1

# bool:  assume a, b, and c are used in this case:  a, b, c = func()
unusedLocalTuple = 0

# bool:  warn when class attributes (data members) are unused
membersUsed = 0

# bool: warn when Subclass.__init__ is not called in a subclass
baseClassInitted = 1

# bool: warn when Subclass needs to override methods that only throw exceptions
abstractClasses = 1

# bool: warn when __init__ is defined in a subclass
initDefinedInSubclass = 0

# bool: warn when __init__ returns None
returnNoneFromInit = 1

# bool: warn when code is not reachable
unreachableCode = 0

# bool: warn when a constant is used in a conditional statement (if '':)
constantConditions = 1

# bool: warn when 1 is used in a conditional statement, (if 1: while 1: etc)
constant1 = 0

# bool: warn when iterating over a string in a for loop
stringIteration = 1

# bool: warn when setting a variable to different types
inconsistentTypes = 0

# bool: warn when setting a tuple of variables to a non-sequence (a, b = None)
unpackNonSequence = 1

# bool: warn when setting a tuple of variables to the wrong length (a, b = 1,)
unpackLength = 1

# bool: warn when using strings exceptions or 
#       other classes not derived from Exception to raise/catch exceptions
badExceptions = 1

# bool: warn when statements appear to have no effect
noEffect = 1

# bool: warn when using (expr % 1), it has no effect on integers and strings
modulo1 = 1

# bool: warn if using (expr is const-literal), 
# doesn't always work on integers and strings
isLiteral = 1

# bool: warn when using a deprecated module or function
deprecated = 1

# bool: warn when the class attribute does not exist
classAttrExists = 1

# bool: warn when calling an attribute not a method
callingAttribute = 0

# bool: warn when using named arguments: func(a=1, b=2), where def func(a, b):
#       def func2(a, b, **kw): doesn't generate a warning
namedArgs = 1

# str: name of 'self' parameter
methodArgName = 'self'

# list of str: names of first parameter to classmethods
classmethodArgNames = ['cls', 'klass']

# bool: warn when method/function arguments are unused
argumentsUsed = 1

# bool: ignore if self is unused in methods
ignoreSelfUnused = 0

# bool: warn if functions/classes/methods names are redefined in same scope
redefiningFunction = 1

# bool:  check if an overriden method has the same signature
#	 as base class method (__init__() methods are not checked)
checkOverridenMethods = 1

# bool:  check if a special (reserved) method has the correct signature
#	 and is known (these are methods that begin and end with __
checkSpecialMethods = 1

# int: warnings for code complexity, max value before generating a warning
maxLines = 200
maxBranches = 50
maxReturns = 10
maxArgs = 10
maxLocals = 25
maxReferences = 5


# bool:  ignore all warnings from standard library components
#	 (this includes anything under the standard library, eg, site-packages)
ignoreStandardLibrary = 0

# list of strings: ignore unused locals/arguments if name is one of
unusedNames = [ '_', 'empty', 'unused', 'dummy', ]

# list of strings: ignore warnings generated from these modules
blacklist = [ 'Tkinter', 'wxPython', 'gtk', 'GTK', 'GDK', ]


# list of strings: ignore global variables not used if name is one of
variablesToIgnore = [ '__all__', '__version__', '__copyright__', ]

# bool: print the PyChecker parse of modules, classes, etc.
printParse = 0

# bool: turn debugging of PyChecker on
debug = 0

# bool: check that attributes of objects exist
checkObjectAttrs = 1

# bool: various warnings about incorrect usage of __slots__
slots = 1

# bool: check if __slots__ is empty
emptySlots = 1

# bool: check for using properties in classic classes
classicProperties = 1

# bool: check for integer division (may be problem between Python versions)
intDivide = 1

# bool: check if local variables shadow a global variable with same name
shadows = 1

# bool: check if input() is used, which is a security problem, use raw_input()
usesInput = 1

# bool: check if using a constant string to getattr()/setattr()
constAttr = 1

# bool: check for using +variable, since it is almost always has no effect
unaryPositive = 1

# bool: check for modifying a parameter with a default value
#       (value must be: list, dict, instance)
#       modifying the value may have undesirable/unexpected side-effects
modifyDefaultValue = 1

# bool: check if the exec statement is used (possible security problem)
usesExec = 0

# bool: check consistent return values
checkReturnValues = 1

# bool: check if using implict and explicit return values
checkImplicitReturns = 1

# dict: suppress warnings, key is module.class.method or module.function
#	value is a string of command line arguments (can omit -- for long args)
#       { 'module1': 'no-namedargs maxlines=0',
#	  'module2.my_func': 'argsused',
#	  'module3.my_class': 'no-initreturn', }
suppressions = {}

# dict: suppress warnings where keys can be regular expressions
suppressionRegexs = {}
</t>
<t tx="ekr.20040630103409">Leo 4.2 Beta 1 is now available at
http://sourceforge.net/projects/leo/

Beta 1 completes all fundamental work in the 4.2 code base. All essential code
is complete. Dozens of bugs have been fixed since the Alpha 3 release about a
month ago.

The highlights of Leo 4.2:

- @thin trees make Leo much more friendly to cvs. Files derived from @thin can
be committed to cvs and updated from cvs without having to commit or update the
corresponding .leo file. There is no longer any need to keep .leo files and
derived files in synch.

- Leo's data structures have been reorganized. As a result, all outline
operations are much faster. To support this organization, scripts that traverse
Leo's data structures must now use a positions rather than vnodes. Old scripts
that appear to use vnodes will still work because methods like c.currentVnode
that appear to return vnodes actually return positions.

Quotes of the month
-------------------

"I'm a newbie to Leo(a couple of weeks) and I feel addicted to
programming again...in fact it has resurrected a dead project of mine :)
The outline has proven most liberating in terms of testing ideas out.
Thanks a lot!" -- anon

"Wow, wow, and wow. I just started using Leo about a month ago..Now I
finally understand how to use clones and I realized that this is
exactly how I want to organize my information.  Multiple views on my
data, fully interlinkable just like my thoughts...Thanks for a great
tool! -- anon

"I *LIKE* it; I was amazed at how [different the Leo] experience was
compared to flat-filing. It was almost Forth-like in the way that it
was possible to work top-down or bottom-up at will (I believe this is
the key to its strength, btw)." --Tarvin Rhodes

What is Leo?
------------
- A programmer's editor, an outlining editor and a flexible browser.
- A literate programming tool, compatible with noweb and CWEB.
- A data organizer and project manager. Leo provides multiple views
   of projects within a single outline.
- Fully scriptable using Python. Leo saves its files in XML format.
- Portable. leo.py is 100% pure Python.
- Open Software, distributed under the Python License.

Leo requires Python 2.2.1 or above and tcl/tk 8.4 or above.
Leo works on Linux, Windows and MacOs X.

Links:
------
Leo:      http://webpages.charter.net/edreamleo/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458
Wiki:     http://leo.hd1.org/

Edward K. Ream
June 30, 2004</t>
<t tx="ekr.20040630210818">HTML Editing in Leo is soooo much easier then with NoNodeEditors. Ive
had a blast working on a web page. Usually I had to look at a bunch of
gunk all at once. Now I can look at little pieces of gunk! :) 

-Anon (for now)

Before leo, I try to avoid or refactor long functions. With leo, I am
very tempted not to. Being able to view and slice my code at a higher
level in pretty much anyway I want, I feel like a commanding master in
my own mess...Leo lets me be lazy and get away with it. ;)

Mark Ng

[Quote] I have just finished a little embedded system for someone, written in
C using leo as the editor. I told the customer he _had_ to use leo for
ongoing maintenance, after I looked at one of the main state machines:
600 lines in the derived file, but trivialy easy to get your head
around in Leo...

The good news is that having been forced to meet leo he thinks it'll
solve many other problems that his company has with code maintenance.
Another step to world domination!

Leo allows you to do things that you'd never consider with another editor. 

BTW: in a real-time embedded system like I was working on, not having
the overhead of a function call (which you'd have had if you'd split
the case statement as you would with a normal editor) saves time, and
makes the system more flexible...
[End Quote]</t>
<t tx="ekr.20040701160830"></t>
<t tx="ekr.20040701160830.1">@color

--name    enables
--no-name disables

abstract
allglobals
argsused
badexcept
blacklist=
callattr
callinit
changetypes
classattr
classdoc
classmethodargs=
complexity
config=
constCond  #note the case
constant1
debug
deprecated
emptyslots
errors
exec
funcdoc
implicitreturns
import
initattr
initreturn
initsubclass
input
intdivide
isliteral
local
maxargs=
maxbranches=
maxlines=
maxlocals=
maxrefs=
maxreturns=
members
miximport
moddefvalue
moduledoc
modulo1
namedargs
noeffect
objattrs
override
pkgimport
positive
printparse
privatevar
properties
quiet
quixote
rcfile
reimport
reimportself
returnvalues
reuseattr
self=
selfused
shadow
shadowbuiltin
slots
special
stdlib
stringfind
stringiter
tuple
unpack
unpacklen
unreachable
unusednames=
var
varargsused
varlist=
version

no-abstract
no-allglobals
no-argsused
no-badexcept
no-blacklist=
no-callattr
no-callinit
no-changetypes
no-classattr
no-classdoc
no-classmethodargs=
no-complexity
no-config=
no-constCond
no-constant1
no-debug
no-deprecated
no-emptyslots
no-errors
no-exec
no-funcdoc
no-implicitreturns
no-import
no-initattr
no-initreturn
no-initsubclass
no-input
no-intdivide
no-isliteral
no-local
no-maxargs=
no-maxbranches=
no-maxlines=
no-maxlocals=
no-maxrefs=
no-maxreturns=
no-members
no-miximport
no-moddefvalue
no-moduledoc
no-modulo1
no-namedargs
no-noeffect
no-objattrs
no-override
no-pkgimport
no-positive
no-printparse
no-privatevar
no-properties
no-quiet
no-quixote
no-rcfile
no-reimport
no-reimportself
no-returnvalues
no-reuseattr
no-self=
no-selfused
no-shadow
no-shadowbuiltin
no-slots
no-special
no-stdlib
no-stringfind
no-stringiter
no-tuple
no-unpack
no-unpacklen
no-unreachable
no-unusednames=
no-var
no-varargsused
no-varlist=
no-version</t>
<t tx="ekr.20040701193853"># list of strings: ignore warnings generated from these modules
blacklist = [
	'Tkinter', 'wxPython', 'gtk', 'GTK', 'GDK',
    'mod_http',
]
</t>
<t tx="ekr.20040701193853.1"># bool: warnings for Doc Strings
noDocModule = 0
noDocClass = 0
noDocFunc = 0

# bool: when checking if class data members (attributes) are set
#       check all members or __init__() only
onlyCheckInitForMembers = 0

# bool: warn when all module variables are not used (including private vars)
allVariablesUsed = 0

# bool: produce warnings for each occurrence of a warning for global (xxx)
reportAllGlobals = 0

# bool: warn when private module variables are not used (_var)
privateVariableUsed = 1

# bool: warn when imports are not used
importUsed = 1

# bool: warn when imports are not used in __init__.py
packageImportUsed = 1

# bool:  assume a, b, and c are used in this case:  a, b, c = func()
unusedLocalTuple = 0

# bool:  warn when class attributes (data members) are unused
membersUsed = 0

# bool: warn when Subclass.__init__ is not called in a subclass
baseClassInitted = 1

# bool: warn when Subclass needs to override methods that only throw exceptions
abstractClasses = 1

# bool: warn when __init__ is defined in a subclass
initDefinedInSubclass = 0

# bool: warn when __init__ returns None
returnNoneFromInit = 1

# bool: warn when code is not reachable
unreachableCode = 0

# bool: warn when iterating over a string in a for loop
stringIteration = 1

# bool: warn when setting a variable to different types
inconsistentTypes = 0

# bool: warn when setting a tuple of variables to a non-sequence (a, b = None)
unpackNonSequence = 1

# bool: warn when setting a tuple of variables to the wrong length (a, b = 1,)
unpackLength = 1

# bool: warn when using strings exceptions or 
#       other classes not derived from Exception to raise/catch exceptions
badExceptions = 1

# bool: warn when statements appear to have no effect
noEffect = 1

# bool: warn when using (expr % 1), it has no effect on integers and strings
modulo1 = 1

# bool: warn when using a deprecated module or function
deprecated = 1

# bool: warn when calling an attribute not a method
callingAttribute = 0

# str: name of 'self' parameter
methodArgName = 'self'

# list of str: names of first parameter to classmethods
## classmethodArgNames = ['cls', 'klass']

# bool: ignore if self is unused in methods
ignoreSelfUnused = 0

# bool: warn if functions/classes/methods names are redefined in same scope
redefiningFunction = 1

# bool:  check if a special (reserved) method has the correct signature
#	 and is known (these are methods that begin and end with __
## checkSpecialMethods = 1

# bool: print the PyChecker parse of modules, classes, etc.
printParse = 0

# bool: turn debugging of PyChecker on
debug = 0

# bool: various warnings about incorrect usage of __slots__
slots = 1

# bool: check if __slots__ is empty
emptySlots = 1

# bool: check for using properties in classic classes
classicProperties = 1

# bool: check for integer division (may be problem between Python versions)
intDivide = 1

# bool: check if input() is used, which is a security problem, use raw_input()
usesInput = 1

# bool: check if using a constant string to getattr()/setattr()
# Doesn't exist.
## constAttr = 1

# bool: check for using +variable, since it is almost always has no effect
unaryPositive = 1

# bool: check for modifying a parameter with a default value
#       (value must be: list, dict, instance)
#       modifying the value may have undesirable/unexpected side-effects
modifyDefaultValue = 1

# bool: check if the exec statement is used (possible security problem)
usesExec = 0</t>
<t tx="ekr.20040701193853.2"># Max value before generating a complexity warning.

maxlines = 2000
maxbranches = 500
maxreturns = 100
maxargs = 100
maxlocals = 250
maxreferences = 500</t>
<t tx="ekr.20040701193853.3"># dict: suppress warnings, key is module.class.method or module.function
#	value is a string of command line arguments (can omit -- for long args)
#       { 'module1': 'no-namedargs maxlines=0',
#	  'module2.my_func': 'argsused',
#	  'module3.my_class': 'no-initreturn', }

suppressions = {
    # Base classes have lots of unused params.
        'leoFrame' : '--no-argsused',
        'leoMenu'  : '--no-argsused',
        'leoGui'   : '--no-argsused',

    # A bad warning about lastVnode.  BOTH MUST BE SPECIFIED
        #'leoImport.baseLeoImportCommands.convertMoreStringsToOutlineAfter' : '--no-objattrs', 
        #'leoImport.leoImportCommands.convertMoreStringsToOutlineAfter'     : '--no-objattrs',
}

# dict: suppress warnings where keys can be regular expressions.
suppressionRegexs = {}</t>
<t tx="ekr.20040701193853.4"># Ignore unused locals/arguments if name is one of the following:

unusedNames = [
	'_', 'empty', 'junk','unused', 'dummy', 'event', 'commander',
	'c', 'i', 'j', 'k', 's', 'z',
	'tag', 'args', 'keys', 'keywords',
]
</t>
<t tx="ekr.20040701193853.5"># list of strings: ignore global variables not used if name is one of

variablesToIgnore = [
    '__all__', '__version__', '__copyright__',
    '__revision__', # Suppress an warning about a library module.
]</t>
<t tx="ekr.20040810104041">Leo 4.2 Beta 3 is now available at http://sourceforge.net/projects/leo/

This version of Leo is feature complete. Leo's core code has been
stable for several months.

To do: most plugins work with the new code base, but other plugins
need some more work. Late note: the *nix install script will work
better with *nix line endings :-)

The highlights of Leo 4.2:

- @thin trees make Leo much more friendly to cvs.

- Leo's data structures have been reorganized to make outline
operations significantly faster. All old script still work.

- @test and @script nodes convert scripts to unit tests automatically.
  Converting scripts to unit tests now takes a few seconds!

- A faster and more robust spell checker plugin. (requires Python 2.3)

- Leo is now much more friendly to using spaces instead of tabs.

- The Execute Script command reports erroneous lines more clearly.

- The Perfect Import feature guarantee that Leo imports file exactly.

- Leo draws large outlines more quickly with less memory used.

- Dozens of other improvements.

Quote of the month
------------------

Leo is the best IDE that I have had the pleasure to use. I have been using it
now for about 2 -- 3 months. It has totally changed not only the way that I
program, but also the way that I store and organize all of the information that
I need for the job that I do. -- Ian Mulvany

What is Leo?
------------
- A programmer's editor, an outlining editor and a flexible browser.
- A literate programming tool, compatible with noweb and CWEB.
- A data organizer and project manager. Leo provides multiple views
   of projects within a single outline.
- Fully scriptable using Python. Leo saves its files in XML format.
- Portable. leo.py is 100% pure Python.
- Open Software, distributed under the Python License.

Leo requires Python 2.2.1 or above and tcl/tk 8.4 or above.
Leo works on Linux, Windows and MacOs X.

Links:
------
Leo:      http://webpages.charter.net/edreamleo/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458
Wiki:     http://leo.hd1.org/

Edward K. Ream
August 10, 2004</t>
<t tx="ekr.20040828084148">Leo is the best IDE that I have had the pleasure to use. I have been using it
now for about 2 -- 3 months. It has totally changed not only the way that I
program, but also the way that I store and organise all of the information that
I need for the job that I do. -- Ian Mulvany</t>
<t tx="ekr.20040908073013">Leo 4.2 Release Candidate 1 is now available at http://sourceforge.net/projects/leo/

This version fixes a number of minor bugs and adds several new features. See
leoDocs.leo for full details.

The highlights of Leo 4.2:

- @thin trees make Leo much more friendly to cvs.

- Leo's data structures have been reorganized to make outline
operations significantly faster. All old scripts still work.

- @test and @script nodes convert scripts to unit tests automatically.
  You can convert scripts to unit tests in seconds!

- A faster and more robust spell checker plugin. (requires Python 2.3)

- Leo is now much more friendly to using spaces instead of tabs.

- The Execute Script command reports erroneous lines more clearly.

- Leo draws large outlines more quickly using less memory.

- Dozens of other improvements.

Quote of the month
------------------

Leo is the best IDE that I have had the pleasure to use. I have been using it
now for about 2 -- 3 months. It has totally changed not only the way that I
program, but also the way that I store and organize all of the information that
I need for the job that I do. -- Ian Mulvany

What is Leo?
------------
- A programmer's editor, an outlining editor and a flexible browser.
- A literate programming tool, compatible with noweb and CWEB.
- A data organizer and project manager. Leo provides multiple views
   of projects within a single outline.
- Fully scriptable using Python. Leo saves its files in XML format.
- Portable. leo.py is 100% pure Python.
- Open Software, distributed under the Python License.

Leo requires Python 2.2.1 or above and tcl/tk 8.4 or above.
Leo works on Linux, Windows and MacOs X.

Links:
------
Leo:      http://webpages.charter.net/edreamleo/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458
Wiki:     http://leo.hd1.org/

Edward K. Ream
September 14, 2004</t>
<t tx="ekr.20040922074043">Leo 4.2 Final is now available at http://sourceforge.net/projects/leo/

Highlights
----------
- @thin trees make Leo much more friendly to cvs.
- Leo's data structures have been reorganized to make outline
  operations significantly faster. All old scripts still work.
- @test and @script nodes convert scripts to unit tests automatically.
  You can convert scripts to unit tests in seconds!
- A faster and more robust spell checker plugin. (requires Python 2.3)
- Leo is now much more friendly to using spaces instead of tabs.
- The Execute Script command reports erroneous lines more clearly.
- Leo draws large outlines more quickly using less memory.
- Dozens of other improvements.

Quote of the month
------------------
Leo is the best IDE that I have had the pleasure to use. I have been using it
now for about 2 -- 3 months. It has totally changed not only the way that I
program, but also the way that I store and organize all of the information that
I need for the job that I do. -- Ian Mulvany

What is Leo?
------------
- A programmer's editor, an outlining editor and a flexible browser.
- A literate programming tool, compatible with noweb and CWEB.
- A data organizer and project manager. Leo provides multiple views
   of projects within a single outline.
- Fully scriptable using Python. Leo saves its files in XML format.
- Portable. leo.py is 100% pure Python.
- Open Software, distributed under the Python License.

Leo requires Python 2.2.1 or above and tcl/tk 8.4 or above.
Leo works on Linux, Windows and MacOs X.

Links:
------
Leo:      http://webpages.charter.net/edreamleo/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458
Wiki:     http://leo.hd1.org/

Edward K. Ream
September 22, 2004

--------------------------------------------------------------------
Edward K. Ream   email:  edreamleo@charter.net
Leo: Literate Editor with Outlines
Leo: http://webpages.charter.net/edreamleo/front.html
--------------------------------------------------------------------
</t>
<t tx="ekr.20050116150710.90"></t>
<t tx="ekr.20050116151024">@nocolor</t>
<t tx="ekr.20050117031116"></t>
<t tx="ekr.20050118092706.4">; settings taken from Version 1.0 of NSIS Script for Leo
Caption "Leo Installer"
AutoCloseWindow false 
SilentInstall normal
CRCCheck on ; FIXME shouldn't this be CRCCheck force ? Why give user option of using corrupted installer?
SetCompress auto ; FIXME this is disabled for solid compression, which comes with BZip2 and LZMA compression
SetDatablockOptimize on
; SetOverwrite ifnewer
WindowIcon off

; settings from HM NIS Edit Wizard
Name "${PRODUCT_NAME} ${PRODUCT_VERSION}"
OutFile "LeoSetup-4-4-3-beta-3.exe"
LoadLanguageFile "${NSISDIR}\Contrib\Language files\English.nlf"
InstallDir "$PROGRAMFILES\Leo"
Icon "..\Icons\leo_inst.ico"
; Version 1.0 of NSIS Script for Leo comes with its own uninstall icon
; UninstallIcon "${NSISDIR}\Contrib\Graphics\Icons\modern-uninstall.ico"
DirText "Setup will install $(^Name) in the following folder.$\r$\n$\r$\nTo install in a different folder, click Browse and select another folder."
LicenseText "If you accept all the terms of the agreement, choose I Agree to continue. You must accept the agreement to install $(^Name)."
LicenseData "..\doc\License.txt"
ShowInstDetails show
ShowUnInstDetails show</t>
<t tx="ekr.20050118095021"></t>
<t tx="ekr.20050118103207">@comment ;</t>
<t tx="ekr.20050118103207.1">File "..\__init__.py"
File "..\install"
File "..\manifest.in"
File "..\MANIFEST"
File "..\setup.py"
File "..\uninstall"</t>
<t tx="ekr.20050118103447"></t>
<t tx="ekr.20050118103447.1">; Gets created automatically by installer.
Delete "$INSTDIR\uninst.exe"

; Should match installed files.
Delete "$INSTDIR\__init__.py"
Delete "$INSTDIR\install"
Delete "$INSTDIR\manifest.in"
Delete "$INSTDIR\MANIFEST"
Delete "$INSTDIR\setup.py"
Delete "$INSTDIR\uninstall"
</t>
<t tx="ekr.20050118104149"></t>
<t tx="ekr.20050118104149.1">File "..\config\leoSettings.leo"</t>
<t tx="ekr.20050118104149.2">Delete "$INSTDIR\config\leoSettings.leo"
Delete "$INSTDIR\config\.leoID.txt"</t>
<t tx="ekr.20050118104149.3"></t>
<t tx="ekr.20050118104149.4">File "createLeoDist.py"

File "leoDist.leo"

File "leo-4-3.nsi"

# File ".pycheckrc"</t>
<t tx="ekr.20050118104149.5">Delete "$INSTDIR\dist\createLeoDist.p*"

Delete "$INSTDIR\dist\leoDist.leo"

Delete "$INSTDIR\dist\leo-4-3.nsi"

# Delete "$INSTDIR\dist\.pycheckrc"</t>
<t tx="ekr.20050118104901"></t>
<t tx="ekr.20050118104901.1">File "..\doc\leoDiary.leo"
File "..\doc\LeoDocs.leo"
File "..\doc\LeoPostings.leo"
File "..\doc\LeoSlideShows.leo"

File "..\doc\leoNotes.txt"
File "..\doc\leoToDo.txt"
File "..\doc\leoToDoLater.txt"

File "..\doc\Readme.txt"
File "..\doc\Pkg-info.txt"
File "..\doc\Install.txt"
File "..\doc\License.txt"

File "..\doc\LeoTechReport.pdf"

File "..\doc\default.css"
File "..\doc\leo_rst.css"
File "..\doc\silver_city.css"

SetOutPath "$INSTDIR\doc\LeoN"

File "..\doc\LeoN\sun98achieving.pdf"
File "..\doc\LeoN\sun97generic.pdf"
File "..\doc\LeoN\sun98operational.pdf"
File "..\doc\LeoN\sun98reversible.pdf"

SetOutPath "$INSTDIR\doc\html"

File "..\doc\html\*.*"
</t>
<t tx="ekr.20050118104901.2">Delete "$INSTDIR\doc\LeoDocs.leo"
Delete "$INSTDIR\doc\leoDiary.leo"
Delete "$INSTDIR\doc\LeoPostings.leo"
Delete "$INSTDIR\doc\LeoSlideShows.leo"

Delete "$INSTDIR\doc\leoNotes.txt"
Delete "$INSTDIR\doc\leoToDo.txt"
Delete "$INSTDIR\doc\leoToDoLater.txt"

Delete "$INSTDIR\doc\License.txt"
Delete "$INSTDIR\doc\Install.txt"
Delete "$INSTDIR\doc\Pkg-info.txt"
Delete "$INSTDIR\doc\Readme.txt"

Delete "$INSTDIR\doc\LeoTechReport.pdf"

Delete "$INSTDIR\doc\silver_city.css"
Delete "$INSTDIR\doc\leo_rst.css"
Delete "$INSTDIR\doc\default.css"

Delete "$INSTDIR\doc\LeoN\sun98achieving.pdf"
Delete "$INSTDIR\doc\LeoN\sun97generic.pdf"
Delete "$INSTDIR\doc\LeoN\sun98operational.pdf"
Delete "$INSTDIR\doc\LeoN\sun98reversible.pdf"

Delete "$INSTDIR\doc\html\*.*"</t>
<t tx="ekr.20050118104901.3"></t>
<t tx="ekr.20050118104901.4">File "..\Icons\*.*"</t>
<t tx="ekr.20050118104901.5">Delete "$INSTDIR\icons\*.*"</t>
<t tx="ekr.20050118104901.6"></t>
<t tx="ekr.20050118104901.7">File "..\plugins\leoPlugins.leo"

File "..\plugins\*.ini"
File "..\plugins\*.txt"

File "..\plugins\*.py"

SetOutPath "$INSTDIR\plugins\trees"

File "..\plugins\trees\*.py"

File "..\plugins\trees\pluginsManager.txt"</t>
<t tx="ekr.20050118104901.8">Delete "$INSTDIR\plugins\leoPlugins.leo"

Delete "$INSTDIR\plugins\*.txt"
Delete "$INSTDIR\plugins\*.ini"

Delete "$INSTDIR\plugins\*.p*"

Delete "$INSTDIR\plugins\trees\*.p*"

Delete "$INSTDIR\plugins\trees\pluginsManager.txt"</t>
<t tx="ekr.20050118104901.9"></t>
<t tx="ekr.20050118104901.10">File "..\src\buttons.txt"
File "..\src\leoProjects.txt"
File "..\src\LeoPy.leo"
File "..\src\oldLeoProjects.leo"

File "..\src\__init__.py"
File "..\src\leo*.py"
</t>
<t tx="ekr.20050118104901.11">Delete "$INSTDIR\src\buttons.txt"
Delete "$INSTDIR\src\leoProjects.txt"
Delete "$INSTDIR\src\LeoPy.leo"
Delete "$INSTDIR\src\oldLeoProjects.leo"

Delete "$INSTDIR\src\__init__.p*"

Delete "$INSTDIR\src\leo*.p*"</t>
<t tx="ekr.20050118104901.12"></t>
<t tx="ekr.20050118104901.13">File "..\scripts\scripts.leo"
File "..\scripts\leoScripts.txt"
File "..\scripts\*.py"
File "..\scripts\openLeoScript.sh"</t>
<t tx="ekr.20050118104901.14">Delete "$INSTDIR\scripts\scripts.leo"
Delete "$INSTDIR\scripts\leoScripts.txt"
Delete "$INSTDIR\scripts\*.p*"
Delete "$INSTDIR\scripts\openLeoScript.sh"</t>
<t tx="ekr.20050118122404">File "..\extensions\aspell23.pyd"
File "..\extensions\aspell24.pyd"

File "..\extensions\__init__.py"
File "..\extensions\optparse.py"
File "..\extensions\path.py"
File "..\extensions\sets.py"
File "..\extensions\subprocess.py"

SetOutPath "$INSTDIR\extensions\Pmw"
File "..\extensions\Pmw\__init__.py"

SetOutPath "$INSTDIR\extensions\Pmw\Pmw_1_2"
File "..\extensions\Pmw\Pmw_1_2\__init__.py"

SetOutPath "$INSTDIR\extensions\Pmw\Pmw_1_2\bin"
File "..\extensions\Pmw\Pmw_1_2\bin\*.*"

SetOutPath "$INSTDIR\extensions\Pmw\Pmw_1_2\contrib"
File "..\extensions\Pmw\Pmw_1_2\contrib\*.*"

SetOutPath "$INSTDIR\extensions\Pmw\Pmw_1_2\demos"
File "..\extensions\Pmw\Pmw_1_2\demos\*.*"

SetOutPath "$INSTDIR\extensions\Pmw\Pmw_1_2\doc"
File "..\extensions\Pmw\Pmw_1_2\doc\*.*"

SetOutPath "$INSTDIR\extensions\Pmw\Pmw_1_2\lib"
File "..\extensions\Pmw\Pmw_1_2\lib\*.*"

SetOutPath "$INSTDIR\extensions\Pmw\Pmw_1_2\tests"
File "..\extensions\Pmw\Pmw_1_2\tests\*.*"</t>
<t tx="ekr.20050118122404.1">File "..\test\__init__.py"
File "..\test\test.leo"
File "..\test\unitTest.leo"
File "..\test\leoBridgeTest.py"
File "..\test\leoDynamicTest.py"
</t>
<t tx="ekr.20050118122740"></t>
<t tx="ekr.20050118122740.1">Delete "$INSTDIR\extensions\aspell23.pyd"
Delete "$INSTDIR\extensions\aspell24.pyd"

Delete "$INSTDIR\extensions\__init__.p*"

Delete "$INSTDIR\extensions\optparse.py"
Delete "$INSTDIR\extensions\path.p*"
Delete "$INSTDIR\extensions\sets.p*"
Delete "$INSTDIR\extensions\subprocess.p*"

Delete "$INSTDIR\extensions\Pmw\__init__.p*"

Delete "$INSTDIR\extensions\Pmw\Pmw_1_2\__init__.p*"

Delete "$INSTDIR\extensions\Pmw\Pmw_1_2\bin\*.*"
Delete "$INSTDIR\extensions\Pmw\Pmw_1_2\contrib\*.*"
Delete "$INSTDIR\extensions\Pmw\Pmw_1_2\demos\*.*"
Delete "$INSTDIR\extensions\Pmw\Pmw_1_2\doc\*.*"
Delete "$INSTDIR\extensions\Pmw\Pmw_1_2\lib\*.*"
Delete "$INSTDIR\extensions\Pmw\Pmw_1_2\tests\*.*"</t>
<t tx="ekr.20050118122740.2"></t>
<t tx="ekr.20050118122740.3">Delete "$INSTDIR\test\__init__.py"
Delete "$INSTDIR\test\test.leo"
Delete "$INSTDIR\test\unitTest.leo"
Delete "$INSTDIR\test\leoBridgeTest.py"
Delete "$INSTDIR\test\leoDynamicTest.py"</t>
<t tx="ekr.20050118124408">!define PRODUCT_VERSION "4.4.3-beta-3"</t>
<t tx="ekr.20050118125236"></t>
<t tx="ekr.20050119191034"></t>
<t tx="ekr.20050124083006">Leo 4.3 alpha 1 is now available at http://sourceforge.net/projects/leo/

Leo 4.3 is the culmination of more than four months of work. In spite
of its alpha status, I recommend Leo 4.3a1 over any 4.2 release.

The defining features of Leo 4.3:
---------------------------------
1. Leo now stores options in @settings trees, that is, outlines whose
headline is '@settings'. When opening a .leo file, Leo looks for
@settings trees not only in the outline being opened but also in
various leoSettings.leo files.

Users can create arbitrarily complex user options with @settings
trees. Leo settings outlines are, in fact, infinitely more flexible
and powerful than any scheme based on flat text. Readers of Python's
configParser shootout take note.

2. The Preferences command temporarily replaces the outline pane with
an outline showing all the @settings trees in effect. The Preferences
command also replaces the body pane with a "settings pane". This
settings pane allows you to change the settings selected in the
outline pane using standard gui widgets.

3. Leo's read/write code in leoAtFile.py has been rewritten to support
user-defined tangling and untangling. This is a major cleanup of
Leo's core.

4. Leo now boasts a wonderful new Plugins Manager plugin. This plugin
enables and disables plugins automatically and tells you everything
you need to know about each plugin. This plugin also lets you download
plugins from Leo's cvs site.

5. You can install third-party extensions in Leo's extensions
directory. Leo will attempt to import such extensions from the
extensions directory if normal imports fail.

As usual, version 4.3 contains many other improvements and bug fixes.

What people are saying about Leo
--------------------------------
"I am using Leo since a few weeks and I brim over with enthusiasm for
it. I think it is the most amazing software since the invention of the
spreadsheet." -- juergen_r

"We who use Leo know that it is a breakthrough tool and a whole new
way of writing code."  -- Joe Orr

"I am a huge fan of Leo. I think it's quite possibly the most
revolutionary programming tool I have ever used and it (along with the
Python language) has utterly changed my view of programming (indeed of
writing) forever."  -- Shakeeb Alireza

"Thank you very much for Leo. I think my way of working with data will
change forever...I am certain [Leo] will be a revolution. The
revolution is as important as the change from sequential linear
organization of a book into a web-like hyperlinked pages. The main
concept that impress me is that the source listing isn't the main
focus any more. You focus on the non-linear, hierarchical, collapsible
outline of the source code."  -- Korakot Chaovavanich 

"Leo is a quantum leap for me in terms of how many projects I can
manage and how much information I can find and organize and store in a
useful way."  -- Dan Winkler

"Wow, wow, and wow...I finally understand how to use clones and I
realized that this is exactly how I want to organize my information.
Multiple views on my data, fully interlinkable just like my thoughts."
-- Anon.

"A few years back I would have said Zope was #1 Python showcase, but I
agree 100% that Leo is tops now." -- Jason Cunliffe

"Leo is the most interesting Python project I know of...I see lots of
stuff posted on the Daily Python page, but I usually yawn and come
over to this forum to see what's cooking."  -- Anon

More quotes at: http://webpages.charter.net/edreamleo/testimonials.html

What makes Leo special?
-----------------------
- Leo's outlines add a new dimension to programming.
- Leo shows you your code and data the way _you_ want to see them.
- Leo extends, completes and simplifies literate programming.
- Leo's script buttons bring scripts to data. 

What is Leo?
------------
- A programmer's editor, an outlining editor and a flexible browser.
- A literate programming tool, compatible with noweb and CWEB.
- A data organizer and project manager. Leo provides multiple views
   of projects within a single outline.
- Fully scriptable using Python. Leo saves its files in XML format.
- Portable. leo.py is 100% pure Python.
- Open Software, distributed under the Python License.

Leo requires Python 2.2.1 or above and tcl/tk 8.4 or above.
Leo works on Linux, Windows and MacOs X.

Links:
------
Leo:      http://webpages.charter.net/edreamleo/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458
Quotes:   http://webpages.charter.net/edreamleo/testimonials.html
Wiki:     http://leo.hd1.org/

Edward K. Ream
January 25, 2005
--------------------------------------------------------------------
Edward K. Ream   email:  edreamleo@charter.net
Leo: Literate Editor with Outlines
Leo: http://webpages.charter.net/edreamleo/front.html
--------------------------------------------------------------------
</t>
<t tx="ekr.20050212054125">Leo 4.3 alpha 3 is now available at http://sourceforge.net/projects/leo/

Leo 4.3 is the culmination of more than five months of work. This alpha 3
release corrects various bugs in Leo's core and in plugins. This is the
first release that include an installer for MacOSX.

The defining features of Leo 4.3:
---------------------------------
1. Leo now stores options in @settings trees, that is, outlines whose
headline is '@settings'. When opening a .leo file, Leo looks for
@settings trees not only in the outline being opened but also in
various leoSettings.leo files.

Users can create arbitrarily complex user options with @settings
trees. Leo settings outlines are, in fact, infinitely more flexible
and powerful than any scheme based on flat text. Readers of Python's
configParser shootout take note.

2. The Preferences command temporarily replaces the outline pane with
an outline showing all the @settings trees in effect. The Preferences
command also replaces the body pane with a "settings pane". This
settings pane allows you to change the settings selected in the
outline pane using standard gui widgets.

3. Leo's read/write code in leoAtFile.py has been rewritten to support
user-defined tangling and untangling. This is a major cleanup of
Leo's core.

4. Leo now boasts an excellent Plugins Manager plugin. This plugin
enables and disables plugins automatically and tells you everything
you need to know about each plugin. This plugin also lets you download
plugins from Leo's cvs site.

5. You can install third-party extensions in Leo's extensions
directory. Leo will attempt to import such extensions from the
extensions directory when normal imports fail. The distribution contains
Python Mega Widgets in the extensions directory.

What people are saying about Leo
--------------------------------
"[Leo] should either replace or greatly augment the development tools
that I use." -- Zak Greant

"Leo is a marriage of outlining and literate programming. Pure genius.
The main reason I am impressed with this tool is that it doesn't
affect your choice of tools. You can use whatever IDE for whatever
language and switch back and forth between Leo and it." -- Austin
King

"Leo is the best IDE that I have had the pleasure to use. I have been
using it now for about 2--3 months. It has totally changed not only
the way that I program, but also the way that I store and organize all
of the information that I need for the job that I do." -- Ian Mulvany

"I only have one week of Leo experience but I already know it will be
my default IDE/project manager...people complain about the lack of a
project manager for the free/standard Python IDE's like Idle. Leo
clearly solves that problem and in a way that commercial tools can't
touch." -- Marshall Parsons

"I have been using Leo for about 3 weeks and I hardly use my other
programming editor anymore...I find it easy and enjoyable to use. I
plan to adopt it as my presentation tool for code reviews." -- Jim
Vickroy

"I'm absolutely astounded by the power of such a simple idea! It works
great and I can immediately see the benefits of using Leo in place of
the standard flat file editor." -- Tom Lee, &lt;tomlee@bigpond.net.au&gt;

I think you're really showing what open source can do and your current
trajectory puts you on track to kick Emacs into the dustbin of
computing history. -- Dan Winkler

More quotes at: http://webpages.charter.net/edreamleo/testimonials.html

What makes Leo special?
-----------------------
- Leo's outlines add a new dimension to programming.
- Leo shows you your code and data the way _you_ want to see them.
- Leo extends, completes and simplifies literate programming.
- Leo's script buttons bring scripts to data. 

What is Leo?
------------
- A programmer's editor, an outlining editor and a flexible browser.
- A literate programming tool, compatible with noweb and CWEB.
- A data organizer and project manager. Leo provides multiple views
   of projects within a single outline.
- Fully scriptable using Python. Leo saves its files in XML format.
- Portable. leo.py is 100% pure Python.
- Open Software, distributed under the Python License.

Leo requires Python 2.2.1 or above and tcl/tk 8.4 or above.
Leo works on Linux, Windows and MacOs X.

Links:
------
Leo:      http://webpages.charter.net/edreamleo/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458
Quotes:   http://webpages.charter.net/edreamleo/testimonials.html

Edward K. Ream
January 25, 2005
--------------------------------------------------------------------
Edward K. Ream   email:  edreamleo@charter.net
Leo: Literate Editor with Outlines
Leo: http://webpages.charter.net/edreamleo/front.html
--------------------------------------------------------------------
</t>
<t tx="ekr.20050212143754"></t>
<t tx="ekr.20050212143754.1">@killcolor

I solved two problems by brute force:

1. Suppressed warnings for non-existent pre-defined vars in test routines.
2. Suppressed warnings about the following supposedly non-existent vars: 'leo_config_directory','CODESET','mtime'</t>
<t tx="ekr.20050212143754.2">@color</t>
<t tx="ekr.20050212143754.3">def _checkGlobal(operand, module, func, code, err, main = 0) :
    if not _hasGlobal(operand, module, func, main) :
        
        # EKR: suppress warnings for pre-defined vars in test routines.
        if str(func).startswith('test_') and str(operand) in ('g','c','p'):
            # print 'ekr',str(func),repr(operand)
            return

        code.addWarning(err % operand)
        if not cfg().reportAllGlobals :
            func.function.func_globals[operand] = operand</t>
<t tx="ekr.20050212143754.4">def _checkModuleAttribute(attr, module, code, ref) :
    
    # EKR: This is the only way I know of getting rid of these!
    if str(attr) in ('leo_config_directory','CODESET','mtime'): return
    
    try:
        if attr not in module.modules[ref].attributes and not utils.endswith(ref, '.' + attr) :
            code.addWarning(msgs.INVALID_MODULE_ATTR % attr)
    except (KeyError, TypeError):
        # if ref isn't found, or ref isn't even hashable, we don't care
        # we may not know, or ref could be something funky [e for e].method()
        pass

    try:
        _checkClassAttribute(attr, module.classes[ref], code)
    except (KeyError, TypeError):
        # if ref isn't found, or ref isn't even hashable, we don't care
        # we may not know, or ref could be something funky [e for e].method()
        pass
</t>
<t tx="ekr.20050224070230">Leo 4.3 alpha 2 is now available at http://sourceforge.net/projects/leo/

Leo 4.3 is the culmination of more than five months of work. In spite
of its alpha status, I recommend Leo 4.3a1 over any 4.2 release.

This alpha 2 release corrects various bugs and distribution problems.
It also adds these new features:

- Adds 'word', 'line' and 'node' undo granularities.
- Predefines 'c','g', and 'p' in scripts and unit tests.
- Added support for top-level init functions in plugins.
- Buttons can remove themselves when their scripts fail.

The defining features of Leo 4.3:
---------------------------------
1. Leo now stores options in @settings trees, that is, outlines whose
headline is '@settings'. When opening a .leo file, Leo looks for
@settings trees not only in the outline being opened but also in
various leoSettings.leo files.

Users can create arbitrarily complex user options with @settings
trees. Leo settings outlines are, in fact, infinitely more flexible
and powerful than any scheme based on flat text. Readers of Python's
configParser shootout take note.

2. The Preferences command temporarily replaces the outline pane with
an outline showing all the @settings trees in effect. The Preferences
command also replaces the body pane with a "settings pane". This
settings pane allows you to change the settings selected in the
outline pane using standard gui widgets.

3. Leo's read/write code in leoAtFile.py has been rewritten to support
user-defined tangling and untangling. This is a major cleanup of
Leo's core.

4. Leo now boasts an excellent Plugins Manager plugin. This plugin
enables and disables plugins automatically and tells you everything
you need to know about each plugin. This plugin also lets you download
plugins from Leo's cvs site.

5. You can install third-party extensions in Leo's extensions
directory. Leo will attempt to import such extensions from the
extensions directory when normal imports fail. The distribution contains
Python Mega Widgets in the extensions directory.

What people are saying about Leo
--------------------------------
"When first I opened Leo, it was out of curiosity. But having used
it...I'll never go back. They'll have to pry Leo out of my cold, dead
fingers! Seriously, it should be renamed 'Crack Cocaine' because it's
that addictive. I'm ready to start a 12-Step group."
-- Travers A. Hough

"I feel addicted to programming again...in fact [Leo] has resurrected
a dead project of mine :) The Outline has proven most liberating in
terms of testing ideas out." -- Anon

"I have been absolutely seduced by Leo over the past few days. I tell
you, I can not put it down. I feel like a kid with a shiny new
bike...I'm already bursting with new ways I'd like to use the tool in
the future." -- Lyn Adams Headley

Thanks for the great work--I love Leo!!! -- Josef Dalcolmo

Leo has simplified updating and creating new scripts and .bats keeping
similar information in the same place. there is almost an addictive
withdrawal effect when I can complete an operation in so much less
time with Leo &amp; python than I had become used to. -- Anon

More quotes at: http://webpages.charter.net/edreamleo/testimonials.html

What makes Leo special?
-----------------------
- Leo's outlines add a new dimension to programming.
- Leo shows you your code and data the way _you_ want to see them.
- Leo extends, completes and simplifies literate programming.
- Leo's script buttons bring scripts to data. 

What is Leo?
------------
- A programmer's editor, an outlining editor and a flexible browser.
- A literate programming tool, compatible with noweb and CWEB.
- A data organizer and project manager. Leo provides multiple views
   of projects within a single outline.
- Fully scriptable using Python. Leo saves its files in XML format.
- Portable. leo.py is 100% pure Python.
- Open Software, distributed under the Python License.

Leo requires Python 2.2.1 or above and tcl/tk 8.4 or above.
Leo works on Linux, Windows and MacOs X.

Links:
------
Leo:      http://webpages.charter.net/edreamleo/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458
Quotes:   http://webpages.charter.net/edreamleo/testimonials.html
Wiki:     http://leo.hd1.org/

Edward K. Ream
January 25, 2005
--------------------------------------------------------------------
Edward K. Ream   email:  edreamleo@charter.net
Leo: Literate Editor with Outlines
Leo: http://webpages.charter.net/edreamleo/front.html
--------------------------------------------------------------------
</t>
<t tx="ekr.20050313105121">Leo 4.3 beta 1 is now available at http://sourceforge.net/projects/leo/

Leo 4.3 is the culmination of more than five months of work. This alpha 4 focuses on plugins: all known plugins are now in leoPlugins.leo. Most plugins now work with the 4.3 code base.

This alpha 4 release also adds the frequently-requested Add Comments and Delete Comments commands to Leo's Edit Body menu.

The defining features of Leo 4.3:
---------------------------------
1. Leo now stores options in @settings trees, that is, outlines whose headline is '@settings'. When opening a .leo file, Leo looks for @settings trees not only in the outline being opened but also in various leoSettings.leo files. Users can create arbitrarily complex user options with @settings trees. 

2. The Preferences command temporarily replaces the outline pane with an outline showing all the @settings trees in effect. The Preferences command also replaces the body pane with a "settings pane". This settings pane allows you to change the settings selected in the outline pane using standard gui widgets.

3. Leo's read/write code in leoAtFile.py has been rewritten to support user-defined tangling and untangling. This is a major cleanup of Leo's core.

4. Leo now contains an excellent Plugins Manager plugin. This plugin enables and disables plugins automatically and tells you everything you need to know about each plugin. This plugin also lets you download plugins from Leo's cvs site.

5. You can install third-party extensions in Leo's extensions directory. Leo will attempt to import such extensions from the extensions directory when normal imports fail. The distribution contains Python Mega Widgets in the extensions directory.

What people are saying about Leo
--------------------------------
"Word outlines are very useful. But Leo makes Word look like a clunky toy." --Joe Orr

"Leo is an interactive editor for organizing text fragments hierarchically and sequentially into one or more files and hierarchical folders, without arbitrary limits on the number and size of text fragments and the depth of the hierarchy...Tangle is a tool for combining hierarchically and sequentially organized text fragments into text files, hierarchically grouped into folders, with hierarchical or sequential organization of text within the files, and without arbitrary limits on the size and number of files and the depth of the hierarchy of folders and text nesting within the files." -- Alex Abacus

"Leo reminds me a great deal of things I loved when I used Userland's Frontier (an outlining cms with a native oodb) - but Frontier wasn't hackable enough for me, and it wasn't oriented towards coding and literate programming, and you couldn't round-trip rendered pages (big Leo win). This is really a super tool - in a matter of days I've started to use it on all my projects and I still haven't figured out how I lived without it." -- John Sequeira

"Leo is EXACTLY the kind of outliner I was looking for--fantastic job!" -- Steve Allen

"If you are like me, you have a kind of knowledge base with infos gathered over time. And you have projects, where you use some of those infos. Now, with conventional outliners you begin to double these infos, because you want to have the infos needed for the project with your project. With Leo you can do this too, but if you change text in one place IT IS UPDATED IN THE OTHER PLACE TOO! This is a feature I did not see with any other outliner (and I tried a few). Amazing! Leo directly supports the way I work!" -- F. Geiger

More quotes at: http://webpages.charter.net/edreamleo/testimonials.html

What makes Leo special?
-----------------------
- Leo's outlines add a new dimension to programming.
- Leo shows you your code and data the way _you_ want to see them.
- Leo extends, completes and simplifies literate programming.
- Leo's script buttons bring scripts to data. 

What is Leo?
------------
- A programmer's editor, an outlining editor and a flexible browser.
- A literate programming tool, compatible with noweb and CWEB.
- A data organizer and project manager. Leo provides multiple views
  of projects within a single outline.
- Fully scriptable using Python. Leo saves its files in XML format.
- Portable. leo.py is 100% pure Python.
- Open Software, distributed under the Python License.

Leo requires Python 2.2.1 or above and tcl/tk 8.4 or above.
Leo works on Linux, Windows and MacOs X.

Links:
------
Leo:      http://webpages.charter.net/edreamleo/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458
Quotes:   http://webpages.charter.net/edreamleo/testimonials.html
</t>
<t tx="ekr.20050315084904"></t>
<t tx="ekr.20050315084904.1">@nocolor</t>
<t tx="ekr.20050315084904.2">C:\Documents and Settings\Ed\My Documents\ekr.leo
C:\prog\leoCVS\leo\dist\leoDist.leo</t>
<t tx="ekr.20050315084922">c.spellCommands.openSpellTab()</t>
<t tx="ekr.20050429102040">Leo 4.3 beta 1 is now available at http://sourceforge.net/projects/leo/

Leo 4.3 beta 1 completes all major features of Leo 4.3.  There are no known significant bugs.

The defining features of Leo 4.3:
---------------------------------
1. Leo now stores options in @settings trees, that is, outlines whose headline is '@settings'. When opening a .leo file, Leo looks for @settings trees not only in the outline being opened but also in various leoSettings.leo files. Users can create arbitrarily complex user options with @settings trees. 

2. The Preferences command temporarily replaces the outline pane with an outline showing all the @settings trees in effect. The Preferences command also replaces the body pane with a "settings pane". This settings pane allows you to change the settings selected in the outline pane using standard gui widgets.

3. Leo now stores recent files information in .leoRecentFiles.txt files.

4. Leo's read/write code in leoAtFile.py has been rewritten to support user-defined tangling and untangling. This is a major cleanup of Leo's core.

5. Leo now contains an excellent Plugins Manager plugin. This plugin enables and disables plugins automatically and tells you everything you need to know about each plugin. This plugin also lets you download plugins from Leo's cvs site.

6. You can install third-party extensions in Leo's extensions directory. Leo will attempt to import such extensions from the extensions directory when normal imports fail. The distribution contains Python Mega Widgets in the extensions directory.

What people are saying about Leo
--------------------------------
"Another day, another breakthrough using Leo--now I realize Leo is the best URL bookmark manager there is. No more bookmarks menus or favorites lists inside the browser for me. With the @url directive I can just double click on the URL to open it in my browser. Leo lets me arrange the URLs in a hierarchy (or multiple hierarchies), attach notes to them, save clippings of things I read on the sites. It's sooo much better than anything the browsers have built in and it lets me easily use different browsers on different platforms and different machines (try that with the browsers' built-in bookmark managers)." -- Dan Winkler

"I am an amateur photographer. I use plain old 35mm. film for my pictures. Over the weekend, I used Leo to organize my lists of pictures. It is quite helpful--I can have separate nodes for pictures I have enlarged, as well as pictures I have submitted to our local camera club. Thanks!" -- Rich Reis

"Cloning is pure genius!... Leo's cloning facility, allows me to create several views on the CFA course material. My main view follows the prescribed study guide. Another view is organized like the textbooks. Yet another gives me a glossary of terms. And when I'm done, I'll have some nice libraries...I can re-use later in other projects." -- Michael Manti

More quotes at: http://webpages.charter.net/edreamleo/testimonials.html

What makes Leo special?
-----------------------
- Leo's outlines add a new dimension to programming.
- Leo shows you your code and data the way _you_ want to see them.
- Leo extends, completes and simplifies literate programming.
- Leo's script buttons bring scripts to data. 

What is Leo?
------------
- A programmer's editor, an outlining editor and a flexible browser.
- A literate programming tool, compatible with noweb and CWEB.
- A data organizer and project manager. Leo provides multiple views
  of projects within a single outline.
- Fully scriptable using Python. Leo saves its files in XML format.
- Portable. leo.py is 100% pure Python.
- Open Software, distributed under the Python License.

Leo requires Python 2.2.1 or above and tcl/tk 8.4 or above.
Leo works on Linux, Windows and MacOs X.

Links:
------
Leo:      http://webpages.charter.net/edreamleo/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458
Quotes:   http://webpages.charter.net/edreamleo/testimonials.html
</t>
<t tx="ekr.20050430095952"># __pychecker__ = '--no-argsused' # event not used.

# __pychecker__ = '--no-constCond -- no-constant1'

# __pychecker__ = '--maxlines=500'

# __pychecker__ = '--no-unusednames=[c,f]'

# __pychecker__ = '--no-reuseattr'

# __pychecker__ = '--no-import'

# __pychecker__ = '--no-errors' # suppress all pychecker errors.

# __pychecker__ = '--errors' # enable all pychecker errors.

# __pychecker__ = '--no-override' # suppress warning about changed signature</t>
<t tx="ekr.20050516064011">Leo 4.3 beta 2 is now available at http://sourceforge.net/projects/leo/

Leo 4.3 beta 2 completes all major features of Leo 4.3.  There are no known significant bugs.

The defining features of Leo 4.3:
---------------------------------
1. Leo now stores options in @settings trees, that is, outlines whose headline is '@settings'. When opening a .leo file, Leo looks for @settings trees not only in the outline being opened but also in various leoSettings.leo files. Users can create arbitrarily complex user options with @settings trees. 

2. The Preferences command temporarily replaces the outline pane with an outline showing all the @settings trees in effect. The Preferences command also replaces the body pane with a "settings pane". This settings pane allows you to change the settings selected in the outline pane using standard gui widgets.

3. Leo now stores recent files information in .leoRecentFiles.txt files.

4. Leo's read/write code in leoAtFile.py has been rewritten to support user-defined tangling and untangling. This is a major cleanup of Leo's core.

5. Leo now contains an excellent Plugins Manager plugin. This plugin enables and disables plugins automatically and tells you everything you need to know about each plugin. This plugin also lets you download plugins from Leo's cvs site.

6. You can install third-party extensions in Leo's extensions directory. Leo will attempt to import such extensions from the extensions directory when normal imports fail. The distribution contains Python Mega Widgets in the extensions directory.

What people are saying about Leo
--------------------------------
"Another day, another breakthrough using Leo--now I realize Leo is the best URL bookmark manager there is. No more bookmarks menus or favorites lists inside the browser for me. With the @url directive I can just double click on the URL to open it in my browser. Leo lets me arrange the URLs in a hierarchy (or multiple hierarchies), attach notes to them, save clippings of things I read on the sites. It's sooo much better than anything the browsers have built in and it lets me easily use different browsers on different platforms and different machines (try that with the browsers' built-in bookmark managers)." -- Dan Winkler

"I am an amateur photographer. I use plain old 35mm. film for my pictures. Over the weekend, I used Leo to organize my lists of pictures. It is quite helpful--I can have separate nodes for pictures I have enlarged, as well as pictures I have submitted to our local camera club. Thanks!" -- Rich Reis

"Cloning is pure genius!... Leo's cloning facility, allows me to create several views on the CFA course material. My main view follows the prescribed study guide. Another view is organized like the textbooks. Yet another gives me a glossary of terms. And when I'm done, I'll have some nice libraries...I can re-use later in other projects." -- Michael Manti

More quotes at: http://webpages.charter.net/edreamleo/testimonials.html

What makes Leo special?
-----------------------
- Leo's outlines add a new dimension to programming.
- Leo shows you your code and data the way _you_ want to see them.
- Leo extends, completes and simplifies literate programming.
- Leo's script buttons bring scripts to data. 

What is Leo?
------------
- A programmer's editor, an outlining editor and a flexible browser.
- A literate programming tool, compatible with noweb and CWEB.
- A data organizer and project manager. Leo provides multiple views
  of projects within a single outline.
- Fully scriptable using Python. Leo saves its files in XML format.
- Portable. leo.py is 100% pure Python.
- Open Software, distributed under the Python License.

Leo requires Python 2.2.1 or above and tcl/tk 8.4 or above.
Leo works on Linux, Windows and MacOs X.

Links:
------
Leo:      http://webpages.charter.net/edreamleo/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458
Quotes:   http://webpages.charter.net/edreamleo/testimonials.html
</t>
<t tx="ekr.20050523091828">Leo 4.3 final is now available at http://sourceforge.net/projects/leo/

Leo 4.3 is here after almost five months of work.

The defining features of Leo 4.3:
---------------------------------
1. Leo now stores options in @settings trees, that is, outlines whose headline is '@settings'. When opening a .leo file, Leo looks for @settings trees not only in the outline being opened but also in various leoSettings.leo files. Users can create arbitrarily complex user options with @settings trees. 

2. The Preferences command temporarily replaces the outline pane with an outline showing all the @settings trees in effect. The Preferences command also replaces the body pane with a "settings pane". This settings pane allows you to change the settings selected in the outline pane using standard gui widgets.

3. Leo now stores recent files information in .leoRecentFiles.txt files.

4. Leo's read/write code in leoAtFile.py has been rewritten to support user-defined tangling and untangling. This is a major cleanup of Leo's core.

5. Leo now contains an excellent Plugins Manager plugin. This plugin enables and disables plugins automatically and tells you everything you need to know about each plugin. This plugin also lets you download plugins from Leo's cvs site.

6. You can install third-party extensions in Leo's extensions directory. Leo will attempt to import such extensions from the extensions directory when normal imports fail. The distribution contains Python Mega Widgets in the extensions directory.

What people are saying about Leo
--------------------------------
"Another day, another breakthrough using Leo--now I realize Leo is the best URL bookmark manager there is. No more bookmarks menus or favorites lists inside the browser for me. With the @url directive I can just double click on the URL to open it in my browser. Leo lets me arrange the URLs in a hierarchy (or multiple hierarchies), attach notes to them, save clippings of things I read on the sites. It's sooo much better than anything the browsers have built in and it lets me easily use different browsers on different platforms and different machines (try that with the browsers' built-in bookmark managers)." -- Dan Winkler

"I am an amateur photographer. I use plain old 35mm. film for my pictures. Over the weekend, I used Leo to organize my lists of pictures. It is quite helpful--I can have separate nodes for pictures I have enlarged, as well as pictures I have submitted to our local camera club. Thanks!" -- Rich Reis

"Cloning is pure genius!... Leo's cloning facility, allows me to create several views on the CFA course material. My main view follows the prescribed study guide. Another view is organized like the textbooks. Yet another gives me a glossary of terms. And when I'm done, I'll have some nice libraries...I can re-use later in other projects." -- Michael Manti

More quotes at: http://webpages.charter.net/edreamleo/testimonials.html

What makes Leo special?
-----------------------
- Leo's outlines add a new dimension to programming.
- Leo shows you your code and data the way _you_ want to see them.
- Leo extends, completes and simplifies literate programming.
- Leo's script buttons bring scripts to data. 

What is Leo?
------------
- A programmer's editor, an outlining editor and a flexible browser.
- A literate programming tool, compatible with noweb and CWEB.
- A data organizer and project manager. Leo provides multiple views
  of projects within a single outline.
- Fully scriptable using Python. Leo saves its files in XML format.
- Portable. leo.py is 100% pure Python.
- Open Software, distributed under the Python License.

Leo requires Python 2.2.1 or above and tcl/tk 8.4 or above.
Leo works on Linux, Windows and MacOs X.

Links:
------
Leo:      http://webpages.charter.net/edreamleo/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458
Quotes:   http://webpages.charter.net/edreamleo/testimonials.html
</t>
<t tx="ekr.20050620150256">Leo 4.3.1 final is now available at http://sourceforge.net/projects/leo/

This is a bug fix release, with the following new features:

- Added support for Tk resource files.
- Added support for coloring the PL/SQL language.
- All Mark commands are now undoable.
- Improved Resize To Screen command.

What people are saying about Leo
--------------------------------
"Still using Leo as the world's best outliner and not for programming
tasks (I'm in love for more than 2 years now :-)"
-- Franz Geiger

More quotes at: http://webpages.charter.net/edreamleo/testimonials.html

What makes Leo special?
-----------------------
- Leo's outlines add a new dimension to programming.
- Leo shows you your code and data the way _you_ want to see them.
- Leo extends, completes and simplifies literate programming.
- Leo's script buttons bring scripts to data. 

What is Leo?
------------
- A programmer's editor, an outlining editor and a flexible browser.
- A literate programming tool, compatible with noweb and CWEB.
- A data organizer and project manager. Leo provides multiple views
  of projects within a single outline.
- Fully scriptable using Python. Leo saves its files in XML format.
- Portable. leo.py is 100% pure Python.
- Open Software, distributed under the Python License.

Leo requires Python 2.2.1 or above and tcl/tk 8.4 or above.
Leo works on Linux, Windows and MacOs X.

Links:
------
Leo:      http://webpages.charter.net/edreamleo/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458
Quotes:   http://webpages.charter.net/edreamleo/testimonials.html</t>
<t tx="ekr.20050830052109">File "..\test\unittest\batchTest.py"
File "..\test\unittest\errorTest.py"
</t>
<t tx="ekr.20050830052109.1">Delete "$INSTDIR\test\unittest\batchTest.py"
Delete "$INSTDIR\test\unittest\errorTest.py"
</t>
<t tx="ekr.20050905095110">Leo 4.3.2 beta 1  is now available at:

http://sourceforge.net/project/showfiles.php?group_id=3458&amp;package_id=29106

To learn about Leo, see: http://webpages.charter.net/edreamleo/intro.html

The highlights of 4.3.2:
-----------------------

- Improved Leo's documentation:
    - A tutorial introduction to Leo:
      http://webpages.charter.net/edreamleo/intro.html
    - A 5-minute guide to programming with Leo:
      http://webpages.charter.net/edreamleo/intro.html#quick-start-for-programmers

- The new rst3 plugin creates .html and .tex files from reStructuredText
  embedded in Leo files. Any node of the source outline may contain options for
  the rst3 plugin, which makes this plugin much more useful and flexible than
  the previous rst plugins. All of Leo's documentation was created using this
  plugin from sources in LeoDocs.leo. For full documentation for rst3 see:
  http://webpages.charter.net/edreamleo/rstplugin3.html

- The spellpyx (spell checking) plugin is now much easier to use.

- The vim and openWith plugins now use Python's subprocess module if it is present.
 
- Improved the Pretty Printing command.

- The usual assortment of bug fixes.

Edward K. Ream
September 10, 2005</t>
<t tx="ekr.20050909083954">@nocolor

Leo has new documentation: simpler, clearer, shorter. See:
http://webpages.charter.net/edreamleo/leo_TOC.html

Everything a newbie needs to know about Leo is at:
http://webpages.charter.net/edreamleo/intro.html

Please post any questions, comments or corrections here:
http://sourceforge.net/forum/forum.php?forum_id=10226


</t>
<t tx="ekr.20050916073410">Leo 4.3.2 final  is now available at:

http://sourceforge.net/project/showfiles.php?group_id=3458&amp;package_id=29106

To learn about Leo, see: http://webpages.charter.net/edreamleo/intro.html

The highlights of 4.3.2:
-----------------------

- Improved Leo's documentation:
    - A tutorial introduction to Leo:
      http://webpages.charter.net/edreamleo/intro.html
    - A 5-minute guide to programming with Leo:
      http://webpages.charter.net/edreamleo/intro.html#quick-start-for-programmers

- The new rst3 plugin creates .html and .tex files from reStructuredText
  embedded in Leo files. Any node of the source outline may contain options for
  the rst3 plugin, which makes this plugin much more useful and flexible than
  the previous rst plugins. All of Leo's documentation was created using this
  plugin from sources in LeoDocs.leo. For full documentation for rst3 see:
  http://webpages.charter.net/edreamleo/rstplugin3.html

- The spellpyx (spell checking) plugin is now much easier to use.

- The vim and openWith plugins now use Python's subprocess module if it is present.
 
- Improved the Pretty Printing command.

- The usual assortment of bug fixes.

Edward K. Ream
September 16, 2005</t>
<t tx="ekr.20050919101619">[ANN: Leo 4.3.3 released]

Leo 4.3.3 final is now available at:

http://sourceforge.net/project/showfiles.php?group_id=3458&amp;package_id=29106

Leo 4.3.3 fixes several bugs reported in Leo 4.3.2 final.

To learn about Leo, see: http://webpages.charter.net/edreamleo/intro.html

The highlights of 4.3.3 (and 4.3.2)
-----------------------------------

- Improved Leo's documentation:
    - A tutorial introduction to Leo:
      http://webpages.charter.net/edreamleo/intro.html
    - A 5-minute guide to programming with Leo:
      http://webpages.charter.net/edreamleo/intro.html#quick-start-for-programmers

- The new rst3 plugin creates .html and .tex files from reStructuredText
  embedded in Leo files. Any node of the source outline may contain options for
  the rst3 plugin, which makes this plugin much more useful and flexible than
  the previous rst plugins. All of Leo's documentation was created using this
  plugin from sources in LeoDocs.leo. For full documentation for rst3 see:
  http://webpages.charter.net/edreamleo/rstplugin3.html.

- The spellpyx (spell checking) plugin is now much easier to use.

- The vim and openWith plugins now use Python's subprocess module if it is present.
 
- Improved the Pretty Printing command.

- The usual assortment of bug fixes.

Edward K. Ream
September 19, 2005
</t>
<t tx="ekr.20051015171839">[ANN: Leo 4.4a1 released]

Leo 4.4 alpha 1 is now available at:

http://sourceforge.net/project/showfiles.php?group_id=3458&amp;package_id=29106
To learn about Leo, see: http://webpages.charter.net/edreamleo/intro.html

Leo 4.4 adds an Emacs-like minibuffer and support for all frequently-used Emacs commands. Emacs users will be able to choose key bindings compatible with their present finger habits. Eventually, Vim users will be able to do the same.
 
This is definitely an alpha release; several minibuffer commands are buggy. However, this release also significantly improves Leo's error recovery capabilities.  This may be the most robust version of Leo ever released.

The highlights of Leo 4.4 alpha 1:
----------------------------------
- Support for all frequently-used Emacs commands, including cursor and screen movement, basic character, word and paragraph manipulation, and commands to manipulate buffers, the kill ring, regions and rectangles.

- An Emacs-like minibuffer: you can now execute any command by name from the minibuffer, both the new Emacs-style commands and traditional Leo commands.

- You can define key bindings for all commands, including the new minibuffer commands, using @shortcuts nodes in leoSettings.leo files. You can define multiple sets of key bindings and switch between those sets easily.

- Several fixes made to the 4.3 code base.

Coming in later releases of Leo 4.4:
------------------------------------
- Support for 'mouseless Leo'. There will be commands to manipulate all aspects of Leo using commands, so your fingers will never have to leave the keyboard.

- Support for Vim and other 'plain-key' command modes.

Links:
------
Leo:      http://webpages.charter.net/edreamleo/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458
Quotes:   http://webpages.charter.net/edreamleo/testimonials.html

Edward K. Ream
October 17, 2005</t>
<t tx="ekr.20051015172713">c.save()</t>
<t tx="ekr.20051101183219">[ANN: Leo 4.4a2 released]

Leo 4.4 alpha 2 is now available at:

http://sourceforge.net/project/showfiles.php?group_id=3458&amp;package_id=29106
To learn about Leo, see: http://webpages.charter.net/edreamleo/intro.html

Leo 4.4a2 contains some of the most important changes to Leo's look (tabbed log) and feel (per-pane key bindings) in Leo's history. This release is a big step forward in meeting the following goals:

- To allow Emacs and Vim users to retain their present 'finger habits'.
- To support an emacs-like minibuffer, complete with typing completion.
- To make Leo usable without a mouse (mouseless Leo).

This is an alpha release: there are known bugs (see below). However, you should be able to use this version safely. In particular, the Leo 4.4 code base recovers from errors more reliably than all previous versions.

The highlights of Leo 4.4:
----------------------------------
- An Emacs-like mini-buffer: you can now execute any command by typing its long name. Support for tab completion.

- A tabbed log pane. The Find and Spell Check commands now use tabs instead of dialogs, making those commands much easier to use. Plugins or scripts can easily create new tabs. The 'Completion' tab shows possible typing completions. 

- Support for almost all commands in the Emacs Cmds menu, including cursor and screen movement, basic character, word and paragraph manipulation, and commands to manipulate buffers, the kill ring, regions and rectangles.

- Per-pane key bindings. You can bind shortcuts to multiple commands depending on which of Leo's panes presently has focus. For example, you can use arrow keys to move nodes in the outline pane, while retaining their defaults in Leo's body pane. Per-pane key binds are essential for mouseless Leo.

- @command nodes create minibuffer commands. You can bind key shortcuts to @button and @command nodes.

- A rewrite of Leo's keystroke handling. In particular, Leo handles key events immediately rather than queuing them for idle time.

- Several fixes made to the 4.3 code base. In particular, Leo 4.4 continues after crashes much more reliably than in any previous version.

Known bugs in Leo 4.4a2
-----------------------
- (Reported after a2 released): Cancelling the Open dialog crashes.  Leo recovers without incident.

- Typing in the minibuffer doesn't work if the focus is 'in limbo', that is, not in the outline, body or log panes. Leo usually forces the focus to the body pane in such cases, but the code doesn't always work and sometimes causes other problems. This *minor* annoyance will be fixed completely in Leo 4.4a3.

- Several minibuffer commands do not work; many new features lack unit tests.

Coming in later releases of Leo 4.4:
------------------------------------
- More support for mouseless Leo. There will be commands to manipulate all aspects of Leo using commands, so your fingers will never have to leave the keyboard.

- Support for Vim and other 'plain-key' input modes.

Links:
------
Leo:      http://webpages.charter.net/edreamleo/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458
Quotes:   http://webpages.charter.net/edreamleo/testimonials.html

Edward K. Ream
November 2, 2005</t>
<t tx="ekr.20051110084338">[ANN: Leo 4.4a3 released]

Leo 4.4 alpha 3 is now available at:
http://sourceforge.net/project/showfiles.php?group_id=3458&amp;package_id=29106

To learn about Leo see http://webpages.charter.net/edreamleo/intro.html

Leo 4.4 a3 is a big step forward in meeting the following goals:

- To allow Emacs and Vim users to retain their present 'finger habits'.
- To support an emacs-like minibuffer, complete with typing completion.
- To make Leo usable without a mouse (mouseless Leo).

This is an alpha release: there are minor bugs (see below). However, you should be able to use this version safely. In particular, the Leo 4.4 code base recovers from errors more reliably than all previous versions.

The highlights of Leo 4.4:
--------------------------
- An Emacs-like mini-buffer: you can now execute any command by typing its long name. Support for tab completion.

- A tabbed log pane. The Find and Spell Check commands now use tabs instead of dialogs, making those commands much easier to use. Plugins or scripts can easily create new tabs. The Completion tab shows possible typing completions. 

- Support for almost all commands in the Emacs Cmds menu, including cursor and screen movement, basic character, word and paragraph manipulation, and commands to manipulate buffers, the kill ring, regions and rectangles.

- Per-pane key bindings. You can bind shortcuts to multiple commands depending on which of Leo's panes presently has focus. For example, you can use arrow keys to move nodes in the outline pane, while retaining their defaults in Leo's body pane. Per-pane key bindings are essential for mouseless Leo.

- @command nodes create minibuffer commands. You can bind key shortcuts to @button and @command nodes.

- A rewrite of Leo's keystroke handling. In particular, Leo handles key events immediately rather than queuing them for idle time.

- Several fixes made to the 4.3 code base. In particular, Leo 4.4 continues after crashes much more reliably than in any previous version.

- Leo now updates the screen immediately rather than waiting for idle time. This 'New World Order' simplifies the code and improves performance.

Known bugs in Leo 4.4a3
-----------------------
- Several minibuffer commands do not work and lack unit tests.

Coming in later releases of Leo 4.4:
------------------------------------
- More support for mouseless Leo. There will be commands to manipulate all aspects of Leo using commands, so your fingers will never have to leave the keyboard.

- Support for Vim and other 'plain-key' input modes.

Links:
------
Leo:      http://webpages.charter.net/edreamleo/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458
Quotes:   http://webpages.charter.net/edreamleo/testimonials.html

Edward K. Ream
November 10, 2005</t>
<t tx="ekr.20051205092824">[ANN: Leo 4.4a4 released]

Leo 4.4 alpha 4 is now available at:
http://sourceforge.net/project/showfiles.php?group_id=3458&amp;package_id=29106

To learn about Leo see http://webpages.charter.net/edreamleo/intro.html

Leo 4.4 a4 redraws the screen more quickly, corrects numerous bugs in the 4.4 code base, and introduces several new features.

You should be able to use this version safely. There are no known serious bugs, but several minibuffer commands are not ready for prime time. All the major features of 4.4 are in place.

The highlights of Leo 4.4:
----------------------------------
- An Emacs-like mini-buffer: you can now execute any command by typing its long name. Support for tab completion.

- A tabbed log pane. The Find and Spell Check commands now use tabs instead of dialogs, making those commands much easier to use. Plugins or scripts can easily create new tabs. The Completion tab shows possible typing completions.

- Support for almost all commands in the Emacs Cmds menu, including cursor and screen movement, basic character, word and paragraph manipulation, and commands to manipulate buffers, the kill ring, regions and rectangles.

- Per-pane key bindings. You can bind shortcuts to multiple commands depending on which of Leo's panes presently has focus. For example, you can use arrow keys to move nodes in the outline pane, while retaining their defaults in Leo's body pane. Per-pane key bindings are essential for mouseless Leo.

- @command nodes create minibuffer commands. You can bind key shortcuts to @button and @command nodes.

- A rewrite of Leo's keystroke handling. In particular, Leo handles key events immediately rather than queuing them for idle time.

- Leo recovers from crashes much more reliably than in any previous version.

- Leo updates the screen immediately rather than waiting for idle time. This 'Newer World Order' simplifies the code and improves performance.

Known bugs in Leo 4.4a4
-----------------------
- Several minibuffer commands do not work.  See the release notes for details.

Coming in later releases of Leo 4.4:
------------------------------------
- An auto-complete command that shows class members in the Completion tab.

- More support for mouseless Leo. There will be commands to manipulate all aspects of Leo using commands, so your fingers will never have to leave the keyboard.

- Support for Vim and other 'plain-key' input modes.</t>
<t tx="ekr.20051205102401"></t>
<t tx="ekr.20051208095832">File "..\modes\*.xml"
File "..\modes\*.py"</t>
<t tx="ekr.20051208100413"></t>
<t tx="ekr.20051208100413.1">Delete "$INSTDIR\modes\*.xml"
Delete "$INSTDIR\modes\*.p*"</t>
<t tx="ekr.20060106070701">[ANN: Leo 4.4a5 released]

Leo 4.4 alpha 5 is now available at:

http://sourceforge.net/project/showfiles.php?group_id=3458&amp;package_id=29106

This release completes the last major features of Leo 4.4:

- User-specified key-binding modes.

- Support for multiple key-bindings for individual minibuffer commands.

This will be the last alpha version of Leo 4.4. Beta 1 is coming in about a week. You should be able to use this version safely; there are no known serious bugs.

To learn about Leo, see: http://webpages.charter.net/edreamleo/intro.html

The highlights of Leo 4.4:
----------------------------------
- An Emacs-like mini-buffer: you can now execute any command by typing its long name. Support for tab completion.

- A tabbed log pane. The Find and Spell Check commands now use tabs instead of dialogs, making those commands much easier to use. Plugins or scripts can easily create new tabs. The Completion tab shows possible typing completions.

- Support for most commands in the Emacs Cmds menu, including cursor and screen movement, basic character, word and paragraph manipulation, and commands to manipulate buffers, the kill ring, regions and rectangles.

- Per-pane key bindings. You can bind shortcuts to multiple commands depending on which of Leo's panes presently has focus. For example, you can use arrow keys to move nodes in the outline pane, while retaining their defaults in Leo's body pane.

- User-specified key-binding modes. This feature makes it possible to emulate all aspects of Emacs and Vim as far as key bindings are concerned.

- Leo recovers from crashes much more reliably than in any previous version.

- @command nodes create minibuffer commands. You can bind key shortcuts to @button and @command nodes.

- Leo handles key events and updates the screen immediately rather than waiting for idle time.

Links:
------
Leo:      http://webpages.charter.net/edreamleo/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458
Quotes:   http://webpages.charter.net/edreamleo/testimonials.html

Edward K. Ream
January 6, 2006
</t>
<t tx="ekr.20060116101806">[ANN: Leo 4.4b1 released]

Leo 4.4 beta 1 is now available at:

http://sourceforge.net/project/showfiles.php?group_id=3458&amp;package_id=29106

The code is stable; there are no known serious bugs. Some features are incomplete.

Leo is a text editor, data organizer, project manager and much more.  See: http://webpages.charter.net/edreamleo/intro.html

The highlights of Leo 4.4:
----------------------------------
- An Emacs-like mini-buffer: you can now execute any command by typing its long name, with tab completion.

- Many new commands, including cursor and screen movement, basic character, word and paragraph manipulation, and commands to manipulate buffers, the kill ring, regions and rectangles.  You can use Leo without using a mouse.

- Flexible key bindings and input modes.  You can emulate the operation of Emacs, Vim, or any other editor.

- A tabbed log pane. The Find and Spell Check commands now use tabs instead of dialogs, making those commands much easier to use. Plugins or scripts can easily create new tabs. The Completion tab shows possible typing completions.

- Dozens of other new features and bug fixes since Leo 4.3.3.

Links:
------
Leo:      http://webpages.charter.net/edreamleo/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458
Quotes:   http://webpages.charter.net/edreamleo/testimonials.html

Edward K. Ream
January 17, 2006
</t>
<t tx="ekr.20060213160806">"Thanks for a wonderful program – everybody should be using it! It blows the
socks off that Java Mind mapping software that won project of the month a while
back on sourceforge!" -- Derick van Niekerk.
</t>
<t tx="ekr.20060213161050">[ANN: Leo 4.4b2 released]

Leo 4.4 beta 2 is now available at:

http://sourceforge.net/project/showfiles.php?group_id=3458&amp;package_id=29106

This version fixes dozens of bugs, improves performance and polishes the user interface.  The code is stable; there are no known serious bugs.

Leo is a text editor, data organizer, project manager and much more.  See: http://webpages.charter.net/edreamleo/intro.html

The highlights of Leo 4.4b2:
----------------------------
- Much better polish to the user interface.
- Dozens of minor bugs fixed.
- New commands that support mouseless Leo.
- Minibuffer search commands provide all features of Leo's legacy search commands.
- User modes are fully functional.  You can bind commands to minibuffer keys.
- New master key and click handlers and improved allocation of screen widgets.

Coming in Leo 4.4b3:
--------------------
- A revived chapters plugin.
- Autocompleter Tab.
- Improved incremental searches.

The highlights of Leo 4.4:
----------------------------------
- An Emacs-like mini-buffer: you can now execute any command by typing its long name, with tab completion.

- Many new commands, including cursor and screen movement, basic character, word and paragraph manipulation, and commands to manipulate buffers, the kill ring, regions and rectangles.  You can use Leo without using a mouse.

- Flexible key bindings and input modes.  You can emulate the operation of Emacs, Vim, or any other editor.

- A tabbed log pane. The Find and Spell Check commands now use tabs instead of dialogs, making those commands much easier to use. Plugins or scripts can easily create new tabs. The Completion tab shows possible typing completions.

- Dozens of other new features and bug fixes since Leo 4.3.3.

Quote of the month:
-------------------
"Thanks for a wonderful program – everybody should be using it! It blows the socks off that Java Mind mapping software that won project of the month a while back on sourceforge!" -- Derick van Niekerk.

Links:
------
Leo:      http://webpages.charter.net/edreamleo/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458
Quotes:   http://webpages.charter.net/edreamleo/testimonials.html

Edward K. Ream
February 14, 2006
</t>
<t tx="ekr.20060215120457">Leo 4.4 experimental is now available at:

http://sourceforge.net/project/showfiles.php?group_id=3458&amp;package_id=29106

This version is an emergency measure.  It's goals:

1.  To fix some of the key-handling issues in Leo 4.4 b2.
2.  To allow further experimentation with key handling.
3.  To allow easy reporting of any other key handling problems.

Please do not use this version (or Leo 4.4b2) unless you are ready to report bugs.

My apologies for the key handling problems in Leo 4.4 b2.  I hope this version will
be all that is necessary to fix those problems.

Here are the details of the key-handling changes:

- Added support for trace_key_event setting.
- Added support for ignore_caps_lock setting.
- Added Caps_Lock and Num_Lock to k.tkNamesList and in the list of
  special keys in k.masterCommand and k.masterKeyHandlerHelper.
- Added support for k.ignore_unbound_non_ascii_keys logic in masterKeyHandlerHelper.
- Disabled unknown keysym trace in k.strokeFromEvent.
- Enabled the international keyboard on XP as an aid to testing.
- Added support for swap_mac_keys setting in k.shortcutFromSetting.</t>
<t tx="ekr.20060217073112">[ANN: Leo 4.4a6 released]

Leo 4.4 alpha 6 is now available at:

http://sourceforge.net/project/showfiles.php?group_id=3458&amp;package_id=29106

Leo 4.4 b2 was broken on some platforms.  Leo 4.4 a6 should fix those problems forever.  However, only wider distribution will verify that for certain.  Besides fixing the fatal problems with Leo 4.4b2, this version fixes two minor bugs and adds some new settings in leoSettings.leo.

Leo is a text editor, data organizer, project manager and much more. See:
http://webpages.charter.net/edreamleo/intro.html

What's new in Leo 4.4 a6:
------------------------
- Smoother user interface.
- New commands that support mouseless Leo.
- Minibuffer search commands provide all features of Leo's legacy search commands.
- User modes are fully functional; you can create special bindings for the minibuffer.
- New master key and click handlers and improved allocation of screen widgets.

The highlights of Leo 4.4:
--------------------------
- An Emacs-like mini-buffer: you can now execute any command by typing its long name, with tab completion.
- Many new commands, including cursor and screen movement, basic character, word and paragraph manipulation, and commands to manipulate buffers, the kill ring, regions and rectangles. You can use Leo without using a mouse.
- Flexible key bindings and input modes. You can emulate the operation of Emacs, Vim, or any other editor.
- A tabbed log pane. The Find and Spell Check commands now use tabs instead of dialogs, making those commands much easier to use. Plugins or scripts can easily create new tabs. The Completion tab shows possible typing completions.
- Dozens of other new features and bug fixes since Leo 4.3.3.

Coming soon in Leo 4.4:
-----------------------
- A revived chapters plugin.
- Autocompleter Tab.
- Improved incremental searches.

Quote of the month:
-------------------
"Thanks for a wonderful program – everybody should be using it! It blows the socks off that Java Mind mapping software that won project of the month a while back on sourceforge!" -- Derick van Niekerk.

Links:
------
Leo:      http://webpages.charter.net/edreamleo/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458
Quotes:   http://webpages.charter.net/edreamleo/testimonials.html</t>
<t tx="ekr.20060227110642">[ANN: Leo 4.4a7 released]

Leo 4.4 alpha 7 is now available at:
http://sourceforge.net/project/showfiles.php?group_id=3458&amp;package_id=29106

This version fixes some minor problems with Leo 4.4a6 and adds autocompletion and calltips. There are no known problems with this release.  It may be better than beta quality.  Or not.

Leo is a text editor, data organizer, project manager and much more. See:
http://webpages.charter.net/edreamleo/intro.html

The highlights of Leo 4.4:
--------------------------
- An Emacs-like mini-buffer: you can now execute any command by typing its long name, with tab completion.

- Many new commands, including cursor and screen movement, basic character, word and paragraph manipulation, and commands to manipulate buffers, the kill ring, regions and rectangles. You can use Leo without using a mouse.

- Flexible key bindings and input modes. You can emulate the operation of Emacs, Vim, or any other editor.

- A tabbed log pane. The Find and Spell Check commands now use tabs instead of dialogs, making those commands much easier to use. Plugins or scripts can easily create new tabs. The Completion tab shows possible typing completions.

- Autocompletion and calltips.

- Dozens of other new features and bug fixes since Leo 4.3.3.

Quote of the month:
-------------------
"Thanks for a wonderful program – everybody should be using it! It blows the socks off that Java Mind mapping software that won project of the month a while back on sourceforge!" -- Derick van Niekerk.

Links:
------
Leo:      http://webpages.charter.net/edreamleo/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458
Quotes:   http://webpages.charter.net/edreamleo/testimonials.html</t>
<t tx="ekr.20060330134831">[ANN: Leo 4.4 b3 released]

Leo 4.4 beta 3 is now available at:
http://sourceforge.net/project/showfiles.php?group_id=3458&amp;package_id=29106

This version fixes some minor problems and adds various features.  This code has been in use for several weeks without any major problems reported.

Warning: it seems impossible to get large numbers of people to test either alpha versions or cvs versions.  There may still be some keystroke issues, and there may be some new distribution issues due to the migration of cvs to tigris from SourceForge.  So if you are going to recommend this version of Leo to a group of people (such as your students) please do some testing in your environment first.

Edward

Leo is a text editor, data organizer, project manager and much more. See:
http://webpages.charter.net/edreamleo/intro.html

The highlights of Leo 4.4:
--------------------------
- An Emacs-like mini-buffer: you can now execute any command by typing its long name, with tab completion.

- Many new commands, including cursor and screen movement, basic character, word and paragraph manipulation, and commands to manipulate buffers, the kill ring, regions and rectangles. You can use Leo without using a mouse.

- Flexible key bindings and input modes. You can emulate the operation of Emacs, Vim, or any other editor.

- A tabbed log pane. The Find and Spell Check commands now use tabs instead of dialogs, making those commands much easier to use. Plugins or scripts can easily create new tabs. The Completion tab shows possible typing completions.

- Autocompletion and calltips.

- Dozens of other new features and bug fixes since Leo 4.3.3.

Links:
------
Leo:      http://webpages.charter.net/edreamleo/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458
Quotes:   http://webpages.charter.net/edreamleo/testimonials.html</t>
<t tx="ekr.20060330135143"></t>
<t tx="ekr.20060330135143.1"></t>
<t tx="ekr.20060330135143.2"></t>
<t tx="ekr.20060421071350">[ANN: Leo 4.4 b4 released]

Leo 4.4 beta 4 is now available at:
http://sourceforge.net/project/showfiles.php?group_id=3458&amp;package_id=29106

This version fixes a long-standing MacOS bug.  It is likely to be the last beta release before 4.4 rc1.  This release also adds several new commands and contains a script for updating leoSettings.leo.

Warning: The previous beta was not widely distributed.  Please do some testing in your environment before recommending this version of Leo to others, (such as your students).

Edward

Leo is a text editor, data organizer, project manager and much more. See:
http://webpages.charter.net/edreamleo/intro.html

The highlights of Leo 4.4:
--------------------------
- An Emacs-like mini-buffer: you can now execute any command by typing its long name, with tab completion.

- Many new commands, including cursor and screen movement, basic character, word and paragraph manipulation, and commands to manipulate buffers, the kill ring, regions and rectangles. You can use Leo without using a mouse.

- Flexible key bindings and input modes. You can emulate the operation of Emacs, Vim, or any other editor.

- A tabbed log pane. The Find and Spell Check commands now use tabs instead of dialogs, making those commands much easier to use. Plugins or scripts can easily create new tabs. The Completion tab shows possible typing completions.

- Autocompletion and calltips.

- Dozens of other new features and bug fixes since Leo 4.3.3.

Links:
------
Leo:      http://webpages.charter.net/edreamleo/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://leo.tigris.org/source/browse/leo/
Quotes:   http://webpages.charter.net/edreamleo/testimonials.html
</t>
<t tx="ekr.20060428085435">[ANN: Leo 4.4 rc1 released]

Leo 4.4 release candidate 1 is now available at:
http://sourceforge.net/project/showfiles.php?group_id=3458&amp;package_id=29106

This version fixes a few minor bug reported in 4.4b4 and adds 9 new commands. The open-outline-by-name command supports filename completion.

Leo is a text editor, data organizer, project manager and much more. See:
http://webpages.charter.net/edreamleo/intro.html

The highlights of Leo 4.4:
--------------------------
- An Emacs-like mini-buffer: you can now execute any command by typing its long name, with tab completion.

- Many new commands, including cursor and screen movement, basic character, word and paragraph manipulation, and commands to manipulate buffers, the kill ring, regions and rectangles. You can use Leo without using a mouse.

- Flexible key bindings and input modes. You can emulate the operation of Emacs, Vim, or any other editor.

- A tabbed log pane. The Find and Spell Check commands now use tabs instead of dialogs, making those commands much easier to use. Plugins or scripts can easily create new tabs. The Completion tab shows possible typing completions.

- Autocompletion and calltips.

- Dozens of other new features and bug fixes since Leo 4.3.3.

Links:
------
Leo:      http://webpages.charter.net/edreamleo/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://leo.tigris.org/source/browse/leo/
Quotes:   http://webpages.charter.net/edreamleo/testimonials.html
</t>
<t tx="ekr.20060511075451">[ANN: Leo 4.4 Final released]

Leo 4.4 Final is now available at:
http://sourceforge.net/project/showfiles.php?group_id=3458&amp;package_id=29106

Leo is a text editor, data organizer, project manager and much more. See:
http://webpages.charter.net/edreamleo/intro.html

The highlights of Leo 4.4:
--------------------------
- An Emacs-like mini-buffer: you can now execute any command by typing its long name, with tab completion.

- Many new commands, including cursor and screen movement, basic character, word and paragraph manipulation, and commands to manipulate buffers, the kill ring, regions and rectangles. You can use Leo without using a mouse.

- Flexible key bindings and input modes. You can emulate the operation of Emacs, Vim, or any other editor.

- A tabbed log pane. The Find and Spell Check commands now use tabs instead of dialogs, making those commands much easier to use. Plugins or scripts can easily create new tabs. The Completion tab shows possible typing completions.

- Autocompletion and calltips. To enable autocompletion, bind a key to the auto-complete command.

- Dozens of other new features and bug fixes since Leo 4.3.3.

Links:
------
Leo:      http://webpages.charter.net/edreamleo/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://leo.tigris.org/source/browse/leo/
Quotes:   http://webpages.charter.net/edreamleo/testimonials.html</t>
<t tx="ekr.20060603080748">Leo 4.4.1 beta 1                                            June 3, 2006

Leo 4.4.1 beta  is available at:
http://sourceforge.net/project/showfiles.php?group_id=3458&amp;package_id=29106

Leo is a text editor, data organizer, project manager and much more. See:
http://webpages.charter.net/edreamleo/intro.html

The highlights of Leo 4.4.1:
----------------------------
- A new colorizer plugin controlled by jEdit language description files.
  At present this plugin only reliably colors @language python code.
- Multiple editors in Leo's body pane.
- Search commands now support regex replace patterns: \1, \2, etc.
- Support for external debuggers: see http://webpages.charter.net/edreamleo/debuggers.html
- The scripting plugin now creates a Debug Script button.
- Several new commands including run-unit-test, python-help and toggle-invisibles.
- The help-for-command commands now contains information for almost all commands.
- A new shortcut_button plugin.

Links:
------
Leo:      http://webpages.charter.net/edreamleo/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://leo.tigris.org/source/browse/leo/
Quotes:   http://webpages.charter.net/edreamleo/testimonials.html</t>
<t tx="ekr.20060603080748.1"></t>
<t tx="ekr.20060622182003">Leo 4.4.1 beta 2                                            June 23, 2006

Leo 4.4.1 beta 2 is now available at:
http://sourceforge.net/project/showfiles.php?group_id=3458&amp;package_id=29106

Leo is a text editor, data organizer, project manager and much more. See:
http://webpages.charter.net/edreamleo/intro.html

The highlights of Leo 4.4.1:
----------------------------
- Multiple editors in Leo's body pane.
- Search commands now support regex replace patterns: \1, \2, etc.
- Support for external debuggers: see http://webpages.charter.net/edreamleo/debuggers.html
- The scripting plugin now creates a Debug Script button.
- New commands including run-unit-test, python-help and toggle-invisibles.

Links:
------
4.4.1:    http://webpages.charter.net/edreamleo/new-4-4-1.html
4.4:      http://webpages.charter.net/edreamleo/new-4-4.html
Leo:      http://webpages.charter.net/edreamleo/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://leo.tigris.org/source/browse/leo/
Quotes:   http://webpages.charter.net/edreamleo/testimonials.html</t>
<t tx="ekr.20060629090118">Leo 4.4.1 beta 3                                           June 29, 2006

Leo 4.4.1 beta 3 is now available at:
http://sourceforge.net/project/showfiles.php?group_id=3458&amp;package_id=29106

This release corrects several long-standing bugs and adds optional flashing of matching brackets.

Leo is a text editor, data organizer, project manager and much more. See:
http://webpages.charter.net/edreamleo/intro.html

The highlights of Leo 4.4.1:
----------------------------
- Multiple editors in Leo's body pane.
- Search commands now support regex replace patterns: \1, \2, etc.
- Support for external debuggers: see http://webpages.charter.net/edreamleo/debuggers.html
- The scripting plugin now creates a Debug Script button.
- New commands including run-unit-test, python-help and toggle-invisibles.

Links:
------
4.4.1:    http://webpages.charter.net/edreamleo/new-4-4-1.html
4.4:      http://webpages.charter.net/edreamleo/new-4-4.html
Leo:      http://webpages.charter.net/edreamleo/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://leo.tigris.org/source/browse/leo/
Quotes:   http://webpages.charter.net/edreamleo/testimonials.html</t>
<t tx="ekr.20060823090437">Thanks for creating the most useful and amazing application that
I've come across in years. I use Leo every day.</t>
<t tx="ekr.20060823090544">Leo 4.4.1 beta 4                                           August 23, 2006

Leo 4.4.1 beta 4 is now available at:
http://sourceforge.net/project/showfiles.php?group_id=3458&amp;package_id=29106

Leo is a text editor, data organizer, project manager and much more. See:
http://webpages.charter.net/edreamleo/intro.html

The highlights of Leo 4.4.1:
----------------------------
- Leo outputs decorators correctly, provided that the decorator is not a Leo directive.
- A new colorizer plugin controlled by jEdit language description files.
- A new shadow files plugin that allows derived files not to have sentinel lines.
- Multiple editors in Leo's body pane.
- Search commands now support regex replace patterns: \1, \2, etc.
- Support for external debuggers: see http://webpages.charter.net/edreamleo/debuggers.html
- The scripting plugin now creates a Debug Script button.
- Several new commands including run-unit-test, python-help, toggle-invisibles,
  and scroll-outline-left/right.
- The help-for-command commands now contains information for almost all commands.
- A new shortcut_button plugin.

Quote of the month:
-------------------
Thanks for creating the most useful and amazing application that
I've come across in years. I use Leo every day.

Links:
------
4.4.1:    http://webpages.charter.net/edreamleo/new-4-4-1.html
4.4:      http://webpages.charter.net/edreamleo/new-4-4.html
Leo:      http://webpages.charter.net/edreamleo/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://leo.tigris.org/source/browse/leo/
Quotes:   http://webpages.charter.net/edreamleo/testimonials.html
</t>
<t tx="ekr.20060830085819">Leo 4.4.1 final                                           August 30, 2006

Leo 4.4.1 final is now available at:
http://sourceforge.net/project/showfiles.php?group_id=3458&amp;package_id=29106

Leo is a text editor, data organizer, project manager and much more. See:
http://webpages.charter.net/edreamleo/intro.html

The highlights of Leo 4.4.1:
----------------------------
- Leo outputs decorators correctly, provided that the decorator is not a Leo directive.
- A new colorizer plugin controlled by jEdit language description files.
- A new shadow files plugin that allows derived files not to have sentinel lines.
- Multiple editors in Leo's body pane.
- Search commands now support regex replace patterns: \1, \2, etc.
- Support for external debuggers: see http://webpages.charter.net/edreamleo/debuggers.html
- The scripting plugin now creates a Debug Script button.
- Several new commands including run-unit-test, python-help, toggle-invisibles,
  and scroll-outline-left/right.
- The help-for-command commands now contains information for almost all commands.
- A new shortcut_button plugin.

Quote of the month:
-------------------
Thanks for creating the most useful and amazing application that
I've come across in years. I use Leo every day.

Links:
------
4.4.1:    http://webpages.charter.net/edreamleo/new-4-4-1.html
4.4:      http://webpages.charter.net/edreamleo/new-4-4.html
Leo:      http://webpages.charter.net/edreamleo/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://leo.tigris.org/source/browse/leo/
Quotes:   http://webpages.charter.net/edreamleo/testimonials.html
</t>
<t tx="ekr.20060903103403">Leo 4.4.1.1 final                                       September 3, 2006

Leo 4.4.1.1 final is available at:
http://sourceforge.net/project/showfiles.php?group_id=3458&amp;package_id=29106

Leo 4.4.1.1 corrects a serious last-minute unicode bug in Leo 4.4.1.
This version also adds the new slideshow plugin.

Leo is a text editor, data organizer, project manager and much more. See:
http://webpages.charter.net/edreamleo/intro.html

The highlights of Leo 4.4.1:
----------------------------
- Leo outputs decorators correctly, provided that the decorator is not a Leo directive.
- A new colorizer plugin controlled by jEdit language description files.
- A new shadow files plugin that allows derived files not to have sentinel lines.
- Multiple editors in Leo's body pane.
- Search commands now support regex replace patterns: \1, \2, etc.
- Support for external debuggers: see http://webpages.charter.net/edreamleo/debuggers.html
- The scripting plugin now creates a Debug Script button.
- Several new commands including run-unit-test, python-help, toggle-invisibles,
  and scroll-outline-left/right.
- The help-for-command commands now contains information for almost all commands.
- A new shortcut_button plugin.

Quote of the month:
-------------------
Thanks for creating the most useful and amazing application that
I've come across in years. I use Leo every day.

Links:
------
4.4.1:    http://webpages.charter.net/edreamleo/new-4-4-1.html
4.4:      http://webpages.charter.net/edreamleo/new-4-4.html
Leo:      http://webpages.charter.net/edreamleo/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://leo.tigris.org/source/browse/leo/
Quotes:   http://webpages.charter.net/edreamleo/testimonials.html
</t>
<t tx="ekr.20060929055249.2"></t>
<t tx="ekr.20061008193307">Leo 4.4.2 beta 2                                  October 9, 2006

Leo 4.4.2 beta 2 is available at:
http://sourceforge.net/project/showfiles.php?group_id=3458&amp;package_id=29106

Leo is a text editor, data organizer, project manager and much more. See:
http://webpages.charter.net/edreamleo/intro.html

The highlights of Leo 4.4.2:
----------------------------
- You can now store settings in myLeoSettings.leo without fear of those settings
  being changed by cvs updates or in future versions of Leo.
- Leo's vnode tnode and position classes are now completely independent of the rest of Leo.
  Some api's have been changed.  This 'big reorg' and may affect scripts and plugins.
- Leo's vnode and tnode classes can optionally be compatible with ZODB databases,
  i.e., they can optionally derive from ZODB.Persistence.Persistent.
  See Chapter 17: Using ZODB with Leo for details.
- The leoOPML plugin defines commands to read and write OPML files.
- The slideshow plugin allows Leo to run slideshows defined by @slideshow and @slide nodes.
- The leo_to_rtf and leo_to_html plugins create rtf and html files from Leo outlines.
- Much faster navigation through the outline.
- When focus is in the outline pane, you can move to headlines by typing the first letter of headlines.
- The find command now optionally closes nodes not needed to show the node containing the present match.
- Numerous changes that make Leo easier to use without using a mouse, including new commands and options.
- Many more minibuffer commands appear in the Cmds menu.
- A sax parser can now optionally read .leo files.
- Dozens of bug fixes.

Quote of the month:
------------------
For the non-leo python project I'm (supposed to be) working on, I'm switching from emacs to leo :-)
-- Terry Brown

Links:
------
Leo:      http://webpages.charter.net/edreamleo/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://leo.tigris.org/source/browse/leo/
Quotes:   http://webpages.charter.net/edreamleo/testimonials.html
</t>
<t tx="ekr.20061021071838">Leo 4.4.2 beta 3                                  October 20, 2006

Leo 4.4.2 beta 3 is available at:
http://sourceforge.net/project/showfiles.php?group_id=3458&amp;package_id=29106

The beta release fixed dozens of bugs and smoothed many rough edges.  There
are no known major bugs in Leo.  This will be the last beta release before
LEo 4.4.2 final.

Leo is a text editor, data organizer, project manager and much more. See:
http://webpages.charter.net/edreamleo/intro.html

The highlights of Leo 4.4.2:
----------------------------
- You can now store settings in myLeoSettings.leo without fear of those settings
  being changed by cvs updates or in future versions of Leo.
- Leo's vnode and tnode classes are now completely independent of the rest of Leo.
  Some api's have been changed.  This 'big reorg' and may affect scripts and plugins.
- Leo's vnode and tnode classes can optionally be compatible with ZODB databases,
  i.e., they can optionally derive from ZODB.Persistence.Persistent.
  See Chapter 17: Using ZODB with Leo for details.
- The leoOPML plugin defines commands to read and write OPML files.
- The slideshow plugin allows Leo to run slideshows defined by @slideshow and @slide nodes.
- The leo_to_rtf and leo_to_html plugins create rtf and html files from Leo outlines.
- Much faster navigation through the outline.
- When focus is in the outline pane, you can move to headlines by typing the first letter of headlines.
- The find command now optionally closes nodes not needed to show the node containing the present match.
- Numerous changes that make Leo easier to use without using a mouse, including new commands and options.
- Many new minibuffer commands now appear in the Cmds menu.
- A sax parser can now optionally read .leo files.
- Fixed numerous bugs.

Quote of the month:
------------------
For the non-leo python project I'm (supposed to be) working on, I'm switching from emacs to leo :-)
-- Terry Brown

Links:
------
Leo:        http://webpages.charter.net/edreamleo/front.html
What's new: http://webpages.charter.net/edreamleo/new-4-4-2.html
Home:       http://sourceforge.net/projects/leo/
Download:   http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:        http://leo.tigris.org/source/browse/leo/
Quotes:     http://webpages.charter.net/edreamleo/testimonials.html
</t>
<t tx="ekr.20061026100827">Leo 4.4.2 final                                October 27, 2006

Leo 4.4.2 final is now available at:
http://sourceforge.net/project/showfiles.php?group_id=3458&amp;package_id=29106

This release fixes a few bugs and adds support for controlling Leo from Emacs using pymacs.
There are no known significant bugs in this version of Leo.

Leo is a text editor, data organizer, project manager and much more. See:
http://webpages.charter.net/edreamleo/intro.html

The highlights of Leo 4.4.2:
----------------------------
- You can now store settings in myLeoSettings.leo without fear of those settings
  being changed by cvs updates or in future versions of Leo.
- Leo's vnode and tnode classes are now completely independent of the rest of Leo.
  Some api's have been changed.  This 'big reorg' and may affect scripts and plugins.
- Leo's vnode and tnode classes can optionally be compatible with ZODB databases,
  i.e., they can optionally derive from ZODB.Persistence.Persistent.
  See Chapter 17: Using ZODB with Leo for details.
- The leoOPML plugin defines commands to read and write OPML files.
- The slideshow plugin allows Leo to run slideshows defined by @slideshow and @slide nodes.
- The leo_to_rtf and leo_to_html plugins create rtf and html files from Leo outlines.
- Much faster navigation through the outline.
- When focus is in the outline pane, you can move to headlines by typing the first letter of headlines.
- The find command now optionally closes nodes not needed to show the node containing the present match.
- Numerous changes that make Leo easier to use without using a mouse, including new commands and options.
- Many new minibuffer commands now appear in the Cmds menu.
- A sax parser can now optionally read .leo files.

Links:
------
Leo:        http://webpages.charter.net/edreamleo/front.html
What's new: http://webpages.charter.net/edreamleo/new-4-4-2.html
Home:       http://sourceforge.net/projects/leo/
Download:   http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:        http://leo.tigris.org/source/browse/leo/
Leo's Wiki: http://leo.zwiki.org/FrontPage
Wikipedia:  http://en.wikipedia.org/wiki/Leo_%28text_editor%29
Quotes:     http://webpages.charter.net/edreamleo/testimonials.html
</t>
<t tx="ekr.20061026100827.1"></t>
<t tx="ekr.20061029080932.1">Leo 4.4.2.1 final                                October 29, 2006

Leo 4.4.2.1 final is now available at:
http://sourceforge.net/project/showfiles.php?group_id=3458&amp;package_id=29106

Leo 4.4.2.1 final fixes a recent bug that caused Leo not to create the
.leoRecentFiles.txt file properly in some situations. There are no known
significant bugs in this version of Leo.

Leo 4.4.2 final fixes a few bugs and adds support for pymacs. 

Leo is a text editor, data organizer, project manager and much more. See:
http://webpages.charter.net/edreamleo/intro.html

The highlights of Leo 4.4.2:
----------------------------
- You can now store settings in myLeoSettings.leo without fear of those settings
  being changed by cvs updates or in future versions of Leo.
- Leo's vnode and tnode classes are now completely independent of the rest of Leo.
  Some api's have been changed.  This 'big reorg' and may affect scripts and plugins.
- Leo's vnode and tnode classes can optionally be compatible with ZODB databases,
  i.e., they can optionally derive from ZODB.Persistence.Persistent.
  See Chapter 17: Using ZODB with Leo for details.
- The leoOPML plugin defines commands to read and write OPML files.
- The slideshow plugin allows Leo to run slideshows defined by @slideshow and @slide nodes.
- The leo_to_rtf and leo_to_html plugins create rtf and html files from Leo outlines.
- Much faster navigation through the outline.
- When focus is in the outline pane, you can move to headlines by typing the first letter of headlines.
- The find command now optionally closes nodes not needed to show the node containing the present match.
- Numerous changes that make Leo easier to use without using a mouse, including new commands and options.
- Many new minibuffer commands now appear in the Cmds menu.
- A sax parser can now optionally read .leo files.

Links:
------
Leo:        http://webpages.charter.net/edreamleo/front.html
What's new: http://webpages.charter.net/edreamleo/new-4-4-2.html
Home:       http://sourceforge.net/projects/leo/
Download:   http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:        http://leo.tigris.org/source/browse/leo/
Leo's Wiki: http://leo.zwiki.org/FrontPage
Wikipedia:  http://en.wikipedia.org/wiki/Leo_%28text_editor%29
Quotes:     http://webpages.charter.net/edreamleo/testimonials.html
</t>
<t tx="ekr.20070101093904">Leo is THE BEST THING to ever had happened to me. I've done in two
weeks what would have taken me years (not exaggerating!). Thanks Ed
for a terrific tool!!!!
 
Julian S. Fecteau 
</t>
<t tx="ekr.20070126082333">
C:\Installers\Prog\Python\PyChecker\pychecker-0.8.17\pychecker&gt;python checker.py -h
Usage for: checker.py [options] PACKAGE ...

    PACKAGEs can be a python package, module or filename

Long options can be preceded with no- to turn off (e.g., no-namedargs)

Category
  Options:           Change warning for ... [default value]

Major Options:
      --only         only warn about files passed on the command line [off]
  -e, --level        the maximum error level of warnings to be displayed
  -#, --limit        the maximum number of warnings to be displayed [1000]
  -F, --config       specify .pycheckrc file to use
      --quixote      support Quixote's PTL modules
      --evil         list of evil C extensions that crash the interpreter [[]]

Error Control:
  -i, --import       unused imports [on]
  -k, --pkgimport    unused imports from __init__.py [on]
  -M, --reimportself module imports itself [off]
  -X, --reimport     reimporting a module [off]
  -x, --miximport    module does import and from ... import [off]
  -l, --local        unused local variables, except tuples [on]
  -t, --tuple        all unused local variables, including tuples [off]
  -9, --members      all unused class data members [off]
  -v, --var          all unused module variables [off]
  -p, --privatevar   unused private module variables [on]
  -g, --allglobals   report each occurrence of global warnings [off]
  -n, --namedargs    functions called with named arguments (like keywords) [off]
  -a, --initattr     Attributes (members) must be defined in __init__() [off]
  -I, --initsubclass Subclass.__init__() not defined [off]
  -u, --callinit     Baseclass.__init__() not called [on]
  -0, --abstract     Subclass needs to override methods that only throw exceptions [on]
  -N, --initreturn   Return None from __init__() [on]
  -8, --unreachable  unreachable code [off]
  -2, --constCond    a constant is used in a conditional statement [on]
  -1, --constant1    1 is used in a conditional statement (if 1: or while 1:) [off]
      --stringiter   check if iterating over a string [on]
      --stringfind   check improper use of string.find() [on]
  -A, --callattr     Calling data members as functions [off]
  -y, --classattr    class attribute does not exist [on]
  -S, --self         First argument to methods [self]
      --classmethodargs First argument to classmethods [['cls', 'klass']]
  -T, --argsused     unused method/function arguments [on]
  -z, --varargsused  unused method/function variable arguments [on]
  -G, --selfused     ignore if self is unused in methods [off]
  -o, --override     check if overridden methods have the same signature [on]
      --special      check if __special__ methods exist and have the correct signature [on]
  -U, --reuseattr    check if function/class/method names are reused [on]
  -Y, --positive     check if using unary positive (+) which is usually meaningless [on]
  -j, --moddefvalue  check if modify (call method) on a parameter that has a default value [on]
      --changetypes  check if variables are set to different types [off]
      --unpack       check if unpacking a non-sequence [on]
      --unpacklen    check if unpacking sequence with the wrong length [on]
      --badexcept    check if raising or catching bad exceptions [on]
  -4, --noeffect     check if statement appears to have no effect [on]
      --modulo1      check if using (expr % 1), it has no effect on integers and strings [on]
      --isliteral    check if using (expr is const-literal), doesn't always work on integers and strings [off]

Possible Errors:
  -r, --returnvalues check consistent return values [on]
  -C, --implicitreturns check if using implict and explicit return values [on]
  -O, --objattrs     check that attributes of objects exist [on]
  -7, --slots        various warnings about incorrect usage of __slots__ [on]
  -3, --properties   using properties with classic classes [on]
      --emptyslots   check if __slots__ is empty [on]
  -D, --intdivide    check if using integer division [on]
  -w, --shadow       check if local variable shadows a global [off]
  -s, --shadowbuiltin check if a variable shadows a builtin [on]

Security:
      --input        check if input() is used [on]
  -6, --exec         check if the exec statement is used [off]

Suppressions:
  -q, --stdlib       ignore warnings from files under standard library [on]
  -b, --blacklist    ignore warnings from the list of modules
                         [['leoFrame', 'leoMenu', 'leoGui', 'Tkinter', 'wxPython', 'gtk', 'GTK', 'GDK', 'mod_http']]
  -Z, --varlist      ignore global variables not used if name is one of these values
                         [['__all__', '__version__', '__copyright__']]
  -E, --unusednames  ignore unused locals/arguments if name is one of these values
                         [['_', 'empty', 'unused', 'dummy', 'event', 'commander', 'c', 'i', 'j', 'k', 's', 'tag', 'args', 'keys', 'keywords']]
      --deprecated   ignore use of deprecated modules/functions [on]

Complexity:
  -L, --maxlines     maximum lines in a function [2000]
  -B, --maxbranches  maximum branches in a function [500]
  -R, --maxreturns   maximum returns in a function [100]
  -J, --maxargs      maximum # of arguments to a function [100]
  -K, --maxlocals    maximum # of locals in a function [250]
  -5, --maxrefs      maximum # of identifier references (Law of Demeter) [500]
  -m, --moduledoc    no module doc strings [off]
  -c, --classdoc     no class doc strings [off]
  -f, --funcdoc      no function/method doc strings [off]

Debug:
      --rcfile       print a .pycheckrc file generated from command line args
  -P, --printparse   print internal checker parse structures [off]
  -d, --debug        turn on debugging for checker [off]
  -Q, --quiet        turn off all output except warnings [off]
  -V, --version      print the version of PyChecker and exit</t>
<t tx="ekr.20070126084440">Leo 4.4.3 alpha 1                                  January 26, 2006

Leo 4.4.3 alpha 1 is available at:
http://sourceforge.net/project/showfiles.php?group_id=3458&amp;package_id=29106

Leo is a text editor, data organizer, project manager and much more. See:
http://webpages.charter.net/edreamleo/intro.html

Important: the wxGui plugin is still alpha-quality code at present.

The highlights of Leo 4.4.3:
----------------------------
- A functional wxWidgets plugin.
- Removed all gui-dependent code from Leo's core.
- Better support for the winpdb debugger.
- Many minor improvements, new settings and bug fixes.

Links:
------
Leo:      http://webpages.charter.net/edreamleo/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://leo.tigris.org/source/browse/leo/
Quotes:   http://webpages.charter.net/edreamleo/testimonials.html</t>
<t tx="ekr.20070317054921">Leo 4.4.3 alpha 2                                  March 17, 2006

Leo 4.4.3 alpha 2 is available at:
http://sourceforge.net/project/showfiles.php?group_id=3458&amp;package_id=29106

This version of Leo should be safe enough for production use. It is an alpha
distribution because not all plugins have been tested on the reorganized code
base.

Leo is a text editor, data organizer, project manager and much more. See:
http://webpages.charter.net/edreamleo/intro.html

The highlights of Leo 4.4.3:
----------------------------
- A leoBridge module that allows full access to all of Leo's capabilities
  from programs running outside of Leo.
- Added support for @enabled-plugins nodes in settings files.
- The__wx_gui plugin is now functional.
- Removed all gui-dependent code from Leo's core.
- Better support for the winpdb debugger.
- Many minor improvements, new settings and bug fixes.

Links:
------
Leo:      http://webpages.charter.net/edreamleo/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://leo.tigris.org/source/browse/leo/
Quotes:   http://webpages.charter.net/edreamleo/testimonials.html</t>
<t tx="ekr.20070325123540"></t>
<t tx="ekr.20070425092712">Leo--especially with its feature of user-controllable outlining and
overview __has for the last 4-5 years had the greatest positive effect
on my overall programming quality of life than anything else out there
in the software world (apart maybe from the Python language itself,
and those who contribute Python modules to the world). -- David McNab
</t>
<t tx="ekr.20070518070012">Leo 4.4.3 beta 1                                       May 18, 2006

Leo 4.4.3 beta 1 is available at:
http://sourceforge.net/project/showfiles.php?group_id=3458&amp;package_id=29106

Leo is a text editor, data organizer, project manager and much more. See:
http://webpages.charter.net/edreamleo/intro.html

The highlights of Leo 4.4.3:
----------------------------
- Added support for chapters in Leo's core.
  Chapters are disabled by default.  To enable, set @bool use_chapters = True.
- Added support for zipped .leo files.
- Added a leoBridge module that allows full access to all of Leo's capabilities
  from programs running outside of Leo.
- Removed all gui-dependent code from Leo's core.
- Better support for the winpdb debugger.
- Added support for @enabled-plugins nodes in settings files.
- Added support for @open-with nodes in settings files.
- The__wx_gui plugin is now functional.
- Many minor improvements, new settings, commands and bug fixes.

Links:
------
Leo:      http://webpages.charter.net/edreamleo/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://leo.tigris.org/source/browse/leo/
Quotes:   http://webpages.charter.net/edreamleo/testimonials.html</t>
<t tx="ekr.20070610174300">Leo 4.4.3 beta 2                                June 12, 2006

Leo 4.4.3 beta 2 is available at:
http://sourceforge.net/project/showfiles.php?group_id=3458&amp;package_id=29106

Leo is a text editor, data organizer, project manager and much more. See:
http://webpages.charter.net/edreamleo/intro.html

The highlights of Leo 4.4.3:
----------------------------
- Added support for chapters in Leo's core.
  Chapters are disabled by default.  To enable, set @bool use_chapters = True.
- Added support for zipped .leo files.
- Added a leoBridge module that allows full access to all of Leo's capabilities
  from programs running outside of Leo.
- Removed all gui-dependent code from Leo's core.
- Better support for the winpdb debugger.
- Added support for @enabled-plugins nodes in settings files.
- Added support for @open-with nodes in settings files.
- Added support for @bool write_strips_blank_lines setting.
- The__wx_gui plugin is now functional.
- Leo can use aspell on Linux when using Python 2.5 or later.
- Many minor improvements, new settings, commands and bug fixes.

Links:
------
Leo:      http://webpages.charter.net/edreamleo/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://leo.tigris.org/source/browse/leo/
Quotes:   http://webpages.charter.net/edreamleo/testimonials.html</t>
<t tx="ekr.20070614105133.3">@color

# Must be an @nosent file.

print '='*30,'setup.py','='*30

from distutils.core import setup

&lt;&lt; define long_description &gt;&gt;
&lt;&lt; define version number in setup.py &gt;&gt;

setup (
    name='leo',
    version=version,
    author='Edward K. Ream',
    author_email='edreamleo@charter.net',
    url='http://webpages.charter.net/edreamleo/front.html',
    download_url='http://sourceforge.net/project/showfiles.php?group_id=3458',
    py_modules=[], # The manifest specifies everything.
    description = 'Leo: Literate Editor with Outlines',
    license='Python', # licence [sic] changed to license in Python 2.3
    platforms=['all',],
    long_description = long_description,
    # keywords = 'outline, outliner, ide, editor, literate programming',
)

# print ; print '='*30,'setup.py complete','='*30 ; print
</t>
<t tx="ekr.20070614110334">long_description = \
"""Leo is an IDE, an outliner, a scripting and unit testing framework based on Python,
a literate programming tool, a data organizer and a project manager.

Leo is written in 100% pure Python and works on any platform that supports
Python 2.2.1 or above and the Tk Tk 8.4 or above.

Download Python from http://python.org/
Download tcl/Tk from http://tcl.activestate.com/software/tcltk/
 """</t>
<t tx="ekr.20070614165755">@ Important: The bdist_egg command is for 'binary' distributions.
  Source distributions (.zip files) are fine for pure Python programs like Leo.
@c

import os,sys

folder = g.os_path_abspath(g.os_path_join(g.app.loadDir,'..'))
os.chdir(folder)

# command = '%s setup.py sdist' % (sys.executable) # For setuptools.

command = '%s setup.py sdist --force-manifest --formats=zip' % (sys.executable)
print command
os.system(command)
</t>
<t tx="ekr.20070620084858">import os,sys

folder = g.os_path_abspath(g.os_path_join(g.app.loadDir,'..'))
os.chdir(folder)

command = '%s setup.py register' % (sys.executable)
print command
os.system(command)
</t>
<t tx="ekr.20070620084858.1">import os,sys

folder = g.os_path_abspath(g.os_path_join(g.app.loadDir,'..'))
os.chdir(folder)

command = '%s setup.py sdist upload --show-response' % (sys.executable)
print command
os.system(command)
</t>
<t tx="ekr.20070622074708"># The manifest template: specifies all files to be included in the distribution.

# Note: these are glob patterns.
# There seems to be a bug in distutils: ../ doesn't get handled properly.
# manifest.in must be in the current directory.

include __init__.py
include manifest.in
include MANIFEST
include install
include setup.py
include uninstall

include config/leoSettings.leo

include dist/leo-4-3.nsi
include dist/leoDist.leo
include dist/.pycheckrc

include doc/LeoDiary.leo
include doc/LeoDocs.leo
include doc/leoNotes.txt
include doc/LeoPostings.leo
include doc/LeoSlideShows.leo
include doc/leoToDo.txt
include doc/leoToDoLater.txt

include doc/README.TXT
include doc/INSTALL.TXT
include doc/PKG-INFO.TXT
include doc/LICENSE.TXT

include doc/default.css
include doc/leo_rst.css
include doc/silver_city.css

include doc/LeoN/sun98achieving.pdf
include doc/LeoN/sun97generic.pdf
include doc/LeoN/sun98operational.pdf
include doc/LeoN/sun98reversible.pdf

include doc/html/*.*

include extensions/aspell23.pyd
include extensions/aspell24.pyd
include extensions/optparse.py
include extensions/path.py
include extensions/sets.py
include extensions/subprocess.py

include extensions/__init__.py

include extensions/Pmw/__init__.py
include extensions/Pmw/Pmw_1_2/__init__.py
include extensions/Pmw/Pmw_1_2/bin/*.*
include extensions/Pmw/Pmw_1_2/contrib/*.*
include extensions/Pmw/Pmw_1_2/demos/*.*
include extensions/Pmw/Pmw_1_2/doc/*.*
include extensions/Pmw/Pmw_1_2/lib/*.*
include extensions/Pmw/Pmw_1_2/tests/*.*

# These will typically generate sdist warnings.
exclude extensions/Pmw/Pmw_1_2/bin/*.pyc
exclude extensions/Pmw/Pmw_1_2/contrib/*.pyc
exclude extensions/Pmw/Pmw_1_2/demos/*.pyc
exclude extensions/Pmw/Pmw_1_2/doc/*.pyc
exclude extensions/Pmw/Pmw_1_2/lib/*.pyc
exclude extensions/Pmw/Pmw_1_2/tests/*.pyc

# These will typically generate sdist warnings.
exclude extensions/Pmw/Pmw_1_2/bin/*.pyo
exclude extensions/Pmw/Pmw_1_2/contrib/*.pyo
exclude extensions/Pmw/Pmw_1_2/demos/*.pyo
exclude extensions/Pmw/Pmw_1_2/doc/*.pyo
exclude extensions/Pmw/Pmw_1_2/lib/*.pyo
exclude extensions/Pmw/Pmw_1_2/tests/*.pyo

include Icons/*.*

include modes/*.xml
include modes/*.py

include plugins/leoPlugins.leo
include plugins/*.ini
include plugins/*.txt
include plugins/*.py

include plugins/trees/*.py
include plugins/trees/pluginsManager.txt

include scripts/openLeoScript.sh
include scripts/scripts.leo
include scripts/leoScripts.txt
include scripts/*.py

include src/__init__.py
include src/buttons.txt
include src/LeoPy.leo
include src/leo*.py
include src/leoProjects.txt
include src/oldLeoProjects.leo

include test/__init__.py
include test/test.leo
include test/unitTest.leo

include test/unittest/batchTest.py
include test/unittest/leoDynamicTest.py
include test/unittest/errorTest.py</t>
<t tx="ekr.20070622075820"># Main distribution script.  Creates leo-nn.zip using createLeoDist.py

&lt;&lt; about this script &gt;&gt;
&lt;&lt; version history &gt;&gt;

@language python
@tabwidth -4

# REMINDER:  Update &lt; &lt; setup info for createLeoDist.py &gt; &gt;
# REMINDER: Remove 'chinese' directory from test/unittest.

print ; print '-' * 60
&lt;&lt; imports &gt;&gt;
&lt;&lt; define files &amp; directories &gt;&gt;

print 'topDir',topDir

os.chdir(topDir) # Change to the top directory.
&lt;&lt; copy createLeoDist.py to top directory &gt;&gt;
&lt;&lt; run createLeoDist from the top directory &gt;&gt;
&lt;&lt; remove temp createLeoDist.py &gt;&gt;
print 'script complete'</t>
<t tx="ekr.20070622075820.1">@

This is the script that I use to create 'official' distributions of Leo. It
should run on any Leo installation.

According to the distutils docs, the way to create a source distribution is by
running:

    'python createLeoDist.py sdist &lt;args&gt;'

where the file createLeoDist.py contains the following:

    modules = []
    distutils.core.setup (
        &lt;&lt; setup info for createLeoDist.py &gt;&gt;
    )

N.B. createLeoDist.py _must_ be run from the leo folder! This file is
distributed in the dist folder, so this script makes a temporary copy of
createLeoDist.py to the leo folder.

The section called &lt; &lt; setup info for createLeoDist.py &gt; &gt; contains further
information. Make sure to update this information before running this script.
</t>
<t tx="ekr.20070622075820.2">@

New in 4.3 a1.

- This script should run on all Leo installations; the script computes the locations
  of all files as 'offsets' from g.app.loadDir.

- This script temporarily copies .pycheckrc from the the leo/.. folder to the leo folder.

This allows us to distribute .pycheckrc somewhere, even if it isn't in correct place.

- This script temporarily copies createLeoDist.py from the dist folder to the leo folder.
</t>
<t tx="ekr.20070622075820.3"># import leoGlobals as g

import os
import sys</t>
<t tx="ekr.20070622075820.4"># The top level leo directory.
topDir  = g.os_path_abspath(g.os_path_join(g.app.loadDir,".."))

# The MANIFEST file in the leo directory.
if 0:
    # It doesn't work to delete the MANIFEST file.
    # Use --force-manifest option instead.
    manifestFile = g.os_path_abspath(g.os_path_join(topDir,'MANIFEST'))

# We will copy createLeoDist.py from leo/dist to leo.
srcFile = g.os_path_abspath(g.os_path_join(topDir,'dist','createLeoDist.py'))
dstFile = g.os_path_abspath(g.os_path_join(topDir,'createLeoDist.py'))

# We will copy .pycheckrc from leo/.. to leo.
pycheckerFile     = g.os_path_abspath(g.os_path_join(topDir,'..','.pycheckrc'))
destPycheckerFile = g.os_path_abspath(g.os_path_join(topDir,'.pycheckrc'))</t>
<t tx="ekr.20070622075820.5"># createLeoDist.py is distributed the dist directory,
# but createLeoDist.py must be run from the leo directory!

# Copy dist/createLeoDist.py to leo directory.
print 'copying %s to %s' % (srcFile,topDir)

if g.os_path_exists(dstFile):
    os.remove(dstFile)

src = file(srcFile,'r')
s = src.read()
src.close()
dst = file(dstFile,'w')
dst.write(s)
dst.close()</t>
<t tx="ekr.20070622075820.6"># Run 'python createLeoDist.py sdist &lt;args&gt;' to create the leo-nn.zip.

command = '%s %s sdist --force-manifest --formats=zip' % (sys.executable,dstFile)
print command
os.system(command)</t>
<t tx="ekr.20070622075820.7"># Remove the temp copy of createLeoDist.py
print 'removing %s' % dstFile
os.remove(dstFile)</t>
<t tx="ekr.20070622080750">print '='*30,'setup.py','='*30

# Boilerplate to automatically download setuptools if it not installed.
#import ez_setup
#ez_setup.use_setuptools()

import setuptools

### &lt; &lt; define long_description &gt; &gt;

setuptools.setup (
    name='leo',
    version='4.4.3b3', # No spaces!
        # pre-release tags: 4.4.3b1 or 4.4.3rc1 or 4.4.3preview1
        # Do not use post-release-tags: 4.4.3-whatever.
        # final release: 4.4.3final or just 4.4.3.
    author='Edward K. Ream',
    author_email='edreamleo@charter.net',
    url='http://webpages.charter.net/edreamleo/front.html',
    download_url='http://sourceforge.net/project/showfiles.php?group_id=3458',
    py_modules=[], # The manifest specifies everything.
    # packages = setuptools.find_packages(),
    
    include_package_data = True, # Required, e.g. for Pmw.def
    # exclude_package_data = { '': ['*.pyc','*.pyo']},
    zip_safe=False, # Never run Leo from a zip file.
    install_requires=[], #'python&gt;=2.2.1',],
    description = 'Leo: Literate Editor with Outlines',
    license='Python', # licence [sic] changed to license in Python 2.3
    platforms=['all',],
    long_description = long_description,
    keywords = 'outline, outliner, ide, editor, literate programming',
)

print ; print '='*30,'setup.py complete','='*30 ; print
</t>
<t tx="ekr.20070622081640"># These can't be used at present.</t>
<t tx="ekr.20070622084133"></t>
<t tx="ekr.20070622084634">version='4.4.3-beta-3' # No spaces and no trailing comma.</t>
</tnodes>
</leo_file>
