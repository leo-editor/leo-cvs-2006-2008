#@+leo-ver=4-thin
#@+node:ekr.20040117181936:@thin ../doc/leoToDo.txt
#@+all
#@+node:ekr.20060411095710:To do 4.4 b3
#@+node:ekr.20060408065447:modify selfInsertCommand for MacOS
#@+node:ekr.20051125080855:selfInsertCommand
def selfInsertCommand(self,event,action='insert'):
    
    '''Insert a character in the body pane.
    
    This is the default binding for all keys in the body pane.'''
    
    c = self.c ; p = c.currentPosition()
    ch = event and event.char or ''
    w = event and event.widget
    name = c.widget_name(w)
    oldSel =  name.startswith('body') and g.app.gui.getTextSelection(w)
    oldText = name.startswith('body') and p.bodyString()
    removeTrailing = None # A signal to compute it later.
    undoType = 'Typing'
    trace = c.config.getBool('trace_masterCommand')
    
    if trace: g.trace(name)
    
    if g.doHook("bodykey1",c=c,p=p,v=p,ch=ch,oldSel=oldSel,undoType=undoType):
        return "break" # The hook claims to have handled the event.
        
    if ch == '\t':
        removeTrailing = self.updateTab(p,w)
    elif ch == '\b':
        # This is correct: we only come here if there no bindngs for this key. 
        self.backwardDeleteCharacter(event)
    elif ch in ('\r','\n'):
        ch = '\n'
        << handle newline >>
    elif ch in ('(',')','[',']','{','}') and c.config.getBool('autocomplete-brackets'):
        self.updateAutomatchBracket(p,w,ch,oldSel)
    elif ch: # Null chars must not delete the selection.
        i,j = oldSel
        if i != j:                  w.delete(i,j)
        elif action == 'overwrite': w.delete(i,'%s+1c' % i)
        w.insert(i,ch)                     
    else:
        return 'break' # New in 4.4a5: this method *always* returns 'break'

    # Update the text and handle undo.
    newText = g.app.gui.getAllText(w) # New in 4.4b3: converts to unicode.
    w.see(w.index('insert'))
    if newText != oldText:
        c.frame.body.onBodyChanged(undoType=undoType,
            oldSel=oldSel,oldText=oldText,oldYview=None,removeTrailing=removeTrailing)
            
    g.doHook("bodykey2",c=c,p=p,v=p,ch=ch,oldSel=oldSel,undoType=undoType)
    return 'break'
#@nonl
#@+node:ekr.20051026171121:<< handle newline >>
i,j = oldSel

g.trace(repr(ch))

if i != j:
    # No auto-indent if there is selected text.
    w.delete(i,j)
    w.insert(i,ch)
else:
    w.insert(i,ch)
    if c.frame.body.colorizer.useSyntaxColoring(p) and undoType != "Change":
        # No auto-indent if in @nocolor mode or after a Change command.
        removeTrailing = self.updateAutoIndent(p)
#@nonl
#@-node:ekr.20051026171121:<< handle newline >>
#@+node:ekr.20051027172949:updateAutomatchBracket
def updateAutomatchBracket (self,p,w,ch,oldSel):
    
    # assert ch in ('(',')','[',']','{','}')
    
    c = self.c ; d = g.scanDirectives(c,p) ; i,j = oldSel
    language = d.get('language')
    
    if ch in ('(','[','{',):
        automatch = language not in ('plain',)
        if automatch:
            ch = ch + {'(':')','[':']','{':'}'}.get(ch)
        if i != j:
            w.delete(i,j)
        w.insert(i,ch)
        if automatch:
            w.mark_set('insert','insert-1c')
    else:
        ch2 = w.get('insert')
        if ch2 in (')',']','}'):
            w.mark_set('insert','insert+1c')
        else:
            if i != j:
                w.delete(i,j)
            w.insert(i,ch)
#@nonl
#@-node:ekr.20051027172949:updateAutomatchBracket
#@+node:ekr.20051026171121.1:udpateAutoIndent
# By David McNab:
def updateAutoIndent (self,p):

    c = self.c ; d = g.scanDirectives(c,p)
    tab_width = d.get("tabwidth",c.tab_width) # Get the previous line.
    s = c.frame.bodyCtrl.get("insert linestart - 1 lines","insert linestart -1c")
    # Add the leading whitespace to the present line.
    junk, width = g.skip_leading_ws_with_indent(s,0,tab_width)
    if s and len(s) > 0 and s [ -1] == ':':
        # For Python: increase auto-indent after colons.
        if c.frame.body.colorizer.scanColorDirectives(p) == "python":
            width += abs(tab_width)
    if c.config.getBool("smart_auto_indent"):
        # Determine if prev line has unclosed parens/brackets/braces
        brackets = [width] ; tabex = 0
        for i in range(0,len(s)):
            if s [i] == '\t':
                tabex += tab_width-1
            if s [i] in '([{':
                brackets.append(i+tabex+1)
            elif s [i] in '}])' and len(brackets) > 1:
                brackets.pop()
        width = brackets.pop()
    ws = g.computeLeadingWhitespace(width,tab_width)
    if ws:
        c.frame.bodyCtrl.insert("insert",ws)
        removeTrailing = False
    else:
        removeTrailing = None
    return removeTrailing
#@nonl
#@-node:ekr.20051026171121.1:udpateAutoIndent
#@+node:ekr.20051026092433:updateTab
def updateTab (self,p,w):

    c = self.c ; d = g.scanDirectives(c,p)
    tab_width = d.get("tabwidth",c.tab_width)
    
    i,j = g.app.gui.getTextSelection(w)
    if i != j:
        w.delete(i,j)
    if tab_width > 0:
        w.insert("insert",'\t')
    else:
        # Get the preceeding characters.
        s = w.get("insert linestart","insert")
    
        # Compute n, the number of spaces to insert.
        width = g.computeWidth(s,tab_width)
        n = abs(tab_width) - (width % abs(tab_width))
        w.insert("insert",' ' * n)
#@nonl
#@-node:ekr.20051026092433:updateTab
#@-node:ekr.20051125080855:selfInsertCommand
#@-node:ekr.20060408065447:modify selfInsertCommand for MacOS
#@+node:ekr.20060411101844:Fixed failed unit tests
leoID = ekr (in c:\Documents and Settings\Ed)
reading settings in C:\prog\tigris-cvs\leo\config\leoSettings.leo
reading settings in C:\prog\tigris-cvs\leo\test\unitTest.leo
rst3 plugin: SilverCity not loaded
Registered unit-test-command1
found  3 doctests for leoGlobals
found  1 doctests for leoTest
found  5 test routines for leoAtFile
found  4 test routines for leoEditCommands
found  1 test routine for leoFileCommands
found 14 test routines for leoGlobals
EKR: reportlab.__init__
found  5 test routines for multifile
..F.
End of doctests
..........OSError: [Errno 2] No such file or directory: 'xyzzy'

......
test of es_print: ─é
.es_trace:
test of es_trace: ─é
........
End of test routines
..leoID = ekr (in c:\Documents and Settings\Ed)
leoID = ekr (in c:\Documents and Settings\Ed)
...............................................Registered test-registerCommand bound to <Alt+Ctrl+Shift+Z>
...............................
End of new find tests
.............................................
End of tests of @file nodes
.................................
End of general unit tests
....
End of commands tests
.............................F..........................................................................................
..................
opening a new window to test more plugin logic

.........................................................................................................
======================================================================
FAIL: Doctest: leoGlobals.mulderUpdateAlgorithm.stripWhitespaceFromBlankLines
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\python24\lib\doctest.py", line 2152, in runTest
    raise self.failureException(self.format_failure(new.getvalue()))
AssertionError: Failed doctest test for leoGlobals.mulderUpdateAlgorithm.stripWhitespaceFromBlankLines
  File "c:\prog\tigris-cvs\leo\src\leoGlobals.py", line 4774, in stripWhitespaceFromBlankLines

----------------------------------------------------------------------
File "c:\prog\tigris-cvs\leo\src\leoGlobals.py", line 4782, in leoGlobals.mulderUpdateAlgorithm.stripWhitespaceFromBlank
Lines
Failed example:
    g.mulderUpdateAlgorithm().stripWhitespaceFromBlankLines(theLines)
Expected:
    ['a\n', '\n', '\n', 'b']
Got:
    ['a\n', '', '', 'b']


======================================================================
FAIL: @test line endings of Linux scripts

----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\prog\tigris-cvs\leo\src\leoTest.py", line 155, in runTest
    exec script + '\n' in {'c':c,'g':g,'p':p}
  File "<string>", line 20, in ?
  File "<string>", line 14, in checkLinuxLineEndings
AssertionError: Bad Linux line ending in C:\prog\tigris-cvs\leo\src\..\install: cr: 156, nl: 156

----------------------------------------------------------------------
Ran 434 tests in 179.829s

FAILED (failures=2)
>>>
#@nonl
#@-node:ekr.20060411101844:Fixed failed unit tests
#@-node:ekr.20060411095710:To do 4.4 b3
#@+node:ekr.20060226131603:To do 4.4 b4
#@+node:ekr.20060220155313:Script: update-leo-settings-file
#@-node:ekr.20060220155313:Script: update-leo-settings-file
#@+node:ekr.20060210140415:Most important 10
#@+node:ekr.20060307074302.1:set-change-text command should work when entering find text.
# It's not clear how to do this.
#@nonl
#@-node:ekr.20060307074302.1:set-change-text command should work when entering find text.
#@+node:ekr.20060122183544:Improve isearch
@nocolor

- Handle backspace for isearch: keep a stack of previous matches.
- Allow cross-node isearches.
#@-node:ekr.20060122183544:Improve isearch
#@+node:ekr.20060123095316:clear-selection
Useful, e.g., after a find.
#@nonl
#@-node:ekr.20060123095316:clear-selection
#@+node:ekr.20060113090042:open-outline-by-name & filename completion
#@-node:ekr.20060113090042:open-outline-by-name & filename completion
#@+node:ekr.20060122194643:isearch-headline (forward & backward)
#@-node:ekr.20060122194643:isearch-headline (forward & backward)
#@+node:ekr.20060116085649:find-word-on-line, find-character-on-line (forward & backward)
#@-node:ekr.20060116085649:find-word-on-line, find-character-on-line (forward & backward)
#@+node:ekr.20060116074839.2:extend-to-word
#@-node:ekr.20060116074839.2:extend-to-word
#@+node:ekr.20060123091352:Incremental search in switch-to-buffer
#@-node:ekr.20060123091352:Incremental search in switch-to-buffer
#@+node:ekr.20060206103922:Minibuffer interface for GoToLine number (rewrite goto-line)
#@-node:ekr.20060206103922:Minibuffer interface for GoToLine number (rewrite goto-line)
#@+node:ekr.20060122185244.2:Fix unindent command
# unindent-region should work in all panes.
#@nonl
#@-node:ekr.20060122185244.2:Fix unindent command
#@-node:ekr.20060210140415:Most important 10
#@+node:ekr.20060328120455:Next 7
#@+node:ekr.20051202095626:help-for-command
Use docstrings as the help message.
#@nonl
#@-node:ekr.20051202095626:help-for-command
#@+node:ekr.20060116084526.1:insert/remove spaces/tabs from lines (LeoUser)
http://sourceforge.net/forum/message.php?msg_id=3488030

add-space-to-lines      Adds a space is added to start of all selected lines.

add-tab-to-line         Adds 4 spaces to start of all selected lines.

remove-space-from lines Removes a space from start of all selected lines.

remove-tab-from lines   Removes a space from start of all selected lines.
#@nonl
#@-node:ekr.20060116084526.1:insert/remove spaces/tabs from lines (LeoUser)
#@+node:ekr.20060117115212:Fix rename-buffer command
#@-node:ekr.20060117115212:Fix rename-buffer command
#@+node:ekr.20060104083551:move-line-up/down (LeoUser)
http://sourceforge.net/forum/message.php?msg_id=3488030

move-region-up

Swap the selection with the line above it. If we are at the top of a node, the
node identified by threadBack() is selected and the text is moved to the bottom
of the node.

move-region-down

Swap the selection with the line below it. If we are at the bottom of the node,
the node identified by threadNext() is selected and the text is moved to the top
of the node.

In all cases the moved text remains selected, even when the text moves to another node.
#@nonl
#@-node:ekr.20060104083551:move-line-up/down (LeoUser)
#@+node:ekr.20060211093935:Support for @list and on-enter-mode
#@-node:ekr.20060211093935:Support for @list and on-enter-mode
#@+node:ekr.20060116090428:Expand 'point' so it indicates node as well as text location
#@-node:ekr.20060116090428:Expand 'point' so it indicates node as well as text location
#@+node:ekr.20060211184834:Review all commands in leoEditCommands.py
Any command that alters text should call begin/endCommand.
#@nonl
#@-node:ekr.20060211184834:Review all commands in leoEditCommands.py
#@-node:ekr.20060328120455:Next 7
#@+node:ekr.20060227163911.1:Leo's web site
@nocolor

- Put more screen shots on Leo's web site.
- Put complete slide show on Leo's web site.
#@nonl
#@-node:ekr.20060227163911.1:Leo's web site
#@-node:ekr.20060226131603:To do 4.4 b4
#@-all
#@nonl
#@-node:ekr.20040117181936:@thin ../doc/leoToDo.txt
#@-leo
